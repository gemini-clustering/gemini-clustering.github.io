
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_rim.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_rim.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_rim.py:


=================================================================
Simple logistic regression with RIM
=================================================================

RIM (regularised mutual information) is a proposal of model by Krause et al. (2010) which consists in
maximising for a linear model under :math:`\ell_2` penalty. In this example, we show how to do clustering of a
Gaussian mixture using RIM.

.. GENERATED FROM PYTHON SOURCE LINES 10-17

.. code-block:: default


    import numpy as np
    from matplotlib import pyplot as plt
    from sklearn import datasets

    from gemclus.linear import RIM








.. GENERATED FROM PYTHON SOURCE LINES 18-20

Load a simple synthetic dataset
--------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 22-26

.. code-block:: default


    # Generate samples on that are simple to separate
    X, y = datasets.make_blobs(centers=3, cluster_std=0.5, n_samples=200, random_state=0)








.. GENERATED FROM PYTHON SOURCE LINES 27-30

Train the model
--------------------------------------------------------------
Create the RIM clustering model (just a logistic regression) and fit it to the data.

.. GENERATED FROM PYTHON SOURCE LINES 32-36

.. code-block:: default


    clf = RIM(n_clusters=3, random_state=0)
    clf.fit(X)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>RIM(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" checked><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">RIM</label><div class="sk-toggleable__content"><pre>RIM(random_state=0)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 37-40

Final Clustering
-----------------
Let us take a look at the decision boundaries according to the probabilities

.. GENERATED FROM PYTHON SOURCE LINES 42-77

.. code-block:: default


    # Predict a grad of inputs
    x_vals = np.linspace(X[:, 0].min() - 0.5, X[:, 0].max() + 0.5, num=50)
    y_vals = np.linspace(X[:, 1].min() - 0.5, X[:, 1].max() + 0.5, num=50)
    xx, yy = np.meshgrid(x_vals, y_vals)
    grid_inputs = np.c_[xx.ravel(), yy.ravel()]
    grid_pred = clf.predict_proba(grid_inputs)

    # Isolate probability of the argmax
    zz = grid_pred.max(1)
    zz = zz.reshape((50, 50))

    plt.contourf(xx, yy, zz, alpha=0.3, levels=10)

    # Now, show the cluster predictions
    y_pred = clf.predict(X)
    X_0 = X[y_pred == 0]
    X_1 = X[y_pred == 1]
    X_2 = X[y_pred == 2]

    ax0 = plt.scatter(X_0[:, 0], X_0[:, 1], c='crimson', s=50)
    ax1 = plt.scatter(X_1[:, 0], X_1[:, 1], c='deepskyblue', s=50)
    ax2 = plt.scatter(X_2[:, 0], X_2[:, 1], c='darkgreen', s=50)

    leg = plt.legend([ax0, ax1, ax2],
                     ['Cluster 0', 'Cluster 1', 'Cluster 2'],
                     loc='upper left', fancybox=True, scatterpoints=1)
    leg.get_frame().set_alpha(0.5)

    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')

    plt.show()

    print(clf.score(X))



.. image-sg:: /auto_examples/images/sphx_glr_plot_rim_001.png
   :alt: plot rim
   :srcset: /auto_examples/images/sphx_glr_plot_rim_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.021396049320560717





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.346 seconds)


.. _sphx_glr_download_auto_examples_plot_rim.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_rim.py <plot_rim.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_rim.ipynb <plot_rim.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
