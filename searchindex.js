Search.setIndex({"docnames": ["api", "auto_examples/_general/plot_circles", "auto_examples/_general/plot_custom_model", "auto_examples/_general/plot_graph_node_clustering", "auto_examples/_general/plot_gstm", "auto_examples/_general/plot_intro_mlp_mmd", "auto_examples/_general/plot_kernel_kmeans", "auto_examples/_general/plot_kernel_rim", "auto_examples/_general/plot_moon_clustering", "auto_examples/_general/plot_nonparametric_clustering", "auto_examples/_general/plot_rim", "auto_examples/_general/sg_execution_times", "auto_examples/feature_selection/plot_feature_selection_linear", "auto_examples/feature_selection/plot_feature_selection_logreg_mi", "auto_examples/feature_selection/plot_feature_selection_mlp", "auto_examples/feature_selection/plot_grouped_selection", "auto_examples/feature_selection/sg_execution_times", "auto_examples/index", "auto_examples/mlcl/plot_semi_supervised_consensus", "auto_examples/mlcl/sg_execution_times", "auto_examples/scoring/plot_gemini_scoring", "auto_examples/scoring/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/trees/plot_douglas_example", "auto_examples/trees/plot_kauri_example", "auto_examples/trees/sg_execution_times", "generated/gemclus.DiscriminativeModel", "generated/gemclus.add_mlcl_constraint", "generated/gemclus.data.celeux_one", "generated/gemclus.data.celeux_two", "generated/gemclus.data.draw_gmm", "generated/gemclus.data.gstm", "generated/gemclus.data.multivariate_student_t", "generated/gemclus.gemini.HellingerGEMINI", "generated/gemclus.gemini.KLGEMINI", "generated/gemclus.gemini.MI", "generated/gemclus.gemini.MMDGEMINI", "generated/gemclus.gemini.TVGEMINI", "generated/gemclus.gemini.WassersteinGEMINI", "generated/gemclus.linear.KernelRIM", "generated/gemclus.linear.LinearMMD", "generated/gemclus.linear.LinearModel", "generated/gemclus.linear.LinearWasserstein", "generated/gemclus.linear.RIM", "generated/gemclus.mlp.MLPMMD", "generated/gemclus.mlp.MLPModel", "generated/gemclus.mlp.MLPWasserstein", "generated/gemclus.nonparametric.CategoricalMMD", "generated/gemclus.nonparametric.CategoricalModel", "generated/gemclus.nonparametric.CategoricalWasserstein", "generated/gemclus.sparse.SparseLinearMI", "generated/gemclus.sparse.SparseLinearMMD", "generated/gemclus.sparse.SparseLinearModel", "generated/gemclus.sparse.SparseMLPMMD", "generated/gemclus.sparse.SparseMLPModel", "generated/gemclus.tree.Douglas", "generated/gemclus.tree.Kauri", "generated/gemclus.tree.print_kauri_tree", "history", "index", "quick_start", "sg_execution_times", "user_guide"], "filenames": ["api.rst", "auto_examples/_general/plot_circles.rst", "auto_examples/_general/plot_custom_model.rst", "auto_examples/_general/plot_graph_node_clustering.rst", "auto_examples/_general/plot_gstm.rst", "auto_examples/_general/plot_intro_mlp_mmd.rst", "auto_examples/_general/plot_kernel_kmeans.rst", "auto_examples/_general/plot_kernel_rim.rst", "auto_examples/_general/plot_moon_clustering.rst", "auto_examples/_general/plot_nonparametric_clustering.rst", "auto_examples/_general/plot_rim.rst", "auto_examples/_general/sg_execution_times.rst", "auto_examples/feature_selection/plot_feature_selection_linear.rst", "auto_examples/feature_selection/plot_feature_selection_logreg_mi.rst", "auto_examples/feature_selection/plot_feature_selection_mlp.rst", "auto_examples/feature_selection/plot_grouped_selection.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/mlcl/plot_semi_supervised_consensus.rst", "auto_examples/mlcl/sg_execution_times.rst", "auto_examples/scoring/plot_gemini_scoring.rst", "auto_examples/scoring/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/trees/plot_douglas_example.rst", "auto_examples/trees/plot_kauri_example.rst", "auto_examples/trees/sg_execution_times.rst", "generated/gemclus.DiscriminativeModel.rst", "generated/gemclus.add_mlcl_constraint.rst", "generated/gemclus.data.celeux_one.rst", "generated/gemclus.data.celeux_two.rst", "generated/gemclus.data.draw_gmm.rst", "generated/gemclus.data.gstm.rst", "generated/gemclus.data.multivariate_student_t.rst", "generated/gemclus.gemini.HellingerGEMINI.rst", "generated/gemclus.gemini.KLGEMINI.rst", "generated/gemclus.gemini.MI.rst", "generated/gemclus.gemini.MMDGEMINI.rst", "generated/gemclus.gemini.TVGEMINI.rst", "generated/gemclus.gemini.WassersteinGEMINI.rst", "generated/gemclus.linear.KernelRIM.rst", "generated/gemclus.linear.LinearMMD.rst", "generated/gemclus.linear.LinearModel.rst", "generated/gemclus.linear.LinearWasserstein.rst", "generated/gemclus.linear.RIM.rst", "generated/gemclus.mlp.MLPMMD.rst", "generated/gemclus.mlp.MLPModel.rst", "generated/gemclus.mlp.MLPWasserstein.rst", "generated/gemclus.nonparametric.CategoricalMMD.rst", "generated/gemclus.nonparametric.CategoricalModel.rst", "generated/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/gemclus.sparse.SparseLinearMI.rst", "generated/gemclus.sparse.SparseLinearMMD.rst", "generated/gemclus.sparse.SparseLinearModel.rst", "generated/gemclus.sparse.SparseMLPMMD.rst", "generated/gemclus.sparse.SparseMLPModel.rst", "generated/gemclus.tree.Douglas.rst", "generated/gemclus.tree.Kauri.rst", "generated/gemclus.tree.print_kauri_tree.rst", "history.rst", "index.rst", "quick_start.rst", "sg_execution_times.rst", "user_guide.rst"], "titles": ["GemClus API", "Comparative clustering of circles dataset with kernel change", "Extending GemClus to build your own discriminative clustering model", "Graph node clustering with a nonparametric model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Kernel KMeans clustering with GEMINI", "Clustering circles with kernel RIM", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Computation times", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse Linear MI (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Grouped Feature selection with a linear model", "Computation times", "Example gallery", "Consensus clustering with linking constraints on sample pairs", "Computation times", "Scoring any model with GEMINI", "Computation times", "Computation times", "Building a differentiable unsupervised tree: DOUGLAS", "Building an unsupervised tree with kernel-kmeans objective: KAURI", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.DiscriminativeModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.add_mlcl_constraint", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.HellingerGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.KLGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.TVGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.KernelRIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Douglas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Kauri", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.print_kauri_tree", "RELEASES", "Welcome to GemClus documentation!", "Quick start on GemClus", "Computation times", "User guide : contents"], "terms": {"The": [0, 2, 5, 6, 9, 12, 13, 14, 15, 18, 20, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62], "packag": [0, 58, 60], "current": [0, 36, 38, 39, 40, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 56], "contain": [0, 26, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "simpl": [0, 1, 2, 3, 5, 7, 9, 11, 17, 18, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62], "mlp": [0, 1, 4, 8, 11, 16, 17, 26, 53, 54, 58, 60, 61, 62], "logist": [0, 2, 7, 11, 14, 15, 16, 17, 20, 26, 28, 39, 40, 41, 42, 43, 50, 51, 52, 53, 54, 58, 59, 61, 62], "regress": [0, 2, 7, 11, 14, 15, 16, 17, 20, 26, 28, 39, 40, 41, 42, 43, 50, 51, 52, 53, 54, 58, 59, 61, 62], "all": [0, 2, 3, 8, 12, 13, 14, 15, 17, 18, 20, 26, 27, 30, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62], "featur": [0, 4, 5, 10, 16, 23, 26, 28, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62], "well": [0, 1, 4, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 62], "sparsiti": [0, 53, 54, 60, 62], "constrain": [0, 15, 18, 58], "variant": 0, "follow": [0, 2, 3, 39, 43, 59], "class": [0, 2, 18, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62], "implement": [0, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 56, 59], "basic": 0, "evalu": [0, 12, 13, 20, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "ani": [0, 17, 21, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61], "condit": [0, 33, 34, 35, 36, 37, 38, 47, 48, 49, 52], "distribut": [0, 1, 2, 5, 6, 7, 11, 12, 13, 14, 15, 17, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 61], "These": [0, 59], "ar": [0, 2, 3, 4, 8, 9, 10, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 31, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "base": [0, 18, 26, 28, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "standard": 0, "like": [0, 4, 13, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "one": [0, 13, 15, 20, 33, 34, 36, 37, 38, 39, 40, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 56, 60], "hidden": [0, 44, 45, 46, 53, 54, 62], "layer": [0, 1, 5, 44, 45, 46, 52, 53, 54, 62], "neural": [0, 5, 26, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62], "network": [0, 5, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62], "have": [0, 1, 2, 6, 18, 20, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "paramet": [0, 1, 2, 3, 9, 15, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "assign": [0, 3, 6, 9, 15, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "data": [0, 1, 2, 3, 6, 9, 10, 12, 13, 15, 18, 20, 23, 24, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62], "sampl": [0, 4, 10, 12, 13, 14, 17, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61], "accord": [0, 3, 10, 56], "indic": [0, 3, 27, 50, 51, 52, 53, 54, 55], "consequ": [0, 4, 9, 47, 48, 49], "do": [0, 3, 8, 10, 18, 20, 47, 48, 49, 59], "depend": [0, 3, 9, 12, 14, 15, 26, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62], "locat": [0, 31], "overal": [0, 6, 59], "can": [0, 1, 2, 6, 7, 9, 13, 18, 20, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62], "us": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 20, 23, 33, 34, 36, 37, 60, 61, 62], "decis": [0, 9, 10, 11, 17, 24, 26, 31, 41, 42, 45, 46, 59, 60, 61, 62], "boundari": [0, 10, 11, 17, 26, 31, 41, 42, 45, 46, 61], "hyper": 0, "howev": [0, 6], "underli": [0, 56], "cannot": [0, 1, 9, 27, 58], "unseen": [0, 9], "predict": [0, 2, 4, 5, 8, 9, 10, 12, 13, 14, 18, 20, 26, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "train": [0, 2, 5, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "progress": [0, 12, 13, 14, 15, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "remov": 0, "thei": [0, 18, 20], "select": [0, 16, 26, 28, 29, 41, 45, 50, 51, 52, 53, 54, 56, 58, 61, 62], "subset": [0, 51, 52, 53, 54], "which": [0, 2, 3, 8, 10, 12, 14, 15, 24, 27, 28, 29, 30, 31, 36, 38, 50, 51, 52, 53, 54, 55, 56, 60], "mai": [0, 4, 18, 56, 59, 60], "enhanc": 0, "interpret": 0, "we": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 24, 59, 60, 62], "propos": [0, 1, 10, 13, 18, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62], "method": [0, 3, 6, 9, 12, 13, 14, 15, 18, 24, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62], "architectur": [0, 5, 53, 54, 62], "thu": [0, 6, 12, 13, 14, 15, 27, 60], "rule": [0, 55], "simultan": [0, 50, 51, 52, 53, 54], "construct": [0, 23, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "i": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62], "learnt": [0, 23], "function": [0, 2, 3, 8, 26, 27, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 62], "intend": 0, "help": [0, 4, 56, 59], "understand": 0, "structur": [0, 56, 57], "abov": 0, "print": [0, 3, 6, 7, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "inner": 0, "thi": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 26, 28, 29, 31, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "provid": [0, 17, 18, 59, 60, 62], "skeleton": 0, "creat": [0, 6, 7, 8, 9, 10, 12, 13, 14, 15, 26], "must": [0, 2, 27, 33, 34, 35, 36, 37, 38, 40, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 56, 58, 62], "aim": [0, 2], "decor": [0, 18, 27], "give": [0, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "further": [0, 60], "guidanc": [0, 18], "desir": [0, 8], "synthet": 0, "go": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 59], "end": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 58, 60], "download": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24, 59], "full": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 58], "exampl": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 58, 59, 61], "code": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24, 59], "show": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24], "here": [1, 2, 3, 4, 5, 7, 17, 18, 20, 24, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 62], "consist": [1, 7, 10, 12, 13, 14, 15, 18, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "two": [1, 2, 5, 6, 7, 11, 17, 24, 26, 33, 34, 36, 37, 38, 44, 45, 46, 52, 53, 56, 60, 61], "centr": [1, 7], "challeng": [1, 7, 18], "some": [1, 7, 15, 18, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 62], "algorithm": [1, 6, 7, 8, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "gemini": [1, 2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 21, 23, 24, 26, 27, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61], "unless": 1, "adequ": [1, 3], "import": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 60], "numpi": [1, 2, 3, 4, 6, 8, 9, 10, 12, 13, 14, 15, 18, 20, 59], "np": [1, 2, 3, 4, 6, 8, 9, 10, 12, 13, 14, 15, 18, 20], "from": [1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62], "matplotlib": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18], "pyplot": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18], "plt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18], "sklearn": [1, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 18, 20, 23, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 56, 60, 62], "metric": [1, 6, 7, 9, 12, 13, 18, 20, 23, 24, 26, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62], "spectralclust": 1, "mixtur": [1, 3, 5, 10, 11, 17, 26, 28, 29, 30, 31, 41, 42, 58, 61], "gaussianmixtur": 1, "gemclu": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 23, 24, 58, 61, 62], "start": [1, 2, 6, 7, 18, 20, 50, 51, 52, 53, 54, 59], "gener": [1, 2, 3, 6, 7, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "x": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "y": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "make_circl": [1, 6, 7], "n_sampl": [1, 2, 5, 6, 7, 8, 10, 14, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "200": [1, 4, 5, 6, 7, 8, 10, 14], "nois": [1, 6, 7, 8], "0": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 61], "05": [1, 6, 7, 8, 15, 16, 50, 51, 52, 53, 54, 61], "factor": [1, 6, 7, 27, 50, 51, 52, 53, 54, 56], "random_st": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "normalis": [1, 6], "mean": [1, 2, 3, 4, 6, 9, 18, 28, 30, 31, 36], "std": [1, 6], "ddof": [1, 6], "look": [1, 6, 10, 12, 14, 15, 60], "scatter": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15], "1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 23, 24, 27, 28, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 62], "c": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 28, 29, 31, 59, 60, 62], "axi": [1, 2, 6, 8, 12, 13, 14, 15], "off": [1, 6, 8, 13], "ylim": [1, 4, 6, 12, 14], "3": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 28, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60], "gaussian": [1, 2, 3, 5, 10, 11, 12, 13, 14, 17, 20, 26, 28, 29, 30, 31, 41, 42, 58, 61], "set": [1, 7, 26, 27, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62], "covari": [1, 3, 9, 30], "type": [1, 58, 60], "spheric": 1, "lighten": 1, "number": [1, 3, 9, 12, 13, 14, 18, 26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "correspond": [1, 36, 38, 39, 40, 42, 44, 46, 47, 49, 51, 53, 56], "symmetri": 1, "eas": 1, "job": 1, "initialis": [1, 2, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "close": [1, 12, 13, 14, 18, 28, 31], "actual": [1, 56], "gm": 1, "n_compon": [1, 13], "2": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 24, 25, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 60, 62], "covariance_typ": 1, "means_init": 1, "zero": [1, 18, 58], "max_it": [1, 2, 7, 14, 15, 23, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "1000": [1, 2, 7, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "fit": [1, 3, 6, 7, 8, 9, 10, 18, 20, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62], "spectral": [1, 8], "sc": 1, "n_cluster": [1, 2, 3, 4, 6, 7, 8, 9, 10, 18, 23, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "mmd": [1, 6, 11, 13, 16, 17, 24, 26, 28, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62], "linear": [1, 4, 7, 8, 10, 16, 17, 18, 20, 26, 28, 36, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62], "multi": [1, 62], "perceptron": [1, 62], "becaus": [1, 3, 8, 50, 51, 52, 53, 54], "incap": 1, "optim": [1, 8, 12, 13, 14, 15], "euclidean_gemini": 1, "mlpmmd": [1, 5, 45, 46], "Then": [1, 18], "take": [1, 4, 10, 12, 14, 15, 18, 60], "similar": [1, 13], "rbf": [1, 6, 18, 36, 39, 40, 44, 47, 51, 53, 56], "comput": [1, 2, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62], "rbf_gemini": 1, "grid": [1, 4], "valu": [1, 3, 12, 13, 14, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "x_val": [1, 4, 8, 10], "linspac": [1, 4, 8, 10], "min": [1, 8, 10], "5": [1, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 18, 24, 28, 50, 51, 52, 53, 54], "max": [1, 8, 10, 12, 14, 15, 18], "num": [1, 4, 8, 10], "50": [1, 3, 4, 5, 8, 10, 13, 14, 15], "y_val": [1, 4, 8, 10], "xx": [1, 4, 8, 10], "yy": [1, 4, 8, 10], "meshgrid": [1, 4, 8, 10], "grid_input": [1, 4, 8, 10], "c_": [1, 4, 8, 10], "ravel": [1, 4, 8, 10], "plot": [1, 3, 4, 12, 14], "subplot": [1, 14], "contourf": [1, 4, 8, 10], "reshap": [1, 2, 4, 8, 10], "alpha": [1, 3, 4, 8, 10, 12, 13, 14, 15, 31, 50, 51, 52, 53, 54], "cmap": [1, 4, 8, 18], "cm": [1, 8, 24], "titl": [1, 2, 12, 13, 14, 59], "labels_": [1, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "4": [1, 3, 4, 7, 9, 12, 13, 14, 15, 16, 24, 29, 60], "tight_layout": [1, 14], "total": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 37, 61, 62], "run": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "time": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 60], "script": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24], "minut": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24], "19": [1, 11, 59, 61], "970": [1, 11, 61], "second": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23], "jupyt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24], "notebook": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24], "plot_circl": [1, 11, 61], "ipynb": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24], "python": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24, 58], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59], "py": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 61], "galleri": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 61, 62], "sphinx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24], "It": [2, 26, 27, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 60], "possibl": [2, 26, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62], "wish": 2, "avail": [2, 26, 41, 45, 48, 52, 55, 60], "among": [2, 55], "choic": [2, 56], "To": [2, 3, 8, 26, 41, 45, 48, 52, 55], "framework": [2, 39, 43], "defin": [2, 8, 36, 38], "still": 2, "In": [2, 3, 5, 10, 12, 13, 14, 15, 31, 59, 60, 62], "bia": [2, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "less": [2, 8], "sigmoid": [2, 18, 36, 39, 40, 44, 47, 51, 53, 56], "activ": [2, 55, 58, 62], "tell": 2, "apart": [2, 4, 18], "isotrop": [2, 12, 13, 14, 28], "written": [2, 59], "p_": [2, 49, 60], "theta": [2, 60], "text": [2, 33, 34, 35, 36, 37], "top": [2, 4, 12, 14, 15, 50, 52, 53, 54], "discriminativemodel": [2, 62], "draw_gmm": [2, 3, 9, 58], "binaryregress": 2, "same": [2, 9, 18, 20, 27, 62], "expect": [2, 4, 12, 13, 60], "parent": 2, "def": [2, 15], "__init__": [2, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "self": [2, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "mi": [2, 16, 17, 26, 28, 41, 45, 48, 50, 52, 55, 58, 61], "learning_r": [2, 3, 8, 9, 14, 15, 18, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "1e": [2, 3, 8, 9, 10, 15, 18, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "solver": [2, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "adam": [2, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "batch_siz": [2, 4, 14, 15, 26, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55], "none": [2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "verbos": [2, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "fals": [2, 3, 8, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "super": 2, "_init_param": [2, 62], "our": [2, 3, 8, 14, 15, 18, 59, 60], "random": [2, 3, 14, 15, 18, 26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "state": 2, "in_threshold": 2, "sqrt": 2, "shape": [2, 3, 8, 15, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "theta_": [2, 47, 48, 49], "uniform": 2, "size": [2, 3, 8, 14, 15, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58], "_get_weight": [2, 62], "For": [2, 50, 51, 52, 53, 54, 60, 62], "optimis": [2, 3, 6, 9, 24, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "need": [2, 20, 36, 38, 58], "return": [2, 9, 15, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "insid": 2, "list": [2, 27, 30, 50, 51, 52, 53, 54, 55], "_infer": [2, 62], "retain": 2, "true": [2, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 18, 20, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62], "output": [2, 26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62], "you": [2, 59, 60, 62], "ensur": [2, 18, 27, 50, 51, 52, 53, 54], "probabl": [2, 3, 10, 26, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "vector": [2, 26, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "y_pred_logit": 2, "matmul": [2, 20], "y_pred": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 18, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "exp": [2, 3], "flag": 2, "allow": [2, 59], "store": 2, "intermedi": 2, "inform": [2, 10, 15, 20, 26, 29, 31, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62], "backpropag": 2, "_y_sigmoid": 2, "As": 2, "object": [2, 5, 6, 17, 25, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61], "arrai": [2, 3, 9, 12, 13, 14, 15, 26, 28, 29, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "duplic": 2, "opposit": 2, "column": 2, "concaten": [2, 14, 15, 28], "add": [2, 14, 27, 62], "up": [2, 56], "each": [2, 3, 6, 26, 28, 29, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "row": 2, "otherwis": [2, 20, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "work": [2, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 62], "_compute_grad": [2, 62], "gradient": [2, 6, 12, 13, 14, 15, 26, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "ha": [2, 55, 59, 60], "first": [2, 12, 13, 20, 44, 45, 46, 53, 54, 60], "correct": [2, 12, 13, 14, 15], "extens": [2, 59, 62], "appli": [2, 27], "And": 2, "finish": 2, "theta_grad": 2, "t": [2, 3, 4, 20, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "order": [2, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "match": [2, 3, 20, 55], "goal": 2, "maximis": [2, 10, 23, 27, 39, 40, 42, 43, 44, 46, 47, 48, 49, 55, 60], "contrari": [2, 13], "common": 2, "minimis": [2, 27], "neg": 2, "n": [2, 3, 4, 9, 12, 13, 15, 18, 22, 28, 29, 30, 31, 32], "100": [2, 3, 9, 15, 18, 23, 55], "loc": [2, 5, 10, 14, 30, 32], "ey": [2, 3, 9, 20], "scale": [2, 14, 28, 30, 32, 59], "pval": [2, 15, 30], "ones": [2, 3, 9, 36, 38, 39, 40, 42, 44, 46, 47, 49, 51, 53, 56], "custom_model": 2, "wasserstein_ovo": [2, 26, 41, 45, 48, 52, 55], "fit_predict": [2, 3, 4, 6, 7, 8, 9, 23, 24, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "unsupervis": [2, 17, 18, 25, 26, 55, 56, 57, 58, 60, 61], "binari": [2, 57], "614": [2, 5, 11, 61], "plot_custom_model": [2, 11, 61], "simplifi": [3, 35], "version": [3, 33, 34, 36, 37, 38, 39, 50, 53, 58, 60, 62], "latent": 3, "posit": [3, 9, 32], "procedur": 3, "mani": [3, 59], "determin": [3, 26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "onli": [3, 4, 9, 12, 13, 14, 15, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 62], "distanc": [3, 8, 20, 33, 34, 35, 36, 37, 38, 42, 46, 49, 58, 60, 62], "perform": [3, 12, 13, 14, 15, 18, 20, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 62], "associ": [3, 6, 9, 23], "note": [3, 8, 56], "given": [3, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62], "instead": [3, 4, 13, 20, 51, 52, 53, 54, 58], "ident": 3, "matrix": [3, 7, 8, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "itertool": [3, 18], "scipi": [3, 8, 59], "spars": [3, 8, 15, 16, 17, 26, 28, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 58, 60, 61, 62], "csgraph": [3, 8], "categoricalwasserstein": [3, 18, 47, 48], "separ": [3, 9, 10, 12, 13, 14, 58], "pairwise_dist": [3, 8, 62], "euclidean": [3, 8, 20, 26, 38, 41, 42, 45, 46, 48, 49, 52, 55, 62], "edge_prob": 3, "seed": [3, 14, 15, 18], "adjacency_matrix": 3, "binomi": [3, 15], "p": [3, 12, 13, 18, 26, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62], "an": [3, 4, 8, 11, 12, 14, 15, 17, 18, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62], "j": [3, 18, 62], "make": [3, 13], "adjac": [3, 8], "symmetr": [3, 33, 34, 35, 36, 37, 38], "maximum": [3, 12, 13, 14, 26, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56], "pair": [3, 8, 17, 19, 26, 27, 28, 40, 41, 48, 49, 61], "shortest": [3, 8], "path": [3, 8, 13, 50, 51, 52, 53, 54, 58], "floyd_warshal": [3, 8], "direct": [3, 8], "unweight": [3, 8], "replac": [3, 8, 20], "inf": [3, 8], "isinf": [3, 8], "non": [3, 6, 11, 17, 26, 29, 30, 47, 48, 61], "parametr": [3, 6, 11, 17, 26, 30, 47, 48, 60, 61], "call": [3, 6, 9, 12, 13, 14, 15, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "specifi": [3, 20, 50, 51, 52, 53, 54, 58], "custom": [3, 26, 36, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 62], "pass": [3, 8, 26, 28, 29, 30, 31, 32, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62], "argument": [3, 36, 38, 39, 40, 42, 44, 46, 47, 49, 51, 53, 56, 58], "precomput": [3, 8, 18, 20, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62], "ovo": [3, 5, 6, 9, 16, 17, 18, 26, 28, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 46, 47, 49, 51, 52, 53, 60, 61, 62], "1789": [3, 9], "dummi": 3, "unnecessari": 3, "variabl": [3, 12, 13, 14, 15, 17, 28, 29, 50, 51, 52, 53, 54, 58], "There": 3, "index": 3, "node_i": 3, "node_j": 3, "combin": [3, 18, 36, 38, 39, 40, 42, 44, 46, 47, 49, 51, 53, 56, 58], "rang": [3, 13, 15, 18], "grai": 3, "linewidth": 3, "": [3, 5, 10, 13, 14, 20, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "ari_scor": [3, 6, 9], "adjusted_rand_scor": [3, 6, 7, 9, 12, 13, 18, 23, 24], "gemini_scor": [3, 6, 9], "score": [3, 6, 9, 10, 12, 13, 14, 15, 21, 23, 24, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61], "f": [3, 6, 7, 9, 12, 13, 14, 15, 20, 31, 33, 34, 35, 37, 53, 54, 59, 60, 62], "ari": [3, 6, 7, 9, 12, 13, 18, 23, 24], "3f": [3, 6, 9, 20], "977": 3, "141": 3, "7": [3, 8, 12, 13, 15, 18, 24, 28], "195": [3, 11, 61], "plot_graph_node_clust": [3, 11, 61], "retak": [4, 8], "experi": [4, 8], "origin": [4, 8, 30, 59, 60], "paper": [4, 8, 39, 43, 59], "where": [4, 8, 12, 13, 14, 15, 18, 20, 26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "want": [4, 8, 62], "find": [4, 8, 12, 13, 14, 15, 18, 55, 59], "incorpor": [4, 26, 41, 45, 48, 52, 55], "freedom": [4, 31, 32], "seem": 4, "outlier": 4, "unlik": 4, "done": [4, 6, 58], "linearwasserstein": [4, 39, 40, 41, 43], "gstm": [4, 58], "so": [4, 8, 12, 13, 14, 20, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "far": 4, "df": [4, 31, 32], "clf": [4, 5, 10, 12, 13, 14, 15, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53], "now": [4, 10, 12, 13, 14, 20, 58], "input": [4, 9, 10, 18, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62], "draw": [4, 11, 17, 26, 28, 29, 30, 31, 32, 45, 46, 61], "10": [4, 10, 11, 14, 18, 32, 50, 51, 52, 53, 54], "zz": [4, 8, 10], "blue": [4, 15], "reds_r": 4, "xlim": 4, "xlabel": [4, 5, 10, 12, 14], "ylabel": [4, 5, 10, 12, 14], "8": [4, 15, 58], "286": [4, 11, 61], "plot_gstm": [4, 11, 61], "how": [5, 9, 10, 12, 14, 15, 17, 18, 20, 23, 24, 26, 28, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 62], "equival": [5, 6, 18, 24, 36], "kernel": [5, 11, 13, 17, 18, 25, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 47, 48, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62], "kmean": [5, 11, 17, 25, 26, 36, 47, 48, 56, 57, 60, 61], "dataset": [5, 8, 11, 17, 26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 58, 60, 61], "make_blob": [5, 10, 14], "center": [5, 10, 14], "cluster_std": [5, 10, 14], "environ": [5, 10], "pleas": [5, 10, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60], "rerun": [5, 10], "cell": [5, 10], "html": [5, 10], "represent": [5, 10, 44, 45, 46, 53, 54], "trust": [5, 10], "On": [5, 10, 50, 52, 53, 54], "github": [5, 10, 59], "unabl": [5, 10], "render": [5, 10], "try": [5, 10, 18, 59], "load": 5, "page": [5, 10], "nbviewer": [5, 10], "org": [5, 10], "nbsp": [5, 10], "mlpmmdifittedmlpmmd": 5, "x_0": [5, 10, 14], "x_1": [5, 10, 14], "x_2": [5, 10, 14], "ax0": [5, 10, 14], "crimson": [5, 10, 14], "ax1": [5, 10, 14], "deepskyblu": [5, 10, 14], "ax2": [5, 10, 14], "darkgreen": [5, 10, 14], "leg": [5, 10, 14], "legend": [5, 7, 10, 14], "upper": [5, 10, 14], "left": [5, 10, 14, 60], "fancybox": [5, 10, 14], "scatterpoint": [5, 10, 14], "get_fram": [5, 10, 14], "set_alpha": [5, 10, 14], "plot_intro_mlp_mmd": [5, 11, 61], "sinc": 6, "mode": [6, 50, 51, 52, 53, 54, 58, 62], "nonparametr": [6, 9, 11, 17, 18, 26, 30, 58, 61], "directli": [6, 47, 48, 49, 62], "would": [6, 8, 18, 59], "behav": 6, "its": [6, 18, 55, 58, 60, 62], "descent": [6, 12, 13, 14, 15, 26, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "categoricalmmd": [6, 9, 48, 49], "circl": [6, 11, 17, 26, 39, 44, 45, 61], "node": [6, 9, 11, 17, 24, 26, 30, 48, 49, 56, 58, 61], "000": [6, 22], "330": 6, "6": [6, 13, 15, 18, 24], "606": [6, 11, 61], "plot_kernel_kmean": [6, 11, 61], "solv": 7, "case": [7, 36, 38], "deriv": [7, 24, 26, 33, 34, 35, 36, 37, 38, 52, 59, 60, 62], "kernelrim": [7, 58], "model_kernel": 7, "base_kernel": [7, 39], "laplacian": [7, 36, 39, 40, 44, 47, 51, 53, 56], "reg": [7, 10, 39, 43], "len": [7, 15, 18], "novel": [7, 60], "them": [7, 56], "new_x": 7, "new_i": 7, "new_pr": 7, "marker": [7, 13], "label": [7, 13, 20, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "o": [7, 13], "test": [7, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "878": [7, 11, 20, 61], "plot_kernel_rim": [7, 11, 61], "face": 8, "trick": 8, "option": [8, 15, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "guid": [8, 13, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60], "solut": [8, 12, 13, 14, 15, 18, 50, 51, 52, 53, 54], "mlpwasserstein": [8, 44, 45], "abl": [8, 52], "make_moon": 8, "2023": [8, 60], "graph": [8, 9, 11, 17, 26, 30, 48, 49, 58, 61], "edg": 8, "than": [8, 50, 51, 52, 53, 54, 60], "quantil": 8, "threshold": [8, 13, 15, 23], "along": [8, 12, 14, 62], "189": [8, 11, 61], "plot_moon_clust": [8, 11, 61], "illustr": 9, "specif": [9, 13, 26, 60], "alwai": 9, "975": 9, "328": 9, "273": [9, 11, 61], "plot_nonparametric_clust": [9, 11, 61], "regularis": [10, 12, 13, 14, 15, 39, 40, 41, 42, 43], "mutual": [10, 31, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62], "kraus": [10, 39, 43, 62], "et": [10, 13, 28, 29, 39, 43, 53, 54, 60], "al": [10, 13, 28, 29, 39, 43, 53, 54, 60], "2010": [10, 39, 43, 62], "under": [10, 50, 51, 52, 53, 54, 59], "ell_2": [10, 27, 39, 43], "penalti": [10, 12, 13, 14, 15, 20, 39, 43, 50, 51, 52, 53, 54], "just": [10, 12, 13, 14, 15], "rimifittedrim": 10, "let": [10, 13, 20], "u": [10, 59], "grad": 10, "grid_pr": 10, "predict_proba": [10, 18, 20, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "isol": [10, 58], "argmax": [10, 15, 18], "level": [10, 18], "4486538478231719": 10, "294": [10, 11, 61], "plot_rim": [10, 11, 61], "00": [11, 16, 19, 21, 22, 25, 61], "53": 11, "917": 11, "execut": [11, 16, 19, 21, 22, 25, 61], "file": [11, 16, 19, 21, 22, 25, 61], "auto_exampl": [11, 16, 19, 21, 22, 25], "_gener": [11, 61], "mem": [11, 16, 19, 21, 22, 25, 61], "mb": [11, 16, 19, 21, 22, 25, 61], "compar": [11, 17, 26, 28, 29, 33, 34, 36, 37, 38, 44, 45, 60, 61], "cluster": [11, 15, 19, 20, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62], "chang": [11, 17, 26, 44, 45, 50, 51, 52, 53, 54, 61], "map": [11, 17, 26, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "low": [11, 17, 18, 26, 31, 41, 42, 55, 61], "degre": [11, 17, 26, 31, 32, 41, 42, 61], "student": [11, 17, 26, 31, 32, 41, 42, 58, 61], "08": [11, 61], "model": [11, 16, 17, 21, 23, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62], "07": [11, 19, 61], "between": [11, 17, 26, 27, 33, 34, 35, 36, 37, 38, 45, 46, 53, 54, 60, 61, 62], "interlac": [11, 17, 26, 45, 46, 61], "moon": [11, 17, 26, 45, 46, 61], "06": [11, 61], "rim": [11, 17, 26, 39, 40, 41, 42, 58, 61, 62], "01": [11, 15, 16, 25, 50, 51, 52, 53, 54, 55, 61], "extend": [11, 17, 26, 30, 61], "build": [11, 17, 25, 26, 30, 55, 56, 57, 61], "your": [11, 17, 26, 30, 60, 61, 62], "own": [11, 17, 26, 30, 60, 61, 62], "discrimin": [11, 13, 17, 26, 27, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 61], "introduc": [11, 17, 26, 44, 45, 58, 61], "ask": [12, 13, 14, 15, 60], "sparselinearmmd": [12, 15, 50, 53], "increas": [12, 13, 14, 15, 50, 51, 52, 53, 54, 56], "until": [12, 13, 14, 15, 50, 51, 52, 53, 54, 56], "discard": [12, 13, 14, 15], "keep": [12, 13, 14], "best": [12, 13, 14, 18, 50, 51, 52, 53, 54, 56], "weight": [12, 13, 14, 26, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "minimum": [12, 13, 14, 50, 51, 52, 53, 54, 56], "maintain": [12, 13, 14], "90": [12, 13, 14], "encount": [12, 13, 14], "dure": [12, 13, 14, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "5d": [12, 13], "20": [12, 13, 28, 44, 45, 46, 53, 54], "noisi": [12, 13, 14, 15, 28, 29], "should": [12, 13, 14, 15, 18, 33, 34, 35, 36, 37, 38, 52, 55], "relev": [12, 13, 14, 15, 59], "suffici": [12, 13, 14, 15], "get": [12, 13, 14, 15, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60], "celeux_on": [12, 13, 18], "addit": [12, 13, 28, 29, 36, 38, 58, 60], "independ": [12, 13, 28, 60], "300": [12, 13, 28], "mu": [12, 13, 18, 28], "iter": [12, 13, 14, 15, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "through": [12, 13, 14, 15, 53, 54, 56, 58, 59], "search": [12, 13, 14, 15], "elimin": [12, 13, 14, 15, 53, 54], "best_weight": [12, 13, 14, 15, 50, 51, 52, 53, 54], "n_featur": [12, 13, 14, 15, 26, 28, 29, 31, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "decreas": [12, 14], "wa": [12, 14, 15, 26, 28, 29, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "settl": [12, 14, 15], "optimum": [12, 14, 15], "9": [12, 14, 24, 50, 51, 52, 53, 54], "highlight": [12, 14], "linalg": [12, 13], "norm": [12, 13, 27], "ord": [12, 13], "8259728240495163": 12, "0249912491496707": 12, "7224921242347038": 12, "83290627605772": 12, "568": [12, 16, 20, 21, 61], "plot_feature_selection_linear": [12, 16, 61], "sparselinearmi": [13, 51, 58], "space": [13, 36, 38, 62], "That": 13, "why": 13, "accept": [13, 50, 51, 52, 53, 54], "lower": [13, 15], "other": [13, 26, 28, 41, 45, 47, 48, 49, 52, 55, 59, 62], "A": [13, 18, 22, 26, 27, 28, 29, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62], "veri": 13, "found": [13, 56, 59], "brain": [13, 50], "mri": [13, 50], "segment": [13, 50], "kong": [13, 50], "2014": [13, 28, 29], "decomposit": 13, "keep_threshold": [13, 15, 50, 51, 52, 53, 54], "11": 13, "small": [13, 18, 50, 51, 52, 53, 54, 59], "pca": 13, "visualis": [13, 15], "purpos": [13, 62], "distinguish": 13, "x_pca": 13, "fit_transform": [13, 20], "k": [13, 30, 47, 48, 49, 60], "class_indic": 13, "celeux": [13, 28, 29], "lasso": [13, 14, 50, 51, 52, 53, 54], "458336976163333": 13, "995": [13, 16, 61], "plot_feature_selection_logreg_mi": [13, 16, 61], "sparsemlpmmd": [14, 52, 54], "2d": [14, 29], "48": 14, "extra": 14, "normal": [14, 15], "18": [14, 61], "25": 14, "001": [14, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "figur": 14, "figsiz": 14, "group": [14, 16, 17, 26, 41, 50, 51, 52, 53, 54, 58, 61], "get_select": [14, 15, 50, 51, 52, 53, 54, 58], "4596486286280377": 14, "5824499242836227": 14, "4242049318552605": 14, "613": [14, 16, 61], "plot_feature_selection_mlp": [14, 16, 61], "moreov": [15, 60], "produc": [15, 55], "categor": [15, 47, 48, 49], "hot": [15, 50, 51, 52, 53, 54], "encod": [15, 50, 51, 52, 53, 54], "consid": [15, 26, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56], "altogeth": 15, "outcom": 15, "multinomi": 15, "x1_class_1": 15, "45": 15, "x2_class_1": 15, "x_class_1": 15, "x1_class_2": 15, "x2_class_2": 15, "x_class_2": 15, "x_inform": 15, "x_nois": 15, "repeat": 15, "arang": 15, "final": [15, 18], "write": 15, "out": [15, 59], "partit": [15, 50, 51, 52, 53, 54, 58], "rand_jitt": 15, "randn": 15, "red": 15, "15": [15, 16], "80": 15, "4935152433868388": 15, "8084378363828292": 15, "6467502691062634": 15, "076": [15, 16, 61], "plot_grouped_select": [15, 16, 61], "252": 16, "feature_select": [16, 61], "ova": [16, 17, 20, 26, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 60, 61, 62], "04": [16, 61], "03": [16, 61], "differ": [17, 20, 23, 24, 50, 51, 52, 53, 54, 55, 56], "librari": [17, 59], "link": [17, 19, 26, 27, 28, 40, 41, 48, 49, 58, 61], "constraint": [17, 19, 26, 27, 28, 40, 41, 48, 49, 50, 52, 53, 54, 56, 58, 61], "differenti": [17, 25, 26, 55, 58, 61, 62], "dougla": [17, 25, 26, 58, 61], "kauri": [17, 25, 57, 58, 61], "auto_examples_python": 17, "zip": 17, "auto_examples_jupyt": 17, "improv": [18, 50, 51, 52, 53, 54, 60], "enforc": 18, "loos": 18, "ensembl": 18, "learn": [18, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62], "seek": [18, 20], "agreeanc": 18, "describ": [18, 27, 39, 43, 50, 51, 52, 53, 54, 57], "ratio": 18, "were": [18, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "togeth": [18, 27], "remain": [18, 50, 51, 52, 53, 54, 58], "while": 18, "satisfi": [18, 27, 56], "supervis": 18, "advantag": 18, "requir": [18, 58, 59, 62], "knowledg": 18, "rather": [18, 20], "idea": 18, "whether": [18, 26, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "linearmmd": [18, 39, 41, 42, 43], "add_mlcl_constraint": [18, 58], "sever": [18, 60, 62], "variou": [18, 50, 51, 52, 53, 54], "all_model": 18, "cosin": [18, 36, 38, 39, 40, 42, 44, 46, 47, 49, 51, 53, 56], "sub": 18, "11914066061963555": 18, "11176053892324672": 18, "11421905413971052": 18, "22472124150185058": 18, "e": [18, 28, 29, 33, 34, 35, 36, 37, 38, 59, 60, 62], "consensus_matrix": 18, "combinations_with_replac": 18, "r": [18, 33, 34, 35, 36, 37, 38, 53, 54, 60, 62], "int": [18, 26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "notic": [18, 24], "api": [18, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60], "although": 18, "superflu": 18, "consensus_model": 18, "y_pred_consensu": 18, "what": 18, "10728640074310927": 18, "simul": 18, "extrapol": 18, "real": 18, "life": 18, "situat": 18, "emphas": 18, "more": [18, 60], "field": [18, 59], "expert": 18, "most": [18, 62], "confid": 18, "sorted_confidence_sampl": 18, "sort": 18, "kei": 18, "lambda": 18, "revers": 18, "must_link": [18, 27], "unsure_sample_pair": 18, "next": 18, "cannot_link": [18, 27], "over": [18, 28], "base_model": 18, "line": 18, "mlcl_consensus_model": 18, "y_pred_mlcl_consensu": 18, "16976700304809886": 18, "consensus_ord": 18, "argsort": 18, "imshow": 18, "seismic": 18, "966": [18, 19, 61], "plot_semi_supervised_consensu": [18, 19, 61], "mlcl": [19, 61], "consensu": [19, 26, 27, 28, 40, 41, 48, 49, 61], "anoth": [20, 62], "preprocess": 20, "linear_model": [20, 24], "naive_bay": 20, "load_breast_canc": 20, "return_x_i": [20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 60], "robustscal": 20, "breast": 20, "cancer": 20, "l2": [20, 38, 42, 46, 49], "clf1": 20, "logisticregress": 20, "p_y_given_x_1": 20, "naiv": 20, "bay": [20, 60], "hypothes": [20, 59], "clf2": 20, "gaussiannb": 20, "p_y_given_x_2": 20, "both": [20, 58, 62], "wassersteingemini": [20, 58], "v": [20, 33, 34, 36, 37, 38, 60], "wasserstein_scor": 20, "affin": [20, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "wasserstein": [20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 62], "compute_affin": [20, 33, 34, 35, 36, 37, 38], "clf1_score": 20, "clf2_score": 20, "005": 20, "By": 20, "obtain": [20, 24], "share": 20, "y_one_hot": 20, "precomputed_dist": 20, "431": 20, "403": 20, "plot_gemini_scor": [20, 21, 61], "few": [23, 50, 51, 52, 53, 54], "bin": [23, 55], "per": [23, 33, 34, 35, 36, 37, 38, 55, 58], "iri": [23, 24], "load_iri": [23, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 60], "target": [23, 24], "mmd_ova": [23, 26, 41, 45, 48, 52, 54, 55, 60], "n_cut": [23, 55], "y_pred_linear": [23, 24], "4741506860502533": 23, "5681159420289855": 23, "288": [23, 25, 61], "plot_douglas_exampl": [23, 25, 61], "accompanni": 24, "gain": [24, 56], "squar": [24, 33, 62], "print_kauri_tre": 24, "limit": [24, 56], "depth": [24, 56], "simplic": 24, "max_clust": [24, 56], "max_depth": [24, 56], "9459": 24, "167022308022": 24, "additive_chi2_model": 24, "additive_chi2": [24, 36, 39, 40, 44, 47, 51, 53, 56], "y_pred_additive_chi2": 24, "22": [24, 60, 62], "43532371061057": 24, "7172759168337549": 24, "8680377279943841": 24, "feature_nam": [24, 57], "petal": 24, "length": [24, 50, 51, 52, 53, 54], "width": 24, "232": [24, 25, 61], "plot_kauri_exampl": [24, 25, 61], "520": 25, "tree": [25, 26, 58, 59, 60, 61, 62], "basegemini": 26, "when": [26, 50, 51, 52, 53, 54], "coupl": [26, 59], "overrid": 26, "design": 26, "default": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62], "form": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "neuron": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "str": [26, 41, 45, 48, 52, 55], "instanc": [26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "mmd_ovo": [26, 41, 45, 48, 52, 55], "wasserstein_ova": [26, 41, 45, 48, 52, 55], "available_gemini": [26, 41, 45, 48, 52, 55], "involv": [26, 27, 41, 45, 48, 52, 55, 60, 62], "also": [26, 41, 45, 48, 52, 55, 59, 62], "If": [26, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62], "epoch": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "singl": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "float": [26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "initi": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62], "rate": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "control": [26, 28, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "step": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "updat": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "sgd": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "refer": [26, 28, 29, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "stochast": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "kingma": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "diederik": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "jimmi": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "ba": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "batch": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "whole": [26, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54], "bool": [26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "messag": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "stdout": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "randomst": [26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "reproduc": [26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "result": [26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "across": [26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "multipl": [26, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "attribut": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "optimiser_": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "adamoptim": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "sgdoptim": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "chosen": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "ndarrai": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "n_iter_": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "took": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "converg": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "present": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62], "convent": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "estim": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "get_gemini": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "get_metadata_rout": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "metadata": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "rout": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "check": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "user": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60], "mechan": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "metadatarequest": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "encapsul": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "get_param": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "deep": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "subobject": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "param": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "dict": [26, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "name": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "membership": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "after": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "closest": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "seen": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "set_param": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "nest": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "pipelin": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "latter": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "compon": [26, 28, 29, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "__": [26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "gemini_model": 27, "contraint": 27, "respect": [27, 28, 52, 58, 60], "fulli": 27, "mlp___": 27, "linear___": 27, "categorical___": 27, "n_constraint": 27, "being": 27, "i1": 27, "j1": 27, "iN": 27, "jn": 27, "hyperparamet": [27, 39, 43, 55], "tupl": [28, 29, 30], "dimens": 28, "excess": 28, "taken": [28, 29, 62], "section": [28, 29], "creation": [28, 29, 30, 31, 32], "gmm": [28, 29, 30, 31], "drawn": [28, 29, 30, 31, 32, 60], "g": [28, 29, 62], "martin": [28, 29], "magniett": [28, 29], "m": [28, 29, 31, 53, 54, 59, 60], "l": [28, 29, 31, 53, 54, 59, 60, 62], "maugi": [28, 29], "rabusseau": [28, 29], "rafteri": [28, 29], "regular": [28, 29, 39, 43, 62], "approach": [28, 29], "journal": [28, 29, 60, 62], "de": [28, 29], "la": [28, 29], "societ": [28, 29], "francais": [28, 29], "statistiqu": [28, 29], "155": [28, 29], "57": [28, 29], "71": [28, 29], "2000": 29, "linearli": 29, "14": 29, "element": 30, "d": [30, 32, 55, 59, 60], "proport": 30, "500": 31, "articl": 31, "ohl": [31, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "mattei": [31, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "bouveyron": [31, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "harchaoui": [31, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "w": [31, 33, 34, 35, 36, 37, 38, 59, 60], "leclercq": [31, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "droit": [31, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "precioso": [31, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "2022": [31, 59, 60], "octob": [31, 59], "generalis": [31, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60], "advanc": [31, 59, 60, 62], "process": [31, 59, 60, 62], "system": [31, 59, 60, 62], "multivari": [32, 58], "semi": 32, "definit": [32, 58, 60], "spread": 32, "epsilon": [33, 34, 35, 36, 37, 38], "12": [33, 34, 35, 36, 37, 38], "helling": [33, 62], "mathcal": [33, 34, 35, 36, 37, 38], "mathbb": [33, 34, 35, 36, 37, 38, 60], "_": [33, 34, 35, 36, 37, 38, 60], "sim": [33, 34, 35, 36, 37, 38, 60], "h": [33, 59, 60], "y_a": [33, 34, 36, 37, 38], "y_b": [33, 34, 36, 37, 38], "precis": [33, 34, 35, 36, 37, 38], "clip": [33, 34, 35, 36, 37, 38], "avoid": [33, 34, 35, 36, 37, 38], "numer": [33, 34, 35, 36, 37, 38], "instabl": [33, 34, 35, 36, 37, 38], "unus": [33, 34, 35, 37], "diverg": [33, 34, 35, 37, 62], "return_grad": [33, 34, 35, 36, 37, 38], "context": [33, 34, 35, 36, 37, 38], "either": [33, 34, 35, 36, 37, 38, 50, 51, 52, 53, 54, 56], "nabla_": [33, 34, 35, 36, 37, 38], "kl": [34, 35], "classic": [34, 35, 39, 43], "complet": [35, 59], "shortcut": 35, "klgemini": [35, 58], "kernel_param": [36, 39, 40, 44, 47, 51, 53, 56], "discrep": 36, "kappa": 36, "chi2": [36, 39, 40, 44, 47, 51, 53, 56], "poli": [36, 39, 40, 44, 47, 51, 53, 56], "polynomi": [36, 39, 40, 44, 47, 51, 53, 56], "keyword": [36, 38, 39, 40, 42, 44, 46, 47, 49, 51], "ignor": [36, 38, 50, 51, 52, 53, 54], "callabl": [36, 38, 39], "variat": [37, 50, 52, 53, 54, 56, 62], "tv": 37, "metric_param": [38, 42, 46, 49], "delta": [38, 55], "l1": [38, 42, 46, 49], "manhattan": [38, 42, 46, 49], "cityblock": [38, 42, 46, 49], "paired_dist": [38, 42, 46, 49], "base_kernel_param": 39, "kernelis": [39, 58], "dictionari": [39, 40, 42, 44, 46, 47, 49, 51], "linearmodel": [39, 40, 42, 43, 58], "maxim": [39, 43, 50, 51, 52, 53, 54, 56, 62], "ryan": [39, 43], "gome": [39, 43, 62], "andrea": [39, 43], "pietro": [39, 43], "perona": [39, 43, 62], "4390485754": [39, 43], "w_": [39, 40, 41, 42, 43, 50, 51, 52], "b_": [39, 40, 41, 42, 43, 50, 51, 52], "bias": [39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54], "loui": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "pierr": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "alexandr": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "charl": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "warith": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "micka\u00ebl": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "arnaud": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "freder": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "7048160115": 40, "7550724287": 41, "7103992986": 42, "n_features_in": [42, 43], "n_hidden_dim": [44, 45, 46, 53, 54], "mlpmodel": [44, 46, 58, 60], "7592155845": 44, "w1_": [44, 45, 46, 53, 54], "b1_": [44, 45, 46, 53, 54], "w2_": [44, 45, 46, 53, 54], "b2_": [44, 45, 46, 53, 54], "h_": [44, 45, 46, 53, 54], "6325592616": 45, "7636482655": 46, "x_i": [47, 48, 49], "ki": [47, 48, 49], "contrarili": [47, 48, 49], "part": [47, 48, 49], "doe": [47, 48, 49], "support": [47, 48, 49, 58, 59], "categoricalmodel": [47, 49, 58], "tailor": [47, 48, 49], "2117267518": 47, "logits_": [47, 48, 49], "logit": [47, 48, 49, 55], "6577369504": 48, "3555482569": 49, "vanilla": [50, 52, 53, 54], "bring": [50, 52, 53, 54, 60], "via": [50, 52], "proxim": [50, 52, 53, 54, 58], "repres": [50, 51, 52, 53, 54], "typic": [50, 51, 52, 53, 54], "enter": [50, 51, 52, 53, 54], "alon": [50, 51, 52, 53, 54], "scheme": [50, 51, 52, 53, 54], "sparselinearmodel": [50, 51, 58], "joint": [50, 51, 52, 53, 54, 60], "youyong": 50, "yue": 50, "deng": 50, "qionghai": 50, "dai": 50, "5812412917": 50, "groups_": [50, 51, 52, 53, 54], "explicit": [50, 51, 52, 53, 54], "retriev": [50, 51, 52, 53, 54], "ind": [50, 51, 52, 53, 54], "alpha_multipli": [50, 51, 52, 53, 54], "min_featur": [50, 51, 52, 53, 54], "restore_best_weight": [50, 51, 52, 53, 54], "early_stopping_factor": [50, 51, 52, 53, 54], "99": [50, 51, 52, 53, 54], "max_pati": [50, 51, 52, 53, 54], "unfold": [50, 51, 52, 53, 54], "geometr": [50, 51, 52, 53, 54, 62], "amount": [50, 51, 52, 53, 54], "histori": [50, 51, 52, 53, 54], "kept": [50, 51, 52, 53, 54], "certain": [50, 51, 52, 53, 54], "percentag": [50, 51, 52, 53, 54], "reduct": [50, 51, 52, 53, 54], "made": [50, 51, 52, 53, 54], "incompat": [50, 51, 52, 53, 54], "dynam": [50, 51, 52, 53, 54, 58], "retrain": [50, 51, 52, 53, 54], "greater": [50, 51, 52, 53, 54], "stop": [50, 51, 52, 53, 54], "minim": [50, 51, 52, 53, 54], "deem": [50, 51, 52, 53, 54], "offer": [50, 51, 52, 53, 54], "good": [50, 51, 52, 53, 54, 60], "restor": [50, 51, 52, 53, 54], "incompar": [50, 51, 52, 53, 54], "natur": [50, 51, 52, 53, 54], "beyond": [50, 51, 52, 53, 54], "upgrad": [50, 51, 52, 53, 54], "too": [50, 51, 52, 53, 54], "earli": [50, 51, 52, 53, 54], "wait": [50, 51, 52, 53, 54], "without": [50, 51, 52, 53, 54, 59, 60], "befor": [50, 51, 52, 53, 54], "sequenti": [50, 51, 52, 53, 54], "group_penalti": [50, 51, 52, 53, 54], "7040618744": 51, "adapt": 52, "_compute_gemini": 52, "sparsemlpmodel": [52, 53, 58], "skip": [53, 54, 62], "connect": [53, 54, 62], "inspir": [53, 54, 60, 62], "lassonet": [53, 54, 60, 62], "lemhadri": [53, 54, 60, 62], "2021": [53, 54, 60, 62], "hierarchi": [53, 54], "coeffici": [53, 54], "rel": [53, 54, 55], "strength": [53, 54], "ruan": [53, 54, 60, 62], "abraham": [53, 54, 60, 62], "tibshirani": [53, 54, 60, 62], "7664211836": 53, "w_skip_": [53, 54], "feature_mask": 55, "temperatur": 55, "dndt": 55, "leverag": 55, "appris": 55, "split": [55, 56, 60], "learnabl": 55, "wise": 55, "soft": 55, "recombin": 55, "those": [55, 56], "cut": 55, "boolean": 55, "leaf": [55, 56], "high": 55, "smoothen": 55, "wherea": 55, "closer": 55, "dirac": [55, 56], "explor": [55, 56], "find_active_point": 55, "calcul": 55, "point": 55, "fall": 55, "within": 55, "bound": 55, "contribut": 55, "active_point": 55, "integ": 55, "min_samples_split": 56, "min_samples_leaf": 56, "max_featur": 56, "max_leav": 56, "reward": 56, "ideal": 56, "new": [56, 58], "refurbish": 56, "alreadi": 56, "exist": 56, "leav": 56, "least": 56, "logic": 56, "randomli": 56, "upon": 56, "put": 56, "tree_": 56, "_tree": 56, "repeatedli": 56, "choos": 56, "reach": 56, "onc": 56, "special": [56, 59], "henc": [56, 60], "constant": 56, "kauri_tre": 57, "ad": [58, 62], "simpli": 58, "compat": [58, 59, 62], "No": 58, "longer": 58, "hellingergemini": 58, "tvgemini": 58, "parametris": 58, "string": 58, "dedic": [58, 59], "fuse": 58, "mmdova": 58, "mmdovo": 58, "mmdgemini": 58, "wassersteinova": 58, "wassersteinovo": 58, "fix": 58, "mistak": 58, "cart": 58, "experiment": 58, "minor": 58, "document": 58, "better": 58, "scikit": [58, 59, 60], "regard": 58, "abcmeta": 58, "valid": 58, "problem": 58, "retrocompat": 58, "1d": 58, "extern": 58, "usag": 58, "etc": 58, "spar": 58, "multivariate_student_t": 58, "divis": 58, "thank": 59, "realli": 59, "pleasur": 59, "theori": [59, 60], "includ": [59, 62], "spirit": 59, "tool": 59, "http": 59, "io": 59, "main": 59, "com": 59, "instruct": 59, "pip": 59, "scientif": 59, "pot": 59, "repo": 59, "git": 59, "clone": 59, "cd": 59, "cite": 59, "neurip": 59, "inproceed": 59, "ohl2022generalis": 59, "author": 59, "micka": 59, "booktitl": 59, "editor": 59, "alic": 59, "oh": [59, 60], "alekh": 59, "agarw": [59, 60], "daniel": 59, "belgrav": [59, 60], "kyunghyun": 59, "cho": [59, 60], "year": 59, "url": 59, "openreview": 59, "net": 59, "forum": 59, "id": 59, "0oy3pia": 59, "adp": 59, "open": 59, "suggest": 59, "been": 59, "french": 59, "govern": 59, "3ia": 59, "c\u00f4te": 59, "azur": 59, "invest": 59, "futur": 59, "project": 59, "manag": 59, "nation": 59, "research": [59, 60, 62], "agenc": 59, "anr": 59, "p3ia": 59, "0002": 59, "franc": 59, "canada": 59, "fund": 59, "ffcr": 59, "partli": 59, "eu": 59, "horizon": 59, "2020": 59, "ai4media": 59, "contract": 59, "951911": 59, "jhonatan": 59, "torr": 59, "hi": 59, "insight": 59, "develop": 59, "short": 60, "descript": 60, "hint": 60, "about": 60, "detail": 60, "public": 60, "stand": 60, "measur": 60, "custer": 60, "right": 60, "y_1": 60, "y_2": 60, "theorem": 60, "easili": 60, "tractabl": 60, "cane": 60, "valuat": 60, "assumpt": 60, "At": 60, "moment": 60, "report": 60, "fewer": 60, "practic": 60, "merg": 60, "loss": 60, "mainli": 60, "feel": 60, "interest": 60, "ed": [60, 62], "machin": [60, 62], "127": [60, 62], "29": [60, 62], "arxiv": 60, "2302": 60, "03391": 60, "2024": 60, "2402": 60, "12232": 60, "223": 61, "consider": 62, "kullback": 62, "leibler": 62, "constructor": 62, "readili": 62, "integr": 62, "manner": 62, "pairwise_kernel": 62, "relu": 62, "achiev": 62, "litteratur": 62, "scope": 62, "rewrit": 62, "lafferti": 62, "william": 62, "shaw": 62, "taylor": 62, "zemel": 62, "culotta": 62, "vol": 62, "23": 62}, "objects": {"gemclus": [[26, 0, 1, "", "DiscriminativeModel"], [27, 2, 1, "", "add_mlcl_constraint"]], "gemclus.DiscriminativeModel": [[26, 1, 1, "", "__init__"], [26, 1, 1, "", "fit"], [26, 1, 1, "", "fit_predict"], [26, 1, 1, "", "get_gemini"], [26, 1, 1, "", "get_metadata_routing"], [26, 1, 1, "", "get_params"], [26, 1, 1, "", "predict"], [26, 1, 1, "", "predict_proba"], [26, 1, 1, "", "score"], [26, 1, 1, "", "set_params"]], "gemclus.data": [[28, 2, 1, "", "celeux_one"], [29, 2, 1, "", "celeux_two"], [30, 2, 1, "", "draw_gmm"], [31, 2, 1, "", "gstm"], [32, 2, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[33, 0, 1, "", "HellingerGEMINI"], [34, 0, 1, "", "KLGEMINI"], [35, 0, 1, "", "MI"], [36, 0, 1, "", "MMDGEMINI"], [37, 0, 1, "", "TVGEMINI"], [38, 0, 1, "", "WassersteinGEMINI"]], "gemclus.gemini.HellingerGEMINI": [[33, 1, 1, "", "__init__"], [33, 1, 1, "", "compute_affinity"], [33, 1, 1, "", "evaluate"]], "gemclus.gemini.KLGEMINI": [[34, 1, 1, "", "__init__"], [34, 1, 1, "", "compute_affinity"], [34, 1, 1, "", "evaluate"]], "gemclus.gemini.MI": [[35, 1, 1, "", "__init__"], [35, 1, 1, "", "compute_affinity"], [35, 1, 1, "", "evaluate"]], "gemclus.gemini.MMDGEMINI": [[36, 1, 1, "", "__init__"], [36, 1, 1, "", "compute_affinity"], [36, 1, 1, "", "evaluate"]], "gemclus.gemini.TVGEMINI": [[37, 1, 1, "", "__init__"], [37, 1, 1, "", "compute_affinity"], [37, 1, 1, "", "evaluate"]], "gemclus.gemini.WassersteinGEMINI": [[38, 1, 1, "", "__init__"], [38, 1, 1, "", "compute_affinity"], [38, 1, 1, "", "evaluate"]], "gemclus.linear": [[39, 0, 1, "", "KernelRIM"], [40, 0, 1, "", "LinearMMD"], [41, 0, 1, "", "LinearModel"], [42, 0, 1, "", "LinearWasserstein"], [43, 0, 1, "", "RIM"]], "gemclus.linear.KernelRIM": [[39, 1, 1, "", "__init__"], [39, 1, 1, "", "fit"], [39, 1, 1, "", "fit_predict"], [39, 1, 1, "", "get_gemini"], [39, 1, 1, "", "get_metadata_routing"], [39, 1, 1, "", "get_params"], [39, 1, 1, "", "predict"], [39, 1, 1, "", "predict_proba"], [39, 1, 1, "", "score"], [39, 1, 1, "", "set_params"]], "gemclus.linear.LinearMMD": [[40, 1, 1, "", "__init__"], [40, 1, 1, "", "fit"], [40, 1, 1, "", "fit_predict"], [40, 1, 1, "", "get_gemini"], [40, 1, 1, "", "get_metadata_routing"], [40, 1, 1, "", "get_params"], [40, 1, 1, "", "predict"], [40, 1, 1, "", "predict_proba"], [40, 1, 1, "", "score"], [40, 1, 1, "", "set_params"]], "gemclus.linear.LinearModel": [[41, 1, 1, "", "__init__"], [41, 1, 1, "", "fit"], [41, 1, 1, "", "fit_predict"], [41, 1, 1, "", "get_gemini"], [41, 1, 1, "", "get_metadata_routing"], [41, 1, 1, "", "get_params"], [41, 1, 1, "", "predict"], [41, 1, 1, "", "predict_proba"], [41, 1, 1, "", "score"], [41, 1, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[42, 1, 1, "", "__init__"], [42, 1, 1, "", "fit"], [42, 1, 1, "", "fit_predict"], [42, 1, 1, "", "get_gemini"], [42, 1, 1, "", "get_metadata_routing"], [42, 1, 1, "", "get_params"], [42, 1, 1, "", "predict"], [42, 1, 1, "", "predict_proba"], [42, 1, 1, "", "score"], [42, 1, 1, "", "set_params"]], "gemclus.linear.RIM": [[43, 1, 1, "", "__init__"], [43, 1, 1, "", "fit"], [43, 1, 1, "", "fit_predict"], [43, 1, 1, "", "get_gemini"], [43, 1, 1, "", "get_metadata_routing"], [43, 1, 1, "", "get_params"], [43, 1, 1, "", "predict"], [43, 1, 1, "", "predict_proba"], [43, 1, 1, "", "score"], [43, 1, 1, "", "set_params"]], "gemclus.mlp": [[44, 0, 1, "", "MLPMMD"], [45, 0, 1, "", "MLPModel"], [46, 0, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[44, 1, 1, "", "__init__"], [44, 1, 1, "", "fit"], [44, 1, 1, "", "fit_predict"], [44, 1, 1, "", "get_gemini"], [44, 1, 1, "", "get_metadata_routing"], [44, 1, 1, "", "get_params"], [44, 1, 1, "", "predict"], [44, 1, 1, "", "predict_proba"], [44, 1, 1, "", "score"], [44, 1, 1, "", "set_params"]], "gemclus.mlp.MLPModel": [[45, 1, 1, "", "__init__"], [45, 1, 1, "", "fit"], [45, 1, 1, "", "fit_predict"], [45, 1, 1, "", "get_gemini"], [45, 1, 1, "", "get_metadata_routing"], [45, 1, 1, "", "get_params"], [45, 1, 1, "", "predict"], [45, 1, 1, "", "predict_proba"], [45, 1, 1, "", "score"], [45, 1, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[46, 1, 1, "", "__init__"], [46, 1, 1, "", "fit"], [46, 1, 1, "", "fit_predict"], [46, 1, 1, "", "get_gemini"], [46, 1, 1, "", "get_metadata_routing"], [46, 1, 1, "", "get_params"], [46, 1, 1, "", "predict"], [46, 1, 1, "", "predict_proba"], [46, 1, 1, "", "score"], [46, 1, 1, "", "set_params"]], "gemclus.nonparametric": [[47, 0, 1, "", "CategoricalMMD"], [48, 0, 1, "", "CategoricalModel"], [49, 0, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[47, 1, 1, "", "__init__"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_predict"], [47, 1, 1, "", "get_gemini"], [47, 1, 1, "", "get_metadata_routing"], [47, 1, 1, "", "get_params"], [47, 1, 1, "", "predict"], [47, 1, 1, "", "predict_proba"], [47, 1, 1, "", "score"], [47, 1, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalModel": [[48, 1, 1, "", "__init__"], [48, 1, 1, "", "fit"], [48, 1, 1, "", "fit_predict"], [48, 1, 1, "", "get_gemini"], [48, 1, 1, "", "get_metadata_routing"], [48, 1, 1, "", "get_params"], [48, 1, 1, "", "predict"], [48, 1, 1, "", "predict_proba"], [48, 1, 1, "", "score"], [48, 1, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[49, 1, 1, "", "__init__"], [49, 1, 1, "", "fit"], [49, 1, 1, "", "fit_predict"], [49, 1, 1, "", "get_gemini"], [49, 1, 1, "", "get_metadata_routing"], [49, 1, 1, "", "get_params"], [49, 1, 1, "", "predict"], [49, 1, 1, "", "predict_proba"], [49, 1, 1, "", "score"], [49, 1, 1, "", "set_params"]], "gemclus.sparse": [[50, 0, 1, "", "SparseLinearMI"], [51, 0, 1, "", "SparseLinearMMD"], [52, 0, 1, "", "SparseLinearModel"], [53, 0, 1, "", "SparseMLPMMD"], [54, 0, 1, "", "SparseMLPModel"]], "gemclus.sparse.SparseLinearMI": [[50, 1, 1, "", "__init__"], [50, 1, 1, "", "fit"], [50, 1, 1, "", "fit_predict"], [50, 1, 1, "", "get_gemini"], [50, 1, 1, "", "get_metadata_routing"], [50, 1, 1, "", "get_params"], [50, 1, 1, "", "get_selection"], [50, 1, 1, "", "path"], [50, 1, 1, "", "predict"], [50, 1, 1, "", "predict_proba"], [50, 1, 1, "", "score"], [50, 1, 1, "", "set_params"]], "gemclus.sparse.SparseLinearMMD": [[51, 1, 1, "", "__init__"], [51, 1, 1, "", "fit"], [51, 1, 1, "", "fit_predict"], [51, 1, 1, "", "get_gemini"], [51, 1, 1, "", "get_metadata_routing"], [51, 1, 1, "", "get_params"], [51, 1, 1, "", "get_selection"], [51, 1, 1, "", "path"], [51, 1, 1, "", "predict"], [51, 1, 1, "", "predict_proba"], [51, 1, 1, "", "score"], [51, 1, 1, "", "set_params"]], "gemclus.sparse.SparseLinearModel": [[52, 1, 1, "", "__init__"], [52, 1, 1, "", "fit"], [52, 1, 1, "", "fit_predict"], [52, 1, 1, "", "get_gemini"], [52, 1, 1, "", "get_metadata_routing"], [52, 1, 1, "", "get_params"], [52, 1, 1, "", "get_selection"], [52, 1, 1, "", "path"], [52, 1, 1, "", "predict"], [52, 1, 1, "", "predict_proba"], [52, 1, 1, "", "score"], [52, 1, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[53, 1, 1, "", "__init__"], [53, 1, 1, "", "fit"], [53, 1, 1, "", "fit_predict"], [53, 1, 1, "", "get_gemini"], [53, 1, 1, "", "get_metadata_routing"], [53, 1, 1, "", "get_params"], [53, 1, 1, "", "get_selection"], [53, 1, 1, "", "path"], [53, 1, 1, "", "predict"], [53, 1, 1, "", "predict_proba"], [53, 1, 1, "", "score"], [53, 1, 1, "", "set_params"]], "gemclus.sparse.SparseMLPModel": [[54, 1, 1, "", "__init__"], [54, 1, 1, "", "fit"], [54, 1, 1, "", "fit_predict"], [54, 1, 1, "", "get_gemini"], [54, 1, 1, "", "get_metadata_routing"], [54, 1, 1, "", "get_params"], [54, 1, 1, "", "get_selection"], [54, 1, 1, "", "path"], [54, 1, 1, "", "predict"], [54, 1, 1, "", "predict_proba"], [54, 1, 1, "", "score"], [54, 1, 1, "", "set_params"]], "gemclus.tree": [[55, 0, 1, "", "Douglas"], [56, 0, 1, "", "Kauri"], [57, 2, 1, "", "print_kauri_tree"]], "gemclus.tree.Douglas": [[55, 1, 1, "", "__init__"], [55, 1, 1, "", "find_active_points"], [55, 1, 1, "", "fit"], [55, 1, 1, "", "fit_predict"], [55, 1, 1, "", "get_gemini"], [55, 1, 1, "", "get_metadata_routing"], [55, 1, 1, "", "get_params"], [55, 1, 1, "", "predict"], [55, 1, 1, "", "predict_proba"], [55, 1, 1, "", "score"], [55, 1, 1, "", "set_params"]], "gemclus.tree.Kauri": [[56, 1, 1, "", "__init__"], [56, 1, 1, "", "fit"], [56, 1, 1, "", "fit_predict"], [56, 1, 1, "", "get_metadata_routing"], [56, 1, 1, "", "get_params"], [56, 1, 1, "", "predict"], [56, 1, 1, "", "score"], [56, 1, 1, "", "set_params"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"]}, "titleterms": {"gemclu": [0, 2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "api": 0, "score": [0, 17, 20], "gemini": [0, 5, 6, 17, 20, 33, 34, 35, 36, 37, 38, 59, 60, 62], "cluster": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 59, 60], "model": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 24], "dens": 0, "nonparametr": [0, 3, 47, 48, 49], "spars": [0, 12, 13, 14, 50, 51, 52, 53, 54], "tree": [0, 17, 23, 24, 55, 56, 57], "gener": [0, 4, 5, 8, 17], "constraint": [0, 18], "dataset": [0, 1, 6, 7, 10, 12, 13, 14, 15, 18, 20, 23, 24], "compar": 1, "circl": [1, 7], "kernel": [1, 6, 7, 24], "chang": [1, 58], "draw": [1, 3, 6, 7, 8, 9], "sampl": [1, 3, 6, 7, 8, 9, 18], "train": [1, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 20], "displai": 1, "predict": [1, 7], "decis": [1, 4, 8], "boundari": [1, 4, 8], "extend": 2, "build": [2, 18, 23, 24], "your": 2, "own": 2, "discrimin": [2, 59, 60, 62], "creat": [2, 3, 5, 18, 23, 24], "custom": 2, "test": 2, "fit": [2, 5, 23], "procedur": 2, "plot": [2, 5, 18], "result": [2, 12, 14, 15, 18], "graph": 3, "node": 3, "from": [3, 6, 9], "gmm": [3, 9], "edg": 3, "pre": [3, 8], "comput": [3, 8, 11, 16, 19, 21, 22, 25, 61], "specif": [3, 8], "metric": [3, 8], "between": [3, 8], "final": [3, 4, 5, 6, 8, 9, 10, 12, 13, 14], "exampl": [4, 5, 17, 26, 27, 28, 30, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62], "map": 4, "mixtur": 4, "gaussian": 4, "low": 4, "degre": 4, "student": 4, "distribut": [4, 62], "data": [4, 5, 28, 29, 30, 31, 32], "an": [5, 24], "introduc": 5, "mlp": [5, 14, 44, 45, 46], "mmd": [5, 12, 14], "kmean": [6, 24], "circular": 6, "rim": [7, 10, 43], "show": 7, "similar": 7, "two": [8, 20], "interlac": 8, "moon": 8, "non": 9, "parametr": 9, "simpl": [10, 12, 13, 14, 15, 20], "logist": [10, 12, 13], "regress": [10, 12, 13], "load": [10, 12, 13, 14, 15, 18, 20, 23, 24], "synthet": [10, 12, 13, 14, 15], "time": [11, 16, 19, 21, 22, 25, 61], "featur": [12, 13, 14, 15, 17, 60], "select": [12, 13, 14, 15, 17, 60], "us": [12, 13, 14, 24, 26, 27, 28, 30, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59], "ovo": 12, "path": [12, 14, 15], "linear": [13, 15, 24, 39, 40, 41, 42, 43], "mi": [13, 35], "ova": 14, "group": 15, "galleri": 17, "consensu": [17, 18], "link": 18, "pair": 18, "multipl": 18, "matrix": 18, "optimis": 18, "add": 18, "must": 18, "cannot": 18, "ani": 20, "real": 20, "supervis": 20, "differenti": 23, "unsupervis": [23, 24], "dougla": [23, 55], "object": 24, "kauri": [24, 56], "first": 24, "second": 24, "addit": 24, "chi2": 24, "evalu": 24, "perform": 24, "visualis": 24, "structur": 24, "discriminativemodel": 26, "add_mlcl_constraint": 27, "celeux_on": 28, "celeux_two": 29, "draw_gmm": 30, "gstm": 31, "multivariate_student_t": 32, "hellingergemini": 33, "klgemini": 34, "mmdgemini": 36, "tvgemini": 37, "wassersteingemini": 38, "kernelrim": 39, "linearmmd": 40, "linearmodel": 41, "linearwasserstein": 42, "mlpmmd": 44, "mlpmodel": 45, "mlpwasserstein": 46, "categoricalmmd": 47, "categoricalmodel": 48, "categoricalwasserstein": 49, "sparselinearmi": 50, "sparselinearmmd": 51, "sparselinearmodel": 52, "sparsemlpmmd": 53, "sparsemlpmodel": 54, "print_kauri_tre": 57, "releas": 58, "histori": 58, "In": 58, "develop": 58, "0": 58, "2": 58, "latest": [58, 59], "1": 58, "welcom": 59, "document": 59, "content": [59, 62], "A": 59, "packag": [59, 62], "instal": 59, "offici": 59, "version": 59, "refer": [59, 60], "contribut": 59, "acknowledg": 59, "quick": 60, "start": 60, "what": [60, 62], "i": 60, "do": 60, "user": 62, "guid": 62, "which": 62, "ar": 62, "implement": 62, "avail": 62, "basic": 62}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"GemClus API": [[0, "gemclus-api"]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [17, "scoring-with-gemini"], [20, "scoring-with-gemini"]], "Clustering models": [[0, "clustering-models"]], "Dense models": [[0, "dense-models"]], "Nonparametric models": [[0, "nonparametric-models"]], "Sparse models": [[0, "sparse-models"]], "Tree models": [[0, "tree-models"]], "Generic models": [[0, "generic-models"]], "Constraints": [[0, "constraints"]], "Dataset generation": [[0, "dataset-generation"]], "Comparative clustering of circles dataset with kernel change": [[1, "comparative-clustering-of-circles-dataset-with-kernel-change"]], "Draw samples for the circle dataset": [[1, "draw-samples-for-the-circle-dataset"], [7, "draw-samples-for-the-circle-dataset"]], "Training clustering models": [[1, "training-clustering-models"]], "Display predictions and decision boundaries": [[1, "display-predictions-and-decision-boundaries"]], "Extending GemClus to build your own discriminative clustering model": [[2, "extending-gemclus-to-build-your-own-discriminative-clustering-model"]], "Create the custom model": [[2, "create-the-custom-model"]], "Test the fitting procedure and plot the clustering results": [[2, "test-the-fitting-procedure-and-plot-the-clustering-results"]], "Graph node clustering with a nonparametric model": [[3, "graph-node-clustering-with-a-nonparametric-model"]], "Draw samples from a GMM": [[3, "draw-samples-from-a-gmm"], [9, "draw-samples-from-a-gmm"]], "Create the graph edges": [[3, "create-the-graph-edges"]], "Pre-compute a specific metric between samples": [[3, "pre-compute-a-specific-metric-between-samples"], [8, "pre-compute-a-specific-metric-between-samples"]], "Train the model": [[3, "train-the-model"], [6, "train-the-model"], [8, "train-the-model"], [9, "train-the-model"], [10, "train-the-model"], [12, "train-the-model"], [13, "train-the-model"], [14, "train-the-model"], [15, "train-the-model"]], "Final Clustering": [[3, "final-clustering"], [4, "final-clustering"], [6, "final-clustering"], [8, "final-clustering"], [9, "final-clustering"], [10, "final-clustering"], [12, "final-clustering"], [13, "final-clustering"], [14, "final-clustering"]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[4, "example-of-decision-boundary-map-for-a-mixture-of-gaussian-and-low-degree-student-distributions"]], "Generate the data": [[4, "generate-the-data"]], "Train the model for clustering": [[4, "train-the-model-for-clustering"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[5, "an-introducing-example-to-clustering-with-an-mlp-and-the-mmd-gemini"]], "Generate data": [[5, "generate-data"]], "Create the MLP clustering model and fit it": [[5, "create-the-mlp-clustering-model-and-fit-it"]], "Plot the final clustering": [[5, "plot-the-final-clustering"]], "Kernel KMeans clustering with GEMINI": [[6, "kernel-kmeans-clustering-with-gemini"]], "Draw samples from a circular dataset": [[6, "draw-samples-from-a-circular-dataset"]], "Clustering circles with kernel RIM": [[7, "clustering-circles-with-kernel-rim"]], "Training clustering model": [[7, "training-clustering-model"]], "Show predictions on similar samples": [[7, "show-predictions-on-similar-samples"]], "Drawing a decision boundary between two interlacing moons": [[8, "drawing-a-decision-boundary-between-two-interlacing-moons"]], "Generate two interlacing moons": [[8, "generate-two-interlacing-moons"]], "Non parametric clustering": [[9, "non-parametric-clustering"]], "Simple logistic regression with RIM": [[10, "simple-logistic-regression-with-rim"]], "Load a simple synthetic dataset": [[10, "load-a-simple-synthetic-dataset"], [12, "load-a-simple-synthetic-dataset"], [13, "load-a-simple-synthetic-dataset"], [14, "load-a-simple-synthetic-dataset"], [15, "load-a-simple-synthetic-dataset"]], "Computation times": [[11, "computation-times"], [16, "computation-times"], [19, "computation-times"], [21, "computation-times"], [22, "computation-times"], [25, "computation-times"], [61, "computation-times"]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[12, "feature-selection-using-the-sparse-mmd-ovo-logistic-regression"]], "Path results": [[12, "path-results"], [14, "path-results"], [15, "path-results"]], "Feature selection using the Sparse Linear MI (Logistic regression)": [[13, "feature-selection-using-the-sparse-linear-mi-logistic-regression"]], "Feature selection using the Sparse MMD OvA (MLP)": [[14, "feature-selection-using-the-sparse-mmd-ova-mlp"]], "Grouped Feature selection with a linear model": [[15, "grouped-feature-selection-with-a-linear-model"]], "Example gallery": [[17, "example-gallery"]], "General examples": [[17, "general-examples"]], "Feature selection": [[17, "feature-selection"]], "Consensus clustering": [[17, "consensus-clustering"]], "Trees": [[17, "trees"]], "Consensus clustering with linking constraints on sample pairs": [[18, "consensus-clustering-with-linking-constraints-on-sample-pairs"]], "Load the dataset": [[18, "load-the-dataset"], [23, "load-the-dataset"], [24, "load-the-dataset"]], "Multiple model clustering": [[18, "multiple-model-clustering"]], "Build the consensus matrix": [[18, "build-the-consensus-matrix"]], "Create the consensus clustering model": [[18, "create-the-consensus-clustering-model"]], "Optimise the results with linking constraints": [[18, "optimise-the-results-with-linking-constraints"]], "Add must-link / cannot-link constraint": [[18, "add-must-link-cannot-link-constraint"]], "Plotting the consensus matrix": [[18, "plotting-the-consensus-matrix"]], "Scoring any model with GEMINI": [[20, "scoring-any-model-with-gemini"]], "Load a simple real dataset": [[20, "load-a-simple-real-dataset"]], "Train two supervised models": [[20, "train-two-supervised-models"]], "Supervised Scoring with GEMINI": [[20, "supervised-scoring-with-gemini"]], "Building a differentiable unsupervised tree: DOUGLAS": [[23, "building-a-differentiable-unsupervised-tree-douglas"]], "Create the douglas tree and fit it": [[23, "create-the-douglas-tree-and-fit-it"]], "Building an unsupervised tree with kernel-kmeans objective: KAURI": [[24, "building-an-unsupervised-tree-with-kernel-kmeans-objective-kauri"]], "Create a first tree using a linear kernel": [[24, "create-a-first-tree-using-a-linear-kernel"]], "Create a second tree using an additive chi2 kernel": [[24, "create-a-second-tree-using-an-additive-chi2-kernel"]], "Evaluate the performances of the model": [[24, "evaluate-the-performances-of-the-model"]], "Visualise the tree structure": [[24, "visualise-the-tree-structure"]], "gemclus.DiscriminativeModel": [[26, "gemclus-discriminativemodel"]], "Examples using gemclus.DiscriminativeModel": [[26, "examples-using-gemclus-discriminativemodel"]], "gemclus.add_mlcl_constraint": [[27, "gemclus-add-mlcl-constraint"]], "Examples using gemclus.add_mlcl_constraint": [[27, "examples-using-gemclus-add-mlcl-constraint"]], "gemclus.data.celeux_one": [[28, "gemclus-data-celeux-one"]], "Examples using gemclus.data.celeux_one": [[28, "examples-using-gemclus-data-celeux-one"]], "gemclus.data.celeux_two": [[29, "gemclus-data-celeux-two"]], "gemclus.data.draw_gmm": [[30, "gemclus-data-draw-gmm"]], "Examples using gemclus.data.draw_gmm": [[30, "examples-using-gemclus-data-draw-gmm"]], "gemclus.data.gstm": [[31, "gemclus-data-gstm"]], "Examples using gemclus.data.gstm": [[31, "examples-using-gemclus-data-gstm"]], "gemclus.data.multivariate_student_t": [[32, "gemclus-data-multivariate-student-t"]], "gemclus.gemini.HellingerGEMINI": [[33, "gemclus-gemini-hellingergemini"]], "gemclus.gemini.KLGEMINI": [[34, "gemclus-gemini-klgemini"]], "gemclus.gemini.MI": [[35, "gemclus-gemini-mi"]], "gemclus.gemini.MMDGEMINI": [[36, "gemclus-gemini-mmdgemini"]], "gemclus.gemini.TVGEMINI": [[37, "gemclus-gemini-tvgemini"]], "gemclus.gemini.WassersteinGEMINI": [[38, "gemclus-gemini-wassersteingemini"]], "Examples using gemclus.gemini.WassersteinGEMINI": [[38, "examples-using-gemclus-gemini-wassersteingemini"]], "gemclus.linear.KernelRIM": [[39, "gemclus-linear-kernelrim"]], "Examples using gemclus.linear.KernelRIM": [[39, "examples-using-gemclus-linear-kernelrim"]], "gemclus.linear.LinearMMD": [[40, "gemclus-linear-linearmmd"]], "Examples using gemclus.linear.LinearMMD": [[40, "examples-using-gemclus-linear-linearmmd"]], "gemclus.linear.LinearModel": [[41, "gemclus-linear-linearmodel"]], "Examples using gemclus.linear.LinearModel": [[41, "examples-using-gemclus-linear-linearmodel"]], "gemclus.linear.LinearWasserstein": [[42, "gemclus-linear-linearwasserstein"]], "Examples using gemclus.linear.LinearWasserstein": [[42, "examples-using-gemclus-linear-linearwasserstein"]], "gemclus.linear.RIM": [[43, "gemclus-linear-rim"]], "Examples using gemclus.linear.RIM": [[43, "examples-using-gemclus-linear-rim"]], "gemclus.mlp.MLPMMD": [[44, "gemclus-mlp-mlpmmd"]], "Examples using gemclus.mlp.MLPMMD": [[44, "examples-using-gemclus-mlp-mlpmmd"]], "gemclus.mlp.MLPModel": [[45, "gemclus-mlp-mlpmodel"]], "Examples using gemclus.mlp.MLPModel": [[45, "examples-using-gemclus-mlp-mlpmodel"]], "gemclus.mlp.MLPWasserstein": [[46, "gemclus-mlp-mlpwasserstein"]], "Examples using gemclus.mlp.MLPWasserstein": [[46, "examples-using-gemclus-mlp-mlpwasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[47, "gemclus-nonparametric-categoricalmmd"]], "Examples using gemclus.nonparametric.CategoricalMMD": [[47, "examples-using-gemclus-nonparametric-categoricalmmd"]], "gemclus.nonparametric.CategoricalModel": [[48, "gemclus-nonparametric-categoricalmodel"]], "Examples using gemclus.nonparametric.CategoricalModel": [[48, "examples-using-gemclus-nonparametric-categoricalmodel"]], "gemclus.nonparametric.CategoricalWasserstein": [[49, "gemclus-nonparametric-categoricalwasserstein"]], "Examples using gemclus.nonparametric.CategoricalWasserstein": [[49, "examples-using-gemclus-nonparametric-categoricalwasserstein"]], "gemclus.sparse.SparseLinearMI": [[50, "gemclus-sparse-sparselinearmi"]], "Examples using gemclus.sparse.SparseLinearMI": [[50, "examples-using-gemclus-sparse-sparselinearmi"]], "gemclus.sparse.SparseLinearMMD": [[51, "gemclus-sparse-sparselinearmmd"]], "Examples using gemclus.sparse.SparseLinearMMD": [[51, "examples-using-gemclus-sparse-sparselinearmmd"]], "gemclus.sparse.SparseLinearModel": [[52, "gemclus-sparse-sparselinearmodel"]], "Examples using gemclus.sparse.SparseLinearModel": [[52, "examples-using-gemclus-sparse-sparselinearmodel"]], "gemclus.sparse.SparseMLPMMD": [[53, "gemclus-sparse-sparsemlpmmd"]], "Examples using gemclus.sparse.SparseMLPMMD": [[53, "examples-using-gemclus-sparse-sparsemlpmmd"]], "gemclus.sparse.SparseMLPModel": [[54, "gemclus-sparse-sparsemlpmodel"]], "Examples using gemclus.sparse.SparseMLPModel": [[54, "examples-using-gemclus-sparse-sparsemlpmodel"]], "gemclus.tree.Douglas": [[55, "gemclus-tree-douglas"]], "Examples using gemclus.tree.Douglas": [[55, "examples-using-gemclus-tree-douglas"]], "gemclus.tree.Kauri": [[56, "gemclus-tree-kauri"]], "Examples using gemclus.tree.Kauri": [[56, "examples-using-gemclus-tree-kauri"]], "gemclus.tree.print_kauri_tree": [[57, "gemclus-tree-print-kauri-tree"]], "Examples using gemclus.tree.print_kauri_tree": [[57, "examples-using-gemclus-tree-print-kauri-tree"]], "RELEASES": [[58, "releases"]], "History of changes": [[58, "history-of-changes"]], "In development": [[58, "in-development"]], "0.2.0 (Latest)": [[58, "latest"]], "0.1.1": [[58, "id1"]], "0.1.0": [[58, "id2"]], "0.0.2": [[58, "id3"]], "Welcome to GemClus documentation!": [[59, "welcome-to-gemclus-documentation"]], "Contents": [[59, "contents"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[59, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "Installation": [[59, "installation"]], "Official package": [[59, "official-package"]], "Latest version": [[59, "latest-version"]], "Reference": [[59, "reference"]], "Contributing": [[59, "contributing"]], "Acknowledgements": [[59, "acknowledgements"]], "Quick start on GemClus": [[60, "quick-start-on-gemclus"]], "What is GEMINI": [[60, "what-is-gemini"]], "Doing discriminative clustering": [[60, "doing-discriminative-clustering"]], "Selecting features in clustering": [[60, "selecting-features-in-clustering"]], "References": [[60, "references"]], "User Guide": [[62, "user-guide"]], "Content of the package": [[62, "content-of-the-package"]], "Which GEMINIs are implemented": [[62, "which-geminis-are-implemented"]], "What discriminative distributions are available": [[62, "what-discriminative-distributions-are-available"]], "Basic examples": [[62, "basic-examples"]]}, "indexentries": {"discriminativemodel (class in gemclus)": [[26, "gemclus.DiscriminativeModel"]], "__init__() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.__init__"]], "fit() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.fit"]], "fit_predict() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.fit_predict"]], "get_gemini() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.get_gemini"]], "get_metadata_routing() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.get_metadata_routing"]], "get_params() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.get_params"]], "predict() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.predict"]], "predict_proba() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.predict_proba"]], "score() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.score"]], "set_params() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.set_params"]], "add_mlcl_constraint() (in module gemclus)": [[27, "gemclus.add_mlcl_constraint"]], "celeux_one() (in module gemclus.data)": [[28, "gemclus.data.celeux_one"]], "celeux_two() (in module gemclus.data)": [[29, "gemclus.data.celeux_two"]], "draw_gmm() (in module gemclus.data)": [[30, "gemclus.data.draw_gmm"]], "gstm() (in module gemclus.data)": [[31, "gemclus.data.gstm"]], "multivariate_student_t() (in module gemclus.data)": [[32, "gemclus.data.multivariate_student_t"]], "hellingergemini (class in gemclus.gemini)": [[33, "gemclus.gemini.HellingerGEMINI"]], "__init__() (gemclus.gemini.hellingergemini method)": [[33, "gemclus.gemini.HellingerGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.hellingergemini method)": [[33, "gemclus.gemini.HellingerGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.hellingergemini method)": [[33, "gemclus.gemini.HellingerGEMINI.evaluate"]], "klgemini (class in gemclus.gemini)": [[34, "gemclus.gemini.KLGEMINI"]], "__init__() (gemclus.gemini.klgemini method)": [[34, "gemclus.gemini.KLGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.klgemini method)": [[34, "gemclus.gemini.KLGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.klgemini method)": [[34, "gemclus.gemini.KLGEMINI.evaluate"]], "mi (class in gemclus.gemini)": [[35, "gemclus.gemini.MI"]], "__init__() (gemclus.gemini.mi method)": [[35, "gemclus.gemini.MI.__init__"]], "compute_affinity() (gemclus.gemini.mi method)": [[35, "gemclus.gemini.MI.compute_affinity"]], "evaluate() (gemclus.gemini.mi method)": [[35, "gemclus.gemini.MI.evaluate"]], "mmdgemini (class in gemclus.gemini)": [[36, "gemclus.gemini.MMDGEMINI"]], "__init__() (gemclus.gemini.mmdgemini method)": [[36, "gemclus.gemini.MMDGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.mmdgemini method)": [[36, "gemclus.gemini.MMDGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.mmdgemini method)": [[36, "gemclus.gemini.MMDGEMINI.evaluate"]], "tvgemini (class in gemclus.gemini)": [[37, "gemclus.gemini.TVGEMINI"]], "__init__() (gemclus.gemini.tvgemini method)": [[37, "gemclus.gemini.TVGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.tvgemini method)": [[37, "gemclus.gemini.TVGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.tvgemini method)": [[37, "gemclus.gemini.TVGEMINI.evaluate"]], "wassersteingemini (class in gemclus.gemini)": [[38, "gemclus.gemini.WassersteinGEMINI"]], "__init__() (gemclus.gemini.wassersteingemini method)": [[38, "gemclus.gemini.WassersteinGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.wassersteingemini method)": [[38, "gemclus.gemini.WassersteinGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteingemini method)": [[38, "gemclus.gemini.WassersteinGEMINI.evaluate"]], "kernelrim (class in gemclus.linear)": [[39, "gemclus.linear.KernelRIM"]], "__init__() (gemclus.linear.kernelrim method)": [[39, "gemclus.linear.KernelRIM.__init__"]], "fit() (gemclus.linear.kernelrim method)": [[39, "gemclus.linear.KernelRIM.fit"]], "fit_predict() (gemclus.linear.kernelrim method)": [[39, "gemclus.linear.KernelRIM.fit_predict"]], "get_gemini() (gemclus.linear.kernelrim method)": [[39, "gemclus.linear.KernelRIM.get_gemini"]], "get_metadata_routing() (gemclus.linear.kernelrim method)": [[39, "gemclus.linear.KernelRIM.get_metadata_routing"]], "get_params() (gemclus.linear.kernelrim method)": [[39, "gemclus.linear.KernelRIM.get_params"]], "predict() (gemclus.linear.kernelrim method)": [[39, "gemclus.linear.KernelRIM.predict"]], "predict_proba() (gemclus.linear.kernelrim method)": [[39, "gemclus.linear.KernelRIM.predict_proba"]], "score() (gemclus.linear.kernelrim method)": [[39, "gemclus.linear.KernelRIM.score"]], "set_params() (gemclus.linear.kernelrim method)": [[39, "gemclus.linear.KernelRIM.set_params"]], "linearmmd (class in gemclus.linear)": [[40, "gemclus.linear.LinearMMD"]], "__init__() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.__init__"]], "fit() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.fit"]], "fit_predict() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.fit_predict"]], "get_gemini() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.get_gemini"]], "get_metadata_routing() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.get_metadata_routing"]], "get_params() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.get_params"]], "predict() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.predict"]], "predict_proba() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.predict_proba"]], "score() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.score"]], "set_params() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.set_params"]], "linearmodel (class in gemclus.linear)": [[41, "gemclus.linear.LinearModel"]], "__init__() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.__init__"]], "fit() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.fit"]], "fit_predict() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.fit_predict"]], "get_gemini() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.get_gemini"]], "get_metadata_routing() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.get_metadata_routing"]], "get_params() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.get_params"]], "predict() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.predict"]], "predict_proba() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.predict_proba"]], "score() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.score"]], "set_params() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.set_params"]], "linearwasserstein (class in gemclus.linear)": [[42, "gemclus.linear.LinearWasserstein"]], "__init__() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.__init__"]], "fit() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.fit"]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.fit_predict"]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.get_gemini"]], "get_metadata_routing() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.get_metadata_routing"]], "get_params() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.get_params"]], "predict() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.predict"]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.predict_proba"]], "score() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.score"]], "set_params() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.set_params"]], "rim (class in gemclus.linear)": [[43, "gemclus.linear.RIM"]], "__init__() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.__init__"]], "fit() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.fit"]], "fit_predict() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.fit_predict"]], "get_gemini() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.get_gemini"]], "get_metadata_routing() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.get_metadata_routing"]], "get_params() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.get_params"]], "predict() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.predict"]], "predict_proba() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.predict_proba"]], "score() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.score"]], "set_params() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.set_params"]], "mlpmmd (class in gemclus.mlp)": [[44, "gemclus.mlp.MLPMMD"]], "__init__() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.__init__"]], "fit() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.fit"]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.get_gemini"]], "get_metadata_routing() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.get_metadata_routing"]], "get_params() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.get_params"]], "predict() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.predict"]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.predict_proba"]], "score() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.score"]], "set_params() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.set_params"]], "mlpmodel (class in gemclus.mlp)": [[45, "gemclus.mlp.MLPModel"]], "__init__() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.__init__"]], "fit() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.fit"]], "fit_predict() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.get_gemini"]], "get_metadata_routing() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.get_metadata_routing"]], "get_params() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.get_params"]], "predict() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.predict"]], "predict_proba() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.predict_proba"]], "score() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.score"]], "set_params() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.set_params"]], "mlpwasserstein (class in gemclus.mlp)": [[46, "gemclus.mlp.MLPWasserstein"]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.__init__"]], "fit() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.fit"]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.fit_predict"]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.get_gemini"]], "get_metadata_routing() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.get_metadata_routing"]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.get_params"]], "predict() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.predict"]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.predict_proba"]], "score() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.score"]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.set_params"]], "categoricalmmd (class in gemclus.nonparametric)": [[47, "gemclus.nonparametric.CategoricalMMD"]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.__init__"]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.get_gemini"]], "get_metadata_routing() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.get_metadata_routing"]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.get_params"]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.predict_proba"]], "score() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.score"]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.set_params"]], "categoricalmodel (class in gemclus.nonparametric)": [[48, "gemclus.nonparametric.CategoricalModel"]], "__init__() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.__init__"]], "fit() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.get_gemini"]], "get_metadata_routing() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.get_metadata_routing"]], "get_params() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.get_params"]], "predict() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.predict_proba"]], "score() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.score"]], "set_params() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.set_params"]], "categoricalwasserstein (class in gemclus.nonparametric)": [[49, "gemclus.nonparametric.CategoricalWasserstein"]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.__init__"]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.fit"]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.get_gemini"]], "get_metadata_routing() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.get_metadata_routing"]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.get_params"]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.predict"]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.predict_proba"]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.score"]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.set_params"]], "sparselinearmi (class in gemclus.sparse)": [[50, "gemclus.sparse.SparseLinearMI"]], "__init__() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.__init__"]], "fit() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.fit"]], "fit_predict() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.get_gemini"]], "get_metadata_routing() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.get_metadata_routing"]], "get_params() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.get_params"]], "get_selection() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.get_selection"]], "path() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.path"]], "predict() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.predict"]], "predict_proba() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.predict_proba"]], "score() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.score"]], "set_params() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.set_params"]], "sparselinearmmd (class in gemclus.sparse)": [[51, "gemclus.sparse.SparseLinearMMD"]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.__init__"]], "fit() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.fit"]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.get_gemini"]], "get_metadata_routing() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.get_metadata_routing"]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.get_params"]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.get_selection"]], "path() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.path"]], "predict() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.predict"]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.predict_proba"]], "score() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.score"]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.set_params"]], "sparselinearmodel (class in gemclus.sparse)": [[52, "gemclus.sparse.SparseLinearModel"]], "__init__() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.__init__"]], "fit() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.fit"]], "fit_predict() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.get_gemini"]], "get_metadata_routing() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.get_metadata_routing"]], "get_params() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.get_params"]], "get_selection() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.get_selection"]], "path() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.path"]], "predict() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.predict"]], "predict_proba() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.predict_proba"]], "score() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.score"]], "set_params() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.set_params"]], "sparsemlpmmd (class in gemclus.sparse)": [[53, "gemclus.sparse.SparseMLPMMD"]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.__init__"]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.get_gemini"]], "get_metadata_routing() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.get_metadata_routing"]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.get_selection"]], "path() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.path"]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.predict_proba"]], "score() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.score"]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.set_params"]], "sparsemlpmodel (class in gemclus.sparse)": [[54, "gemclus.sparse.SparseMLPModel"]], "__init__() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.__init__"]], "fit() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.get_gemini"]], "get_metadata_routing() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.get_metadata_routing"]], "get_params() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.get_selection"]], "path() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.path"]], "predict() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.predict_proba"]], "score() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.score"]], "set_params() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.set_params"]], "douglas (class in gemclus.tree)": [[55, "gemclus.tree.Douglas"]], "__init__() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.__init__"]], "find_active_points() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.find_active_points"]], "fit() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.fit"]], "fit_predict() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.fit_predict"]], "get_gemini() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.get_gemini"]], "get_metadata_routing() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.get_metadata_routing"]], "get_params() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.get_params"]], "predict() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.predict"]], "predict_proba() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.predict_proba"]], "score() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.score"]], "set_params() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.set_params"]], "kauri (class in gemclus.tree)": [[56, "gemclus.tree.Kauri"]], "__init__() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.__init__"]], "fit() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.fit"]], "fit_predict() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.fit_predict"]], "get_metadata_routing() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.get_metadata_routing"]], "get_params() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.get_params"]], "predict() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.predict"]], "score() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.score"]], "set_params() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.set_params"]], "print_kauri_tree() (in module gemclus.tree)": [[57, "gemclus.tree.print_kauri_tree"]]}})