Search.setIndex({"docnames": ["api", "auto_examples/index", "auto_examples/plot_feature_selection_linear", "auto_examples/plot_feature_selection_mlp", "auto_examples/plot_graph_node_clustering", "auto_examples/plot_grouped_selection", "auto_examples/plot_gstm", "auto_examples/plot_intro_mlp_mmd", "auto_examples/plot_moon_clustering", "auto_examples/plot_nonparametric_clustering", "auto_examples/plot_rim", "auto_examples/sg_execution_times", "generated/gemclus.data.celeux_one", "generated/gemclus.data.celeux_two", "generated/gemclus.data.draw_gmm", "generated/gemclus.data.gstm", "generated/gemclus.data.multivariate_student_t", "generated/gemclus.gemini.MI", "generated/gemclus.gemini.MMDOvA", "generated/gemclus.gemini.MMDOvO", "generated/gemclus.gemini.WassersteinOvA", "generated/gemclus.gemini.WassersteinOvO", "generated/gemclus.linear.LinearMMD", "generated/gemclus.linear.LinearWasserstein", "generated/gemclus.linear.RIM", "generated/gemclus.mlp.MLPMMD", "generated/gemclus.mlp.MLPWasserstein", "generated/gemclus.nonparametric.CategoricalMMD", "generated/gemclus.nonparametric.CategoricalWasserstein", "generated/gemclus.sparse.SparseLinearMMD", "generated/gemclus.sparse.SparseMLPMMD", "index", "quick_start", "user_guide"], "filenames": ["api.rst", "auto_examples/index.rst", "auto_examples/plot_feature_selection_linear.rst", "auto_examples/plot_feature_selection_mlp.rst", "auto_examples/plot_graph_node_clustering.rst", "auto_examples/plot_grouped_selection.rst", "auto_examples/plot_gstm.rst", "auto_examples/plot_intro_mlp_mmd.rst", "auto_examples/plot_moon_clustering.rst", "auto_examples/plot_nonparametric_clustering.rst", "auto_examples/plot_rim.rst", "auto_examples/sg_execution_times.rst", "generated/gemclus.data.celeux_one.rst", "generated/gemclus.data.celeux_two.rst", "generated/gemclus.data.draw_gmm.rst", "generated/gemclus.data.gstm.rst", "generated/gemclus.data.multivariate_student_t.rst", "generated/gemclus.gemini.MI.rst", "generated/gemclus.gemini.MMDOvA.rst", "generated/gemclus.gemini.MMDOvO.rst", "generated/gemclus.gemini.WassersteinOvA.rst", "generated/gemclus.gemini.WassersteinOvO.rst", "generated/gemclus.linear.LinearMMD.rst", "generated/gemclus.linear.LinearWasserstein.rst", "generated/gemclus.linear.RIM.rst", "generated/gemclus.mlp.MLPMMD.rst", "generated/gemclus.mlp.MLPWasserstein.rst", "generated/gemclus.nonparametric.CategoricalMMD.rst", "generated/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/gemclus.sparse.SparseLinearMMD.rst", "generated/gemclus.sparse.SparseMLPMMD.rst", "index.rst", "quick_start.rst", "user_guide.rst"], "titles": ["GEMCLUS API", "General examples", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Graph node clustering with a nonparametric model", "Grouped Feature selection with a linear model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "Welcome to GemClus documentation!", "Quick start on gemclus", "User guide : contents"], "terms": {"The": [0, 2, 3, 5, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "gemini": [2, 3, 4, 5, 6, 8, 9, 11, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30], "packag": [0, 32], "current": [0, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 33], "contain": [0, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30], "simpl": [0, 1, 4, 9, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "mlp": [0, 1, 6, 8, 11, 30, 32], "logist": [0, 1, 3, 5, 11, 12, 22, 23, 24, 29, 30, 33], "regress": [0, 1, 3, 5, 11, 12, 22, 23, 24, 29, 30, 33], "all": [0, 1, 2, 3, 4, 5, 8, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33], "featur": [0, 1, 6, 7, 10, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "well": [0, 6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "sparsiti": [0, 29, 30, 32, 33], "constrain": [0, 5, 33], "variant": 0, "we": [1, 2, 3, 4, 5, 6, 8, 9, 10, 31, 32, 33], "give": [1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "here": [1, 4, 6, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "some": [1, 5, 31, 33], "how": [1, 2, 3, 5, 9, 10, 12, 15, 32, 33], "us": [0, 1, 4, 5, 8, 9, 10, 11, 18, 19, 20, 21, 22, 32, 33], "our": [1, 3, 4, 5, 8, 31, 32], "base": [0, 1, 12, 13, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33], "model": [1, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33], "an": [1, 2, 3, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33], "introduc": [1, 11, 25], "cluster": [1, 5, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "mmd": [1, 11, 12, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 33], "select": [0, 1, 11, 12, 13, 29, 30, 33], "spars": [1, 4, 5, 8, 11, 12, 22, 23, 24, 25, 26, 27, 28, 32, 33], "ovo": [1, 4, 7, 9, 11, 12, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33], "rim": [1, 11], "decis": [0, 1, 10, 11, 15, 23, 26, 33], "boundari": [0, 1, 10, 11, 15, 23, 26, 33], "map": [1, 11, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30], "mixtur": [1, 4, 10, 11, 12, 13, 14, 15, 23], "gaussian": [1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 23], "low": [1, 11, 15, 23], "degre": [1, 11, 15, 16, 23], "student": [1, 11, 15, 16, 23], "distribut": [0, 1, 2, 3, 5, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32], "group": [1, 3, 11, 29, 30, 33], "linear": [1, 6, 8, 10, 11, 18, 19, 25, 26, 27, 29, 30, 33], "ova": [1, 11, 22, 25, 26, 27, 28, 29, 30, 32, 33], "download": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "python": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "code": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "auto_examples_python": 1, "zip": 1, "jupyt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "notebook": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "auto_examples_jupyt": 1, "galleri": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 33], "sphinx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "go": [2, 3, 4, 5, 6, 7, 8, 9, 10, 31], "end": [2, 3, 4, 5, 6, 7, 8, 9, 10], "full": [2, 3, 4, 5, 6, 7, 8, 9, 10], "exampl": [2, 3, 4, 5, 8, 9, 10, 11, 22, 31], "In": [2, 3, 4, 5, 7, 10, 15, 31, 32, 33], "thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "ask": [2, 3, 5, 32], "gemclu": [2, 3, 4, 5, 6, 7, 8, 9, 10, 33], "sparselinearmmd": [2, 5, 30, 33], "perform": [2, 3, 4, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "where": [2, 3, 5, 6, 8, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "regularis": [2, 3, 5, 10, 24], "penalti": [2, 3, 5, 10, 24, 29, 30, 33], "i": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "progress": [0, 2, 3, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30], "increas": [2, 3, 5, 29, 30], "until": [2, 3, 5, 29, 30], "2": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 22, 23, 24, 25, 26, 29, 30, 32, 33], "ar": [0, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "discard": [2, 3, 5], "keep": [2, 3, 33], "best": [2, 3, 29, 30], "weight": [2, 3, 22, 23, 24, 25, 26, 27, 28, 29, 30], "minimum": [2, 3, 29, 30], "number": [2, 3, 4, 9, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "maintain": [2, 3], "score": [2, 3, 4, 5, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "close": [2, 3, 12, 15], "90": [2, 3], "maximum": [2, 3, 4, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30], "valu": [2, 3, 4, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "encount": [2, 3], "dure": [2, 3, 22, 23, 24, 25, 26, 27, 28, 29, 30], "consist": [2, 3, 5, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "3": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "isotrop": [2, 3, 12], "so": [2, 3, 6, 8, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "find": [2, 3, 5, 6, 8, 31], "5d": 2, "20": [2, 12, 25, 26, 30], "noisi": [2, 3, 5, 12, 13], "variabl": [2, 3, 4, 5, 12, 13, 29, 30], "thu": [2, 3, 5, 32], "optim": [2, 3, 5, 8], "solut": [2, 3, 5, 8, 29, 30], "should": [2, 3, 5, 17, 18, 19, 20, 21], "onli": [2, 3, 4, 5, 6, 29, 30, 32, 33], "5": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 29, 30], "relev": [2, 3, 5], "suffici": [2, 3, 5], "get": [2, 3, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "correct": [2, 3, 5], "from": [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33], "matplotlib": [2, 3, 4, 5, 6, 7, 8, 9, 10], "import": [2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 23, 24, 25, 26, 29, 30, 32], "pyplot": [2, 3, 4, 5, 6, 7, 8, 9, 10], "plt": [2, 3, 4, 5, 6, 7, 8, 9, 10], "data": [0, 2, 4, 5, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "celeux_on": 2, "numpi": [2, 3, 4, 5, 6, 8, 9, 10, 31], "np": [2, 3, 4, 5, 6, 8, 9, 10], "sklearn": [2, 3, 4, 7, 8, 9, 10, 22, 23, 24, 25, 26, 29, 30, 32, 33], "metric": [2, 9, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "gener": [2, 3, 4, 5, 9, 10, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "sampl": [0, 2, 3, 6, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "separ": [2, 3, 4, 9, 10], "addit": [2, 12, 13, 32], "p": [2, 4, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "independ": [2, 12, 32], "x": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33], "y": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33], "n": [2, 4, 5, 6, 9, 12, 13, 14, 15, 16], "300": [2, 12], "mu": [2, 12], "1": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 22, 23, 24, 25, 26, 29, 30, 32], "7": [2, 5, 6, 12], "random_st": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "0": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30], "creat": [2, 3, 5, 8, 9, 10], "just": [2, 3, 5, 10], "call": [2, 3, 4, 5, 9, 22, 23, 24, 25, 26, 27, 28, 29, 30], "method": [2, 3, 4, 5, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "iter": [2, 3, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30], "through": [2, 3, 5, 30, 31], "gradient": [2, 3, 5, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "descent": [2, 3, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30], "clf": [2, 3, 5, 6, 7, 10, 22, 23, 24, 25, 26, 29, 30], "alpha": [2, 3, 4, 5, 6, 8, 10, 15, 29, 30], "true": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33], "search": [2, 3, 5], "elimin": [2, 3, 5, 30], "best_weight": [2, 3, 5, 29, 30], "n_featur": [2, 3, 5, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "take": [2, 3, 5, 6, 10, 32], "look": [2, 3, 5, 10, 32], "decreas": [2, 3], "print": [2, 3, 4, 5, 9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30], "f": [2, 3, 4, 5, 9, 15, 29, 30, 31, 32], "top": [2, 3, 5, 6, 29, 30], "wa": [2, 3, 5, 12, 13, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "max": [2, 3, 5, 8, 10], "which": [0, 2, 3, 4, 5, 8, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 29, 30, 32], "settl": [2, 3, 5], "optimum": [2, 3, 5], "9": [2, 3, 5, 29, 30], "highlight": [2, 3], "along": [2, 3, 8], "titl": [2, 3, 31], "depend": [0, 2, 3, 4, 5, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "plot": [2, 3, 4, 6], "xlabel": [2, 3, 6, 7, 10], "ylabel": [2, 3, 6, 7, 10], "ylim": [2, 3, 6], "show": [2, 3, 4, 5, 6, 7, 8, 9, 10], "expect": [2, 6, 32], "first": [2, 25, 26, 30, 32], "linalg": [2, 3, 5], "norm": [2, 3, 5, 33], "axi": [2, 3, 5, 8], "ord": [2, 3, 5], "838372528505907": [], "1481320181509105": [], "8333188163358196": [], "arrai": [2, 3, 4, 5, 9, 12, 13, 14, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30], "4": [2, 3, 4, 5, 6, 9, 13], "now": [2, 3, 6, 10], "evalu": [0, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "predict": [0, 2, 3, 6, 7, 8, 10, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "y_pred": [2, 3, 4, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "ari": [2, 4, 9], "adjusted_rand_scor": [2, 4, 9], "8221373771284672": [], "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "run": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "time": [2, 3, 4, 5, 6, 7, 8, 9, 10, 32], "script": [2, 3, 4, 5, 6, 7, 8, 9, 10], "minut": [2, 3, 4, 5, 6, 7, 8, 9, 10], "246": [], "second": [2, 3, 4, 5, 6, 7, 8, 9, 10], "plot_feature_selection_linear": [2, 11], "py": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "ipynb": [2, 3, 4, 5, 6, 7, 8, 9, 10], "sparsemlpmmd": [3, 29], "2d": [3, 13, 14], "48": 3, "make_blob": [3, 7, 10], "center": [3, 7, 10], "cluster_std": [3, 7, 10], "n_sampl": [3, 7, 8, 10, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "200": [3, 6, 7, 8, 10], "add": [3, 33], "extra": 3, "random": [3, 4, 5, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "seed": [3, 4, 5], "concaten": [3, 5, 12], "normal": [3, 5], "scale": [3, 12, 14, 16, 31], "size": [3, 4, 5, 8, 22, 23, 24, 25, 26, 27, 28, 29, 30], "figur": 3, "figsiz": 3, "10": [3, 5, 6, 10, 16, 29, 30, 32], "subplot": 3, "lasso": [3, 29, 30, 33], "tight_layout": 3, "5192633113381595": [], "6735427201341286": [], "5061884481207157": [], "x_0": [3, 7, 10], "x_1": [3, 7, 10], "x_2": [3, 7, 10], "ax0": [3, 7, 10], "scatter": [3, 4, 5, 6, 7, 8, 9, 10], "c": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 31, 32], "crimson": [3, 7, 10], "": [3, 4, 7, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30], "50": [3, 4, 5, 6, 7, 8, 10], "ax1": [3, 7, 10], "deepskyblu": [3, 7, 10], "ax2": [3, 7, 10], "darkgreen": [3, 7, 10], "leg": [3, 7, 10], "legend": [3, 7, 10], "loc": [3, 7, 10, 14, 16], "upper": [3, 7, 10], "left": [3, 7, 10, 32], "fancybox": [3, 7, 10], "scatterpoint": [3, 7, 10], "get_fram": [3, 7, 10], "set_alpha": [3, 7, 10], "11": 5, "970": [], "plot_feature_selection_mlp": [3, 11], "moreov": [5, 32], "produc": 5, "categor": [5, 27, 28], "one": [0, 5, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33], "hot": [5, 29, 30], "encod": [5, 29, 30], "consid": [5, 22, 23, 24, 25, 26, 29, 30], "altogeth": 5, "option": [5, 8, 22, 23, 24, 25, 26, 27, 28, 29, 30], "binomi": [4, 5], "paramet": [0, 4, 5, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "8": 5, "inform": [5, 10, 13, 15, 17, 22, 23, 24, 25, 26, 29, 30, 31, 32], "outcom": 5, "multinomi": 5, "x1_class_1": 5, "pval": [5, 14], "05": [5, 8, 29, 30], "45": 5, "x2_class_1": 5, "x_class_1": 5, "x1_class_2": 5, "x2_class_2": 5, "x_class_2": 5, "x_inform": 5, "x_nois": 5, "100": [4, 5, 9], "assign": [0, 4, 5, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "repeat": 5, "arang": 5, "final": 5, "write": 5, "out": [5, 31], "partit": [5, 29, 30], "rang": [4, 5], "shape": [4, 5, 8, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "visualis": 5, "def": 5, "rand_jitt": 5, "return": [5, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "randn": 5, "len": 5, "01": [5, 29, 30], "argmax": [5, 10], "red": 5, "blue": [5, 6], "6": [4, 5, 8], "12": [5, 17, 18, 19, 20, 21], "13": 5, "14": 5, "15": 5, "lower": 5, "threshold": [5, 8], "80": 5, "keep_threshold": [5, 29, 30], "3027278385416854": [], "5893356021541236": [], "4304020419387113": [], "981": [], "plot_grouped_select": [5, 11], "retak": [6, 8], "experi": [6, 8], "origin": [6, 8, 14, 31, 32, 33], "paper": [6, 8, 24, 33], "want": [6, 8, 33], "incorpor": 6, "freedom": [6, 15, 16], "t": [4, 6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "consequ": [0, 6, 27, 28], "mai": [0, 6, 32], "seem": [6, 33], "like": [0, 6, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "outlier": 6, "unlik": 6, "done": 6, "linearwasserstein": [6, 22], "instead": [4, 6], "far": [6, 33], "apart": 6, "mean": [4, 6, 9, 12, 14, 15, 18, 19], "df": [6, 15, 16], "multivari": 16, "ones": [4, 9, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30], "proport": 14, "bincount": [], "sort": [], "covari": [4, 9, 14], "ey": [4, 9], "k": [27, 28, 32], "multivariate_norm": [], "nx": [], "zero": [], "u": [10, 31], "chisquar": [], "reshap": [6, 8, 10], "sqrt": [], "expand_dim": [], "n_cluster": [4, 6, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "fit_predict": [4, 6, 8, 9, 22, 23, 24, 25, 26, 27, 28, 29, 30], "grid": 6, "input": [6, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "help": [6, 31], "draw": [1, 6, 11, 12, 13, 14, 15, 16, 26], "x_val": [6, 8, 10], "linspac": [6, 8, 10], "num": [6, 8, 10], "y_val": [6, 8, 10], "xx": [6, 8, 10], "yy": [6, 8, 10], "meshgrid": [6, 8, 10], "grid_input": [6, 8, 10], "c_": [6, 8, 10], "ravel": [6, 8, 10], "zz": [6, 8, 10], "contourf": [6, 8, 10], "cmap": [6, 8], "reds_r": 6, "xlim": 6, "18": [], "278": 11, "plot_gstm": [6, 11], "base_gemini": 7, "densemmdovo": 7, "mlpmmd": [7, 26, 32], "dataset": [7, 8, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 29, 30, 32], "environ": [7, 10], "pleas": [7, 10, 31, 32], "rerun": [7, 10], "cell": [7, 10], "html": [7, 10], "represent": [7, 10, 25, 26, 30], "trust": [7, 10], "On": [7, 10, 29, 30], "github": [7, 10], "unabl": [7, 10], "render": [7, 10], "try": [7, 10, 31], "load": 7, "page": [7, 10], "nbviewer": [7, 10], "org": [7, 10], "mlpmmdmlpmmd": 7, "673": [], "plot_intro_mlp_mmd": [7, 11], "mutual": [10, 15, 17, 22, 23, 24, 25, 26, 29, 30, 31, 32], "propos": [10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33], "kraus": [10, 24], "et": [10, 12, 13, 24, 30, 32], "al": [10, 12, 13, 24, 30, 32], "2010": [10, 24], "maximis": [10, 22, 23, 24, 25, 26, 27, 28, 32], "under": [10, 29, 30, 31], "ell_2": [10, 24], "do": [0, 4, 8, 10, 27, 28, 31], "fit": [4, 8, 9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "rimrim": 10, "let": 10, "accord": [0, 4, 10], "probabl": [4, 10, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "grad": 10, "min": [8, 10], "grid_pr": 10, "predict_proba": [10, 22, 23, 24, 25, 26, 27, 28, 29, 30], "isol": 10, "level": 10, "021396049320560717": 10, "427": [], "plot_rim": [10, 11], "00": 11, "44": [], "576": [], "execut": 11, "auto_exampl": 11, "file": 11, "mb": 11, "07": 11, "none": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "tupl": [12, 13, 14], "ndarrai": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "compon": [12, 13, 14, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30], "respect": [12, 32], "over": 12, "dimens": 12, "excess": 12, "taken": [12, 13], "celeux": [12, 13], "section": [12, 13], "int": [12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "default": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "float": [12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "control": [12, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "each": [4, 12, 13, 14, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30], "other": [12, 27, 28], "randomst": [12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "instanc": [12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "determin": [4, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "creation": [12, 13, 14, 15, 16], "pass": [4, 8, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "reproduc": [12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "output": [12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "across": [12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "multipl": [12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30], "gmm": [12, 13, 14, 15], "drawn": [12, 13, 14, 15, 16, 32], "refer": [12, 13, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30], "g": [12, 13], "martin": [12, 13], "magniett": [12, 13], "m": [12, 13, 15, 30, 31, 32], "l": [12, 13, 15, 29, 30, 31, 32], "maugi": [12, 13], "rabusseau": [12, 13], "rafteri": [12, 13], "A": [12, 13, 14, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "e": [12, 13, 17, 18, 19, 20, 21, 31, 32], "2014": [12, 13], "compar": [12, 13, 18, 19, 20, 21, 32], "regular": [12, 13, 24], "approach": [12, 13], "journal": [12, 13, 32], "de": [12, 13], "la": [12, 13], "societ": [12, 13], "francais": [12, 13], "statistiqu": [12, 13], "155": [12, 13], "57": [11, 12, 13], "71": [12, 13], "2000": 13, "linearli": 13, "non": [1, 4, 11, 13, 14, 27], "sigma": [], "pi": [], "element": 14, "list": [14, 29, 30], "1d": 14, "class": [0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33], "max_it": [22, 23, 24, 25, 26, 27, 28, 29, 30], "1000": [22, 23, 24, 25, 26, 27, 28, 29, 30], "learning_r": [4, 8, 9, 22, 23, 24, 25, 26, 27, 28, 29, 30], "001": [22, 23, 24, 25, 26, 27, 28, 29, 30], "kernel": [17, 18, 19, 20, 21, 22, 25, 27, 29, 30, 33], "solver": [22, 23, 24, 25, 26, 27, 28, 29, 30], "adam": [22, 23, 24, 25, 26, 27, 28, 29, 30], "fals": [4, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "verbos": [22, 23, 24, 25, 26, 27, 28, 29, 30], "implement": [0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "form": [22, 23, 24, 25, 26, 27, 28, 29, 30], "neuron": [22, 23, 24, 25, 26, 27, 28, 29, 30], "neural": [0, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "network": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "epoch": [22, 23, 24, 25, 26, 27, 28, 29, 30], "singl": [22, 23, 24, 25, 26, 27, 28, 29, 30], "1e": [4, 8, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "initi": [22, 23, 24, 25, 26, 27, 28, 29, 30], "learn": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "rate": [22, 23, 24, 25, 26, 27, 28, 29, 30], "It": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "step": [22, 23, 24, 25, 26, 27, 28, 29, 30], "updat": [22, 23, 24, 25, 26, 27, 28, 29, 30], "additive_chi2": [18, 19, 22, 25, 27, 29, 30], "chi2": [18, 19, 22, 25, 27, 29, 30], "cosin": [18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30], "poli": [18, 19, 22, 25, 27, 29, 30], "polynomi": [18, 19, 22, 25, 27, 29, 30], "rbf": [18, 19, 22, 25, 27, 29, 30], "laplacian": [18, 19, 22, 25, 27, 29, 30], "sigmoid": [18, 19, 22, 25, 27, 29, 30], "combin": [4, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30], "object": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "correspond": [18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30], "kernel_param": [18, 19, 22, 25, 27, 29, 30], "bool": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "whether": [22, 23, 24, 25, 26, 27, 28, 29, 30], "sgd": [22, 23, 24, 25, 26, 27, 28, 29, 30], "optimis": [4, 9, 22, 23, 24, 25, 26, 27, 28, 29, 30], "stochast": [22, 23, 24, 25, 26, 27, 28, 29, 30], "kingma": [22, 23, 24, 25, 26, 27, 28, 29, 30], "diederik": [22, 23, 24, 25, 26, 27, 28, 29, 30], "jimmi": [22, 23, 24, 25, 26, 27, 28, 29, 30], "ba": [22, 23, 24, 25, 26, 27, 28, 29, 30], "messag": [22, 23, 24, 25, 26, 27, 28, 29, 30], "stdout": [22, 23, 24, 25, 26, 27, 28, 29, 30], "bia": [22, 23, 24, 25, 26, 27, 28, 29, 30], "initialis": [22, 23, 24, 25, 26, 27, 28, 29, 30], "result": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "function": [0, 4, 8, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "train": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "wasserstein": [20, 21, 22, 23, 25, 26, 28, 33], "generalis": [15, 22, 23, 25, 26, 29, 30, 31, 32], "discrimin": [15, 22, 23, 24, 25, 26, 29, 30], "loui": [22, 23, 25, 26, 29, 30, 31], "ohl": [15, 22, 23, 25, 26, 29, 30, 31, 32], "pierr": [22, 23, 25, 26, 29, 30, 31], "alexandr": [22, 23, 25, 26, 29, 30, 31], "mattei": [15, 22, 23, 25, 26, 29, 30, 31, 32], "charl": [22, 23, 25, 26, 29, 30, 31], "bouveyron": [15, 22, 23, 25, 26, 29, 30, 31, 32], "warith": [22, 23, 25, 26, 29, 30, 31], "harchaoui": [15, 22, 23, 25, 26, 29, 30, 31, 32], "micka\u00ebl": [22, 23, 25, 26, 29, 30], "leclercq": [15, 22, 23, 25, 26, 29, 30, 31, 32], "arnaud": [22, 23, 25, 26, 29, 30, 31], "droit": [15, 22, 23, 25, 26, 29, 30, 31, 32], "freder": [22, 23, 25, 26, 29, 30, 31], "preciosio": [22, 23, 25, 26, 29, 30], "load_iri": [22, 23, 24, 25, 26, 29, 30, 32], "return_x_i": [22, 23, 24, 25, 26, 29, 30, 32], "6949190522657158": [], "attribut": [22, 23, 24, 25, 26, 27, 28, 29, 30], "w_": [22, 23, 24, 29], "b_": [22, 23, 24, 29], "bias": [22, 23, 24, 25, 26, 29, 30], "optimiser_": [22, 23, 24, 25, 26, 27, 28, 29, 30], "adamoptim": [22, 23, 24, 25, 26, 27, 28, 29, 30], "sgdoptim": [22, 23, 24, 25, 26, 27, 28, 29, 30], "algorithm": [8, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "chosen": [22, 23, 24, 25, 26, 27, 28, 29, 30], "labels_": [22, 23, 24, 25, 26, 27, 28, 29, 30], "label": [22, 23, 24, 25, 26, 27, 28, 29, 30], "were": [22, 23, 24, 25, 26, 27, 28, 29, 30], "n_iter_": [22, 23, 24, 25, 26, 27, 28, 29, 30], "took": [22, 23, 24, 25, 26, 27, 28, 29, 30], "converg": [22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "__init__": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "euclidean": [4, 8, 20, 21, 23, 26, 28, 33], "logisti": 23, "l2": [20, 21, 23, 26, 28], "l1": [20, 21, 23, 26, 28], "manhattan": [20, 21, 23, 26, 28], "cityblock": [20, 21, 23, 26, 28], "paired_dist": [20, 21, 23, 26, 28], "linearmmd": [23, 24, 29], "6509087196143133": [], "n_features_in": [23, 24], "reg": 24, "classic": [17, 24], "follow": [0, 4, 24, 31], "framework": 24, "describ": [24, 29, 30], "hyperparamet": 24, "maxim": [24, 29, 30], "ryan": 24, "gome": 24, "andrea": 24, "pietro": 24, "perona": 24, "00962912118121384": 24, "n_hidden_dim": [25, 26, 30], "two": [1, 11, 19, 21, 25, 26, 29, 32], "layer": [0, 25, 26, 29, 30, 33], "hidden": [0, 25, 26, 30, 33], "mlpwasserstein": [8, 25], "7592155845461592": [], "w1_": [25, 26, 30], "b1_": [25, 26, 30], "w2_": [25, 26, 30], "b2_": [25, 26, 30], "h_": [25, 26, 30], "after": [25, 26, 29, 30], "7615502432434385": [], "version": [4, 29, 30, 32, 33], "vanilla": [29, 30], "variat": [29, 30], "bring": [29, 30, 32], "constraint": [29, 30], "ensur": [29, 30], "via": 29, "proxim": [29, 30], "variou": [29, 30], "set": [22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33], "must": [17, 18, 19, 20, 21, 29, 30], "indic": [0, 4, 29, 30], "repres": [29, 30], "can": [0, 9, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33], "typic": [29, 30], "scheme": [29, 30], "lassonet": [29, 30, 32, 33], "architectur": [29, 30, 33], "lemhadri": [29, 30, 32], "ruan": [29, 30, 32], "abraham": [29, 30, 32], "tibshirani": [29, 30, 32], "r": [17, 18, 19, 20, 21, 29, 30, 32], "joint": [29, 30, 32, 33], "6940342321220005": 29, "skip": [30, 33], "connect": [30, 33], "inspir": [30, 32, 33], "2021": [30, 32], "hierarchi": 30, "coeffici": 30, "rel": 30, "strength": 30, "between": [1, 11, 17, 18, 19, 20, 21, 26, 30, 32, 33], "7664211836410726": [], "w_skip_": 30, "thank": 31, "you": [31, 32, 33], "check": [31, 32], "realli": 31, "pleasur": 31, "dedic": 31, "deriv": [17, 18, 19, 20, 21, 31, 32, 33], "theori": [31, 32], "allow": 31, "without": [29, 30, 31, 32], "hypothes": 31, "provid": [31, 32, 33], "overal": [0, 31], "small": [29, 30, 31], "start": [29, 30, 31], "user": [31, 32], "guid": [8, 31, 32], "api": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "tool": 31, "written": 31, "scikit": [31, 32], "compat": 31, "extens": [31, 33], "complet": [17, 31], "link": 31, "announc": 31, "instruct": 31, "pip": 31, "librari": [31, 33], "requir": [31, 33], "coupl": 31, "scientif": 31, "scipi": [4, 8, 31], "pot": 31, "If": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "work": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "cite": 31, "neurip": 31, "w": [15, 17, 18, 19, 20, 21, 31, 32], "precioso": [15, 31, 32], "2022": [15, 31, 32], "octob": [15, 31], "advanc": [15, 31, 32], "process": [15, 31, 32], "system": [15, 31, 32], "inproceed": 31, "ohl2022generalis": 31, "author": 31, "micka": 31, "booktitl": 31, "editor": 31, "alic": 31, "h": [31, 32], "oh": [31, 32], "alekh": 31, "agarw": [31, 32], "daniel": 31, "belgrav": [31, 32], "kyunghyun": 31, "cho": [31, 32], "year": 31, "url": 31, "http": 31, "openreview": 31, "net": 31, "forum": 31, "id": 31, "0oy3pia": 31, "adp": 31, "ha": [31, 32], "been": 31, "support": [27, 28, 31], "french": 31, "govern": 31, "3ia": 31, "c\u00f4te": 31, "d": [16, 31, 32], "azur": 31, "invest": 31, "futur": 31, "project": 31, "manag": 31, "nation": 31, "research": [31, 32], "agenc": 31, "anr": 31, "19": 31, "p3ia": 31, "0002": 31, "would": [8, 31], "also": 31, "franc": 31, "canada": 31, "fund": 31, "ffcr": 31, "contribut": 31, "partli": 31, "eu": 31, "horizon": 31, "2020": 31, "ai4media": 31, "contract": 31, "951911": 31, "mani": [4, 31], "jhonatan": 31, "torr": 31, "hi": 31, "insight": 31, "develop": 31, "short": 32, "descript": 32, "hint": 32, "about": 32, "For": [32, 33], "more": [32, 33], "detail": 32, "definit": [16, 32], "its": 32, "public": 32, "stand": 32, "novel": 32, "type": 32, "measur": 32, "distanc": [4, 8, 17, 18, 19, 20, 21, 32, 33], "custer": 32, "p_": [28, 32, 33], "theta": [32, 33], "v": [18, 19, 20, 21, 32], "mathbb": [17, 18, 19, 20, 21, 32], "_": [17, 18, 19, 20, 21, 32], "sim": [17, 18, 19, 20, 21, 32], "right": 32, "y_1": 32, "y_2": 32, "specif": [32, 33], "involv": 32, "bay": 32, "theorem": 32, "easili": 32, "tractabl": 32, "cane": 32, "valuat": 32, "henc": 32, "ani": [0, 17, 29, 30, 32, 33], "parametr": [1, 4, 11, 14, 27, 32], "assumpt": 32, "convent": [22, 23, 24, 25, 26, 27, 28, 29, 30, 32], "At": 32, "moment": 32, "report": 32, "fewer": 32, "than": [8, 29, 30, 32], "good": [29, 30, 32], "practic": 32, "sever": 32, "merg": 32, "avail": 32, "loss": 32, "your": 32, "own": 32, "further": 32, "improv": [29, 30, 32], "mainli": 32, "feel": 32, "interest": 32, "ed": 32, "machin": 32, "22": 32, "127": 32, "29": 32, "2023": [8, 32], "doi": 32, "48550": 32, "arxiv": 32, "2302": 32, "03391": 32, "both": 33, "present": [22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "mode": 33, "ad": 33, "constructor": 33, "achiev": 33, "howev": [0, 33], "regard": 33, "chose": 33, "becaus": [4, 8, 33], "yield": 33, "worst": 33, "space": [18, 19, 20, 21, 33], "comput": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "directli": [27, 28, 33], "pairwise_dist": [4, 8, 33], "same": 33, "manner": 33, "pairwise_kernel": 33, "By": 33, "made": [29, 30, 33], "choic": 33, "forc": 33, "usag": 33, "multi": 33, "perceptron": 33, "flexibl": 33, "yet": 33, "express": 33, "enough": 33, "term": 33, "case": [17, 18, 19, 20, 21, 33], "simpler": 33, "note": [4, 8, 33], "induc": 33, "anoth": 33, "_basemmd": 33, "_basewasserstein": 33, "rewrit": 33, "_infer": 33, "_get_weight": 33, "_init_param": 33, "includ": 33, "matrix": [4, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "ignor": [17, 18, 19, 20, 21], "Not": [], "self": [22, 23, 24, 25, 26, 27, 28, 29, 30], "estim": [22, 23, 24, 25, 26, 27, 28, 29, 30], "vector": [22, 23, 24, 25, 26, 27, 28, 29, 30], "get_param": [22, 23, 24, 25, 26, 27, 28, 29, 30], "deep": [22, 23, 24, 25, 26, 27, 28, 29, 30], "subobject": [22, 23, 24, 25, 26, 27, 28, 29, 30], "param": [22, 23, 24, 25, 26, 27, 28, 29, 30], "dict": [22, 23, 24, 25, 26, 27, 28, 29, 30], "name": [22, 23, 24, 25, 26, 27, 28, 29, 30], "classifi": [22, 23, 24, 25, 26, 27, 28, 29, 30], "closest": [22, 23, 24, 25, 26, 27, 28, 29, 30], "seen": [22, 23, 24, 25, 26, 27, 28, 29, 30], "order": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "given": [4, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "test": [22, 23, 24, 25, 26, 27, 28, 29, 30], "set_param": [22, 23, 24, 25, 26, 27, 28, 29, 30], "nest": [22, 23, 24, 25, 26, 27, 28, 29, 30], "pipelin": [22, 23, 24, 25, 26, 27, 28, 29, 30], "latter": [22, 23, 24, 25, 26, 27, 28, 29, 30], "have": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30], "__": [22, 23, 24, 25, 26, 27, 28, 29, 30], "possibl": [22, 23, 24, 25, 26, 27, 28, 29, 30], "path": [4, 8, 29, 30], "alpha_multipli": [29, 30], "min_featur": [29, 30], "restore_best_weight": [29, 30], "early_stopping_factor": [29, 30], "99": [29, 30], "max_pati": [29, 30], "unfold": [29, 30], "geometr": [29, 30], "remain": [29, 30], "specifi": [4, 29, 30], "amount": [29, 30], "histori": [29, 30], "differ": [29, 30], "kept": [29, 30], "certain": [29, 30], "percentag": [29, 30], "reduct": [29, 30], "retrain": [29, 30], "greater": [29, 30], "stop": [29, 30], "minim": [29, 30], "deem": [29, 30], "offer": [29, 30], "simultan": [29, 30], "few": [29, 30], "restor": [29, 30], "factor": [29, 30], "beyond": [29, 30], "upgrad": [29, 30], "too": [29, 30], "earli": [29, 30], "wait": [29, 30], "either": [17, 18, 19, 20, 21, 29, 30], "befor": [29, 30], "length": [29, 30], "sequenti": [29, 30], "group_penalti": [29, 30], "interlac": [1, 11, 26], "moon": [1, 11, 26], "7282620220807194": [], "030230878584606": [], "7272077907261454": [], "8850280359097036": [], "013": [], "162": [], "302727838541685": [], "333": [], "gstm": 6, "batch_siz": [6, 22, 23, 24, 25, 26, 29, 30], "762": [], "655": [], "face": 8, "To": [4, 8], "trick": 8, "precomput": [4, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "desir": 8, "abl": 8, "csgraph": [4, 8], "make_moon": 8, "nois": 8, "adjac": [4, 8], "graph": [1, 8, 9, 11, 14, 28], "edg": 8, "defin": [8, 18, 19, 20, 21], "less": 8, "quantil": 8, "pair": [4, 8], "shortest": [4, 8], "floyd_warshal": [4, 8], "direct": [4, 8], "unweight": [4, 8], "replac": [4, 8], "inf": [4, 8], "isinf": [4, 8], "cm": 8, "spectral": 8, "off": 8, "372": [], "plot_moon_clust": [8, 11], "305": [], "06": 11, "000": [], "500": 15, "articl": 15, "locat": [0, 15], "posit": [4, 16], "semi": 16, "spread": 16, "batch": [22, 23, 24, 25, 26, 27, 28, 29, 30], "whole": [22, 23, 24, 25, 26, 29, 30], "affin": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "construct": [22, 23, 24, 25, 26, 27, 28, 29, 30], "otherwis": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "get_select": [29, 30], "retriev": [29, 30], "ind": [29, 30], "basic": 0, "condit": [0, 17, 18, 19, 20, 21, 27, 28], "These": 0, "standard": 0, "hyper": 0, "underli": 0, "cannot": 0, "unseen": 0, "remov": 0, "thei": 0, "subset": 0, "enhanc": 0, "interpret": 0, "synthet": 0, "node": [1, 9, 11, 14, 28], "nonparametr": [1, 9, 11, 14], "730431446195362": 2, "0285492563142027": 2, "7256943306827823": 2, "8752937655453139": 2, "323": [2, 11], "5235047290982509": 3, "6299622724113934": 3, "466966045170254": 3, "17": [3, 11], "247": [3, 11], "simplifi": 4, "latent": 4, "procedur": 4, "associ": 4, "adequ": 4, "ident": 4, "itertool": 4, "categoricalwasserstein": 4, "draw_gmm": [4, 9], "edge_prob": 4, "exp": 4, "adjacency_matrix": 4, "j": 4, "make": 4, "symmetr": [4, 17, 18, 19, 20, 21], "custom": 4, "argument": 4, "1789": [4, 9], "dummi": 4, "unnecessari": 4, "There": 4, "index": 4, "match": 4, "node_i": 4, "node_j": 4, "grai": 4, "linewidth": 4, "ari_scor": [4, 9], "gemini_scor": [4, 9], "3f": [4, 9], "977": 4, "141": 4, "003": [4, 11], "plot_graph_node_clust": [4, 11], "311179979944961": 5, "5884698387322587": 5, "4296228548590328": 5, "640": [5, 11], "106": [6, 11], "776": [7, 11], "394": [8, 11], "illustr": 9, "categoricalmmd": 9, "975": 9, "328": 9, "444": [9, 11], "plot_nonparametric_clust": [9, 11], "346": [10, 11], "09": 11, "epsilon": [17, 18, 19, 20, 21], "mathcal": [17, 18, 19, 20, 21], "d_": 17, "ext": [17, 18, 19], "kl": 17, "precis": [17, 18, 19, 20, 21], "clip": [17, 18, 19, 20, 21], "avoid": [17, 18, 19, 20, 21], "numer": [17, 18, 19, 20, 21], "instabl": [17, 18, 19, 20, 21], "compute_affin": [17, 18, 19, 20, 21], "doe": [17, 27, 28], "need": [17, 18, 19, 20, 21], "return_grad": [17, 18, 19, 20, 21], "context": [17, 18, 19, 20, 21], "per": [17, 18, 19, 20, 21], "nabla_": [17, 18, 19, 20, 21], "discrep": [18, 19], "kappa": [18, 19], "y_a": [19, 21], "y_b": [19, 21], "delta": [20, 21], "6949190522657067": 22, "get_gemini": [22, 23, 24, 25, 26, 27, 28, 29, 30], "6993348362264595": 23, "7592155845461646": 25, "7636482655127903": 26, "x_i": [27, 28], "theta_": [27, 28], "ki": [27, 28], "contrarili": [27, 28], "part": [27, 28], "766421183641077": 30}, "objects": {"gemclus.data": [[12, 0, 1, "", "celeux_one"], [13, 0, 1, "", "celeux_two"], [14, 0, 1, "", "draw_gmm"], [15, 0, 1, "", "gstm"], [16, 0, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[17, 1, 1, "", "MI"], [18, 1, 1, "", "MMDOvA"], [19, 1, 1, "", "MMDOvO"], [20, 1, 1, "", "WassersteinOvA"], [21, 1, 1, "", "WassersteinOvO"]], "gemclus.gemini.MI": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "compute_affinity"], [17, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvA": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "compute_affinity"], [18, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvO": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "compute_affinity"], [19, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvA": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "compute_affinity"], [20, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvO": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "compute_affinity"], [21, 2, 1, "", "evaluate"]], "gemclus.linear": [[22, 1, 1, "", "LinearMMD"], [23, 1, 1, "", "LinearWasserstein"], [24, 1, 1, "", "RIM"]], "gemclus.linear.LinearMMD": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "fit"], [22, 2, 1, "", "fit_predict"], [22, 2, 1, "", "get_gemini"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "predict"], [22, 2, 1, "", "predict_proba"], [22, 2, 1, "", "score"], [22, 2, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "fit"], [23, 2, 1, "", "fit_predict"], [23, 2, 1, "", "get_gemini"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "predict"], [23, 2, 1, "", "predict_proba"], [23, 2, 1, "", "score"], [23, 2, 1, "", "set_params"]], "gemclus.linear.RIM": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "fit"], [24, 2, 1, "", "fit_predict"], [24, 2, 1, "", "get_gemini"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "predict"], [24, 2, 1, "", "predict_proba"], [24, 2, 1, "", "score"], [24, 2, 1, "", "set_params"]], "gemclus.mlp": [[25, 1, 1, "", "MLPMMD"], [26, 1, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "fit"], [25, 2, 1, "", "fit_predict"], [25, 2, 1, "", "get_gemini"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "predict"], [25, 2, 1, "", "predict_proba"], [25, 2, 1, "", "score"], [25, 2, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "fit"], [26, 2, 1, "", "fit_predict"], [26, 2, 1, "", "get_gemini"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "predict"], [26, 2, 1, "", "predict_proba"], [26, 2, 1, "", "score"], [26, 2, 1, "", "set_params"]], "gemclus.nonparametric": [[27, 1, 1, "", "CategoricalMMD"], [28, 1, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "fit"], [27, 2, 1, "", "fit_predict"], [27, 2, 1, "", "get_gemini"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "predict"], [27, 2, 1, "", "predict_proba"], [27, 2, 1, "", "score"], [27, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "fit_predict"], [28, 2, 1, "", "get_gemini"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "predict_proba"], [28, 2, 1, "", "score"], [28, 2, 1, "", "set_params"]], "gemclus.sparse": [[29, 1, 1, "", "SparseLinearMMD"], [30, 1, 1, "", "SparseMLPMMD"]], "gemclus.sparse.SparseLinearMMD": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "fit_predict"], [29, 2, 1, "", "get_gemini"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "get_selection"], [29, 2, 1, "", "path"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "predict_proba"], [29, 2, 1, "", "score"], [29, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "fit_predict"], [30, 2, 1, "", "get_gemini"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "get_selection"], [30, 2, 1, "", "path"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "predict_proba"], [30, 2, 1, "", "score"], [30, 2, 1, "", "set_params"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"gemclu": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "api": 0, "cluster": [0, 2, 3, 4, 6, 7, 8, 9, 10, 31, 32], "model": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10], "dens": 0, "spars": [0, 2, 3, 29, 30], "dataset": [0, 2, 3, 5, 10], "gener": [0, 1, 6, 7, 8], "exampl": [1, 6, 7, 12, 14, 15, 23, 24, 25, 26, 27, 28, 29, 30, 33], "basic": [1, 33], "gemini": [0, 1, 7, 17, 18, 19, 20, 21, 31, 32, 33], "featur": [2, 3, 5, 32], "select": [2, 3, 5, 32], "us": [2, 3, 12, 14, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31], "mmd": [2, 3, 7], "ovo": 2, "logist": [2, 10], "regress": [2, 10], "load": [2, 3, 5, 10], "simpl": [2, 3, 5, 10], "synthet": [2, 3, 5, 10], "train": [2, 3, 4, 5, 6, 8, 9, 10], "path": [2, 3, 5], "result": [2, 3, 5], "final": [2, 3, 4, 6, 7, 8, 9, 10], "ova": 3, "mlp": [3, 7, 25, 26], "group": 5, "linear": [5, 22, 23, 24], "decis": [6, 8], "boundari": [6, 8], "map": 6, "mixtur": 6, "gaussian": 6, "low": 6, "degre": 6, "student": 6, "distribut": [6, 33], "data": [6, 7, 12, 13, 14, 15, 16], "an": 7, "introduc": 7, "creat": [4, 7], "fit": 7, "plot": 7, "rim": [10, 24], "comput": [4, 8, 11], "time": 11, "celeux_on": 12, "celeux_two": 13, "draw_gmm": 14, "linearmmd": 22, "linearwasserstein": 23, "mlpmmd": 25, "mlpwasserstein": 26, "sparselinearmmd": 29, "sparsemlpmmd": 30, "welcom": 31, "document": 31, "content": [31, 33], "A": 31, "packag": [31, 33], "discrimin": [31, 32, 33], "instal": 31, "refer": [31, 32], "acknowledg": 31, "quick": 32, "start": 32, "what": [32, 33], "i": 32, "do": 32, "user": 33, "guid": 33, "which": 33, "ar": 33, "implement": 33, "avail": 33, "return": [], "draw": [4, 8, 9], "between": [4, 8], "two": 8, "interlac": 8, "moon": 8, "pre": [4, 8], "specif": [4, 8], "metric": [4, 8], "sampl": [4, 8, 9], "gstm": 15, "multivariate_student_t": 16, "score": 0, "nonparametr": [0, 4, 27, 28], "graph": 4, "node": 4, "from": [4, 9], "gmm": [4, 9], "edg": 4, "non": 9, "parametr": 9, "mi": 17, "mmdova": 18, "mmdovo": 19, "wassersteinova": 20, "wassersteinovo": 21, "categoricalmmd": 27, "categoricalwasserstein": 28}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"GEMCLUS API": [[0, "gemclus-api"]], "Scoring with GEMINI": [[0, "scoring-with-gemini"]], "Clustering models": [[0, "clustering-models"]], "Dense models": [[0, "dense-models"]], "Nonparametric models": [[0, "nonparametric-models"]], "Sparse models": [[0, "sparse-models"]], "Dataset generation": [[0, "dataset-generation"]], "General examples": [[1, "general-examples"]], "Basic GEMINI": [[1, "basic-gemini"]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[2, "feature-selection-using-the-sparse-mmd-ovo-logistic-regression"]], "Load a simple synthetic dataset": [[2, "load-a-simple-synthetic-dataset"], [3, "load-a-simple-synthetic-dataset"], [5, "load-a-simple-synthetic-dataset"], [10, "load-a-simple-synthetic-dataset"]], "Train the model": [[2, "train-the-model"], [3, "train-the-model"], [4, "train-the-model"], [5, "train-the-model"], [8, "train-the-model"], [9, "train-the-model"], [10, "train-the-model"]], "Path results": [[2, "path-results"], [3, "path-results"], [5, "path-results"]], "Final Clustering": [[2, "final-clustering"], [3, "final-clustering"], [4, "final-clustering"], [6, "final-clustering"], [8, "final-clustering"], [9, "final-clustering"], [10, "final-clustering"]], "Feature selection using the Sparse MMD OvA (MLP)": [[3, "feature-selection-using-the-sparse-mmd-ova-mlp"]], "Graph node clustering with a nonparametric model": [[4, "graph-node-clustering-with-a-nonparametric-model"]], "Draw samples from a GMM": [[4, "draw-samples-from-a-gmm"], [9, "draw-samples-from-a-gmm"]], "Create the graph edges": [[4, "create-the-graph-edges"]], "Pre-compute a specific metric between samples": [[4, "pre-compute-a-specific-metric-between-samples"], [8, "pre-compute-a-specific-metric-between-samples"]], "Grouped Feature selection with a linear model": [[5, "grouped-feature-selection-with-a-linear-model"]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[6, "example-of-decision-boundary-map-for-a-mixture-of-gaussian-and-low-degree-student-distributions"]], "Generate the data": [[6, "generate-the-data"]], "Train the model for clustering": [[6, "train-the-model-for-clustering"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[7, "an-introducing-example-to-clustering-with-an-mlp-and-the-mmd-gemini"]], "Generate data": [[7, "generate-data"]], "Create the MLP clustering model and fit it": [[7, "create-the-mlp-clustering-model-and-fit-it"]], "Plot the final clustering": [[7, "plot-the-final-clustering"]], "Drawing a decision boundary between two interlacing moons": [[8, "drawing-a-decision-boundary-between-two-interlacing-moons"]], "Generate two interlacing moons": [[8, "generate-two-interlacing-moons"]], "Non parametric clustering": [[9, "non-parametric-clustering"]], "Simple logistic regression with RIM": [[10, "simple-logistic-regression-with-rim"]], "Computation times": [[11, "computation-times"]], "gemclus.data.celeux_one": [[12, "gemclus-data-celeux-one"]], "Examples using gemclus.data.celeux_one": [[12, "examples-using-gemclus-data-celeux-one"]], "gemclus.data.celeux_two": [[13, "gemclus-data-celeux-two"]], "gemclus.data.draw_gmm": [[14, "gemclus-data-draw-gmm"]], "Examples using gemclus.data.draw_gmm": [[14, "examples-using-gemclus-data-draw-gmm"]], "gemclus.data.gstm": [[15, "gemclus-data-gstm"]], "Examples using gemclus.data.gstm": [[15, "examples-using-gemclus-data-gstm"]], "gemclus.data.multivariate_student_t": [[16, "gemclus-data-multivariate-student-t"]], "gemclus.gemini.MI": [[17, "gemclus-gemini-mi"]], "gemclus.gemini.MMDOvA": [[18, "gemclus-gemini-mmdova"]], "gemclus.gemini.MMDOvO": [[19, "gemclus-gemini-mmdovo"]], "gemclus.gemini.WassersteinOvA": [[20, "gemclus-gemini-wassersteinova"]], "gemclus.gemini.WassersteinOvO": [[21, "gemclus-gemini-wassersteinovo"]], "gemclus.linear.LinearMMD": [[22, "gemclus-linear-linearmmd"]], "gemclus.linear.LinearWasserstein": [[23, "gemclus-linear-linearwasserstein"]], "Examples using gemclus.linear.LinearWasserstein": [[23, "examples-using-gemclus-linear-linearwasserstein"]], "gemclus.linear.RIM": [[24, "gemclus-linear-rim"]], "Examples using gemclus.linear.RIM": [[24, "examples-using-gemclus-linear-rim"]], "gemclus.mlp.MLPMMD": [[25, "gemclus-mlp-mlpmmd"]], "Examples using gemclus.mlp.MLPMMD": [[25, "examples-using-gemclus-mlp-mlpmmd"]], "gemclus.mlp.MLPWasserstein": [[26, "gemclus-mlp-mlpwasserstein"]], "Examples using gemclus.mlp.MLPWasserstein": [[26, "examples-using-gemclus-mlp-mlpwasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[27, "gemclus-nonparametric-categoricalmmd"]], "Examples using gemclus.nonparametric.CategoricalMMD": [[27, "examples-using-gemclus-nonparametric-categoricalmmd"]], "gemclus.nonparametric.CategoricalWasserstein": [[28, "gemclus-nonparametric-categoricalwasserstein"]], "Examples using gemclus.nonparametric.CategoricalWasserstein": [[28, "examples-using-gemclus-nonparametric-categoricalwasserstein"]], "gemclus.sparse.SparseLinearMMD": [[29, "gemclus-sparse-sparselinearmmd"]], "Examples using gemclus.sparse.SparseLinearMMD": [[29, "examples-using-gemclus-sparse-sparselinearmmd"]], "gemclus.sparse.SparseMLPMMD": [[30, "gemclus-sparse-sparsemlpmmd"]], "Examples using gemclus.sparse.SparseMLPMMD": [[30, "examples-using-gemclus-sparse-sparsemlpmmd"]], "Welcome to GemClus documentation!": [[31, "welcome-to-gemclus-documentation"]], "Contents": [[31, "contents"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[31, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "Installation": [[31, "installation"]], "Reference": [[31, "reference"]], "Acknowledgements": [[31, "acknowledgements"]], "Quick start on gemclus": [[32, "quick-start-on-gemclus"]], "What is GEMINI": [[32, "what-is-gemini"]], "Doing discriminative clustering": [[32, "doing-discriminative-clustering"]], "Selecting features in clustering": [[32, "selecting-features-in-clustering"]], "References": [[32, "references"]], "User Guide": [[33, "user-guide"]], "Content of the package": [[33, "content-of-the-package"]], "Which GEMINIs are implemented": [[33, "which-geminis-are-implemented"]], "What discriminative distributions are available": [[33, "what-discriminative-distributions-are-available"]], "Basic examples": [[33, "basic-examples"]]}, "indexentries": {"celeux_one() (in module gemclus.data)": [[12, "gemclus.data.celeux_one"]], "celeux_two() (in module gemclus.data)": [[13, "gemclus.data.celeux_two"]], "draw_gmm() (in module gemclus.data)": [[14, "gemclus.data.draw_gmm"]], "gstm() (in module gemclus.data)": [[15, "gemclus.data.gstm"]], "multivariate_student_t() (in module gemclus.data)": [[16, "gemclus.data.multivariate_student_t"]], "mi (class in gemclus.gemini)": [[17, "gemclus.gemini.MI"]], "__init__() (gemclus.gemini.mi method)": [[17, "gemclus.gemini.MI.__init__"]], "compute_affinity() (gemclus.gemini.mi method)": [[17, "gemclus.gemini.MI.compute_affinity"]], "evaluate() (gemclus.gemini.mi method)": [[17, "gemclus.gemini.MI.evaluate"]], "mmdova (class in gemclus.gemini)": [[18, "gemclus.gemini.MMDOvA"]], "__init__() (gemclus.gemini.mmdova method)": [[18, "gemclus.gemini.MMDOvA.__init__"]], "compute_affinity() (gemclus.gemini.mmdova method)": [[18, "gemclus.gemini.MMDOvA.compute_affinity"]], "evaluate() (gemclus.gemini.mmdova method)": [[18, "gemclus.gemini.MMDOvA.evaluate"]], "mmdovo (class in gemclus.gemini)": [[19, "gemclus.gemini.MMDOvO"]], "__init__() (gemclus.gemini.mmdovo method)": [[19, "gemclus.gemini.MMDOvO.__init__"]], "compute_affinity() (gemclus.gemini.mmdovo method)": [[19, "gemclus.gemini.MMDOvO.compute_affinity"]], "evaluate() (gemclus.gemini.mmdovo method)": [[19, "gemclus.gemini.MMDOvO.evaluate"]], "wassersteinova (class in gemclus.gemini)": [[20, "gemclus.gemini.WassersteinOvA"]], "__init__() (gemclus.gemini.wassersteinova method)": [[20, "gemclus.gemini.WassersteinOvA.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinova method)": [[20, "gemclus.gemini.WassersteinOvA.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinova method)": [[20, "gemclus.gemini.WassersteinOvA.evaluate"]], "wassersteinovo (class in gemclus.gemini)": [[21, "gemclus.gemini.WassersteinOvO"]], "__init__() (gemclus.gemini.wassersteinovo method)": [[21, "gemclus.gemini.WassersteinOvO.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinovo method)": [[21, "gemclus.gemini.WassersteinOvO.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinovo method)": [[21, "gemclus.gemini.WassersteinOvO.evaluate"]], "linearmmd (class in gemclus.linear)": [[22, "gemclus.linear.LinearMMD"]], "__init__() (gemclus.linear.linearmmd method)": [[22, "gemclus.linear.LinearMMD.__init__"]], "fit() (gemclus.linear.linearmmd method)": [[22, "gemclus.linear.LinearMMD.fit"]], "fit_predict() (gemclus.linear.linearmmd method)": [[22, "gemclus.linear.LinearMMD.fit_predict"]], "get_gemini() (gemclus.linear.linearmmd method)": [[22, "gemclus.linear.LinearMMD.get_gemini"]], "get_params() (gemclus.linear.linearmmd method)": [[22, "gemclus.linear.LinearMMD.get_params"]], "predict() (gemclus.linear.linearmmd method)": [[22, "gemclus.linear.LinearMMD.predict"]], "predict_proba() (gemclus.linear.linearmmd method)": [[22, "gemclus.linear.LinearMMD.predict_proba"]], "score() (gemclus.linear.linearmmd method)": [[22, "gemclus.linear.LinearMMD.score"]], "set_params() (gemclus.linear.linearmmd method)": [[22, "gemclus.linear.LinearMMD.set_params"]], "linearwasserstein (class in gemclus.linear)": [[23, "gemclus.linear.LinearWasserstein"]], "__init__() (gemclus.linear.linearwasserstein method)": [[23, "gemclus.linear.LinearWasserstein.__init__"]], "fit() (gemclus.linear.linearwasserstein method)": [[23, "gemclus.linear.LinearWasserstein.fit"]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[23, "gemclus.linear.LinearWasserstein.fit_predict"]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[23, "gemclus.linear.LinearWasserstein.get_gemini"]], "get_params() (gemclus.linear.linearwasserstein method)": [[23, "gemclus.linear.LinearWasserstein.get_params"]], "predict() (gemclus.linear.linearwasserstein method)": [[23, "gemclus.linear.LinearWasserstein.predict"]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[23, "gemclus.linear.LinearWasserstein.predict_proba"]], "score() (gemclus.linear.linearwasserstein method)": [[23, "gemclus.linear.LinearWasserstein.score"]], "set_params() (gemclus.linear.linearwasserstein method)": [[23, "gemclus.linear.LinearWasserstein.set_params"]], "rim (class in gemclus.linear)": [[24, "gemclus.linear.RIM"]], "__init__() (gemclus.linear.rim method)": [[24, "gemclus.linear.RIM.__init__"]], "fit() (gemclus.linear.rim method)": [[24, "gemclus.linear.RIM.fit"]], "fit_predict() (gemclus.linear.rim method)": [[24, "gemclus.linear.RIM.fit_predict"]], "get_gemini() (gemclus.linear.rim method)": [[24, "gemclus.linear.RIM.get_gemini"]], "get_params() (gemclus.linear.rim method)": [[24, "gemclus.linear.RIM.get_params"]], "predict() (gemclus.linear.rim method)": [[24, "gemclus.linear.RIM.predict"]], "predict_proba() (gemclus.linear.rim method)": [[24, "gemclus.linear.RIM.predict_proba"]], "score() (gemclus.linear.rim method)": [[24, "gemclus.linear.RIM.score"]], "set_params() (gemclus.linear.rim method)": [[24, "gemclus.linear.RIM.set_params"]], "mlpmmd (class in gemclus.mlp)": [[25, "gemclus.mlp.MLPMMD"]], "__init__() (gemclus.mlp.mlpmmd method)": [[25, "gemclus.mlp.MLPMMD.__init__"]], "fit() (gemclus.mlp.mlpmmd method)": [[25, "gemclus.mlp.MLPMMD.fit"]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[25, "gemclus.mlp.MLPMMD.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[25, "gemclus.mlp.MLPMMD.get_gemini"]], "get_params() (gemclus.mlp.mlpmmd method)": [[25, "gemclus.mlp.MLPMMD.get_params"]], "predict() (gemclus.mlp.mlpmmd method)": [[25, "gemclus.mlp.MLPMMD.predict"]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[25, "gemclus.mlp.MLPMMD.predict_proba"]], "score() (gemclus.mlp.mlpmmd method)": [[25, "gemclus.mlp.MLPMMD.score"]], "set_params() (gemclus.mlp.mlpmmd method)": [[25, "gemclus.mlp.MLPMMD.set_params"]], "mlpwasserstein (class in gemclus.mlp)": [[26, "gemclus.mlp.MLPWasserstein"]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[26, "gemclus.mlp.MLPWasserstein.__init__"]], "fit() (gemclus.mlp.mlpwasserstein method)": [[26, "gemclus.mlp.MLPWasserstein.fit"]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[26, "gemclus.mlp.MLPWasserstein.fit_predict"]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[26, "gemclus.mlp.MLPWasserstein.get_gemini"]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[26, "gemclus.mlp.MLPWasserstein.get_params"]], "predict() (gemclus.mlp.mlpwasserstein method)": [[26, "gemclus.mlp.MLPWasserstein.predict"]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[26, "gemclus.mlp.MLPWasserstein.predict_proba"]], "score() (gemclus.mlp.mlpwasserstein method)": [[26, "gemclus.mlp.MLPWasserstein.score"]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[26, "gemclus.mlp.MLPWasserstein.set_params"]], "categoricalmmd (class in gemclus.nonparametric)": [[27, "gemclus.nonparametric.CategoricalMMD"]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[27, "gemclus.nonparametric.CategoricalMMD.__init__"]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[27, "gemclus.nonparametric.CategoricalMMD.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[27, "gemclus.nonparametric.CategoricalMMD.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[27, "gemclus.nonparametric.CategoricalMMD.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[27, "gemclus.nonparametric.CategoricalMMD.get_params"]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[27, "gemclus.nonparametric.CategoricalMMD.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[27, "gemclus.nonparametric.CategoricalMMD.predict_proba"]], "score() (gemclus.nonparametric.categoricalmmd method)": [[27, "gemclus.nonparametric.CategoricalMMD.score"]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[27, "gemclus.nonparametric.CategoricalMMD.set_params"]], "categoricalwasserstein (class in gemclus.nonparametric)": [[28, "gemclus.nonparametric.CategoricalWasserstein"]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[28, "gemclus.nonparametric.CategoricalWasserstein.__init__"]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[28, "gemclus.nonparametric.CategoricalWasserstein.fit"]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[28, "gemclus.nonparametric.CategoricalWasserstein.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[28, "gemclus.nonparametric.CategoricalWasserstein.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[28, "gemclus.nonparametric.CategoricalWasserstein.get_params"]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[28, "gemclus.nonparametric.CategoricalWasserstein.predict"]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[28, "gemclus.nonparametric.CategoricalWasserstein.predict_proba"]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[28, "gemclus.nonparametric.CategoricalWasserstein.score"]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[28, "gemclus.nonparametric.CategoricalWasserstein.set_params"]], "sparselinearmmd (class in gemclus.sparse)": [[29, "gemclus.sparse.SparseLinearMMD"]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[29, "gemclus.sparse.SparseLinearMMD.__init__"]], "fit() (gemclus.sparse.sparselinearmmd method)": [[29, "gemclus.sparse.SparseLinearMMD.fit"]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[29, "gemclus.sparse.SparseLinearMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[29, "gemclus.sparse.SparseLinearMMD.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[29, "gemclus.sparse.SparseLinearMMD.get_params"]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[29, "gemclus.sparse.SparseLinearMMD.get_selection"]], "path() (gemclus.sparse.sparselinearmmd method)": [[29, "gemclus.sparse.SparseLinearMMD.path"]], "predict() (gemclus.sparse.sparselinearmmd method)": [[29, "gemclus.sparse.SparseLinearMMD.predict"]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[29, "gemclus.sparse.SparseLinearMMD.predict_proba"]], "score() (gemclus.sparse.sparselinearmmd method)": [[29, "gemclus.sparse.SparseLinearMMD.score"]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[29, "gemclus.sparse.SparseLinearMMD.set_params"]], "sparsemlpmmd (class in gemclus.sparse)": [[30, "gemclus.sparse.SparseMLPMMD"]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[30, "gemclus.sparse.SparseMLPMMD.__init__"]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[30, "gemclus.sparse.SparseMLPMMD.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[30, "gemclus.sparse.SparseMLPMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[30, "gemclus.sparse.SparseMLPMMD.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[30, "gemclus.sparse.SparseMLPMMD.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[30, "gemclus.sparse.SparseMLPMMD.get_selection"]], "path() (gemclus.sparse.sparsemlpmmd method)": [[30, "gemclus.sparse.SparseMLPMMD.path"]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[30, "gemclus.sparse.SparseMLPMMD.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[30, "gemclus.sparse.SparseMLPMMD.predict_proba"]], "score() (gemclus.sparse.sparsemlpmmd method)": [[30, "gemclus.sparse.SparseMLPMMD.score"]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[30, "gemclus.sparse.SparseMLPMMD.set_params"]]}})