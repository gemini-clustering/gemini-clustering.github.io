Search.setIndex({"docnames": ["api", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_feature_selection_linear", "auto_examples/feature_selection/plot_feature_selection_logreg_mi", "auto_examples/feature_selection/plot_feature_selection_mlp", "auto_examples/feature_selection/plot_grouped_selection", "auto_examples/feature_selection/sg_execution_times", "auto_examples/index", "auto_examples/mlcl/index", "auto_examples/mlcl/plot_semi_supervised_consensus", "auto_examples/mlcl/sg_execution_times", "auto_examples/plot_circles", "auto_examples/plot_custom_model", "auto_examples/plot_graph_node_clustering", "auto_examples/plot_gstm", "auto_examples/plot_intro_mlp_mmd", "auto_examples/plot_moon_clustering", "auto_examples/plot_nonparametric_clustering", "auto_examples/plot_rim", "auto_examples/scoring/index", "auto_examples/scoring/plot_gemini_scoring", "auto_examples/scoring/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/trees/index", "auto_examples/trees/plot_douglas_example", "auto_examples/trees/plot_kauri_example", "auto_examples/trees/sg_execution_times", "generated/gemclus.add_mlcl_constraint", "generated/gemclus.data.celeux_one", "generated/gemclus.data.celeux_two", "generated/gemclus.data.draw_gmm", "generated/gemclus.data.gstm", "generated/gemclus.data.multivariate_student_t", "generated/gemclus.gemini.MI", "generated/gemclus.gemini.MMDOvA", "generated/gemclus.gemini.MMDOvO", "generated/gemclus.gemini.WassersteinOvA", "generated/gemclus.gemini.WassersteinOvO", "generated/gemclus.linear.LinearMMD", "generated/gemclus.linear.LinearWasserstein", "generated/gemclus.linear.RIM", "generated/gemclus.mlp.MLPMMD", "generated/gemclus.mlp.MLPWasserstein", "generated/gemclus.nonparametric.CategoricalMMD", "generated/gemclus.nonparametric.CategoricalWasserstein", "generated/gemclus.sparse.SparseLinearMI", "generated/gemclus.sparse.SparseLinearMMD", "generated/gemclus.sparse.SparseMLPMMD", "generated/gemclus.tree.Douglas", "generated/gemclus.tree.Kauri", "generated/gemclus.tree.print_kauri_tree", "index", "quick_start", "user_guide"], "filenames": ["api.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_feature_selection_linear.rst", "auto_examples/feature_selection/plot_feature_selection_logreg_mi.rst", "auto_examples/feature_selection/plot_feature_selection_mlp.rst", "auto_examples/feature_selection/plot_grouped_selection.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/mlcl/index.rst", "auto_examples/mlcl/plot_semi_supervised_consensus.rst", "auto_examples/mlcl/sg_execution_times.rst", "auto_examples/plot_circles.rst", "auto_examples/plot_custom_model.rst", "auto_examples/plot_graph_node_clustering.rst", "auto_examples/plot_gstm.rst", "auto_examples/plot_intro_mlp_mmd.rst", "auto_examples/plot_moon_clustering.rst", "auto_examples/plot_nonparametric_clustering.rst", "auto_examples/plot_rim.rst", "auto_examples/scoring/index.rst", "auto_examples/scoring/plot_gemini_scoring.rst", "auto_examples/scoring/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/trees/index.rst", "auto_examples/trees/plot_douglas_example.rst", "auto_examples/trees/plot_kauri_example.rst", "auto_examples/trees/sg_execution_times.rst", "generated/gemclus.add_mlcl_constraint.rst", "generated/gemclus.data.celeux_one.rst", "generated/gemclus.data.celeux_two.rst", "generated/gemclus.data.draw_gmm.rst", "generated/gemclus.data.gstm.rst", "generated/gemclus.data.multivariate_student_t.rst", "generated/gemclus.gemini.MI.rst", "generated/gemclus.gemini.MMDOvA.rst", "generated/gemclus.gemini.MMDOvO.rst", "generated/gemclus.gemini.WassersteinOvA.rst", "generated/gemclus.gemini.WassersteinOvO.rst", "generated/gemclus.linear.LinearMMD.rst", "generated/gemclus.linear.LinearWasserstein.rst", "generated/gemclus.linear.RIM.rst", "generated/gemclus.mlp.MLPMMD.rst", "generated/gemclus.mlp.MLPWasserstein.rst", "generated/gemclus.nonparametric.CategoricalMMD.rst", "generated/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/gemclus.sparse.SparseLinearMI.rst", "generated/gemclus.sparse.SparseLinearMMD.rst", "generated/gemclus.sparse.SparseMLPMMD.rst", "generated/gemclus.tree.Douglas.rst", "generated/gemclus.tree.Kauri.rst", "generated/gemclus.tree.print_kauri_tree.rst", "index.rst", "quick_start.rst", "user_guide.rst"], "titles": ["GEMCLUS API", "Feature selection", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse Linear MI (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Grouped Feature selection with a linear model", "Computation times", "General examples", "Consensus clustering", "Consensus clustering with linking constraints on sample pairs", "Computation times", "Comparative clustering of circles dataset with kernel change", "Extending GemClus to build your own discriminative clustering model", "Graph node clustering with a nonparametric model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Scoring with GEMINI", "Scoring any model with GEMINI", "Computation times", "Computation times", "Trees", "Building a differentiable unsupervised tree: DOUGLAS", "Building an unsupervised tree with kernel-kmeans objective: KAURI", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.add_mlcl_constraint", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Douglas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Kauri", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.print_kauri_tree", "Welcome to GemClus documentation!", "Quick start on gemclus", "User guide : contents"], "terms": {"The": [0, 2, 3, 4, 5, 9, 12, 20, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "packag": [0, 52], "current": [0, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 53], "contain": [0, 30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "simpl": [0, 7, 9, 11, 12, 13, 17, 22, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53], "mlp": [0, 1, 6, 7, 11, 14, 16, 22, 47, 52], "logist": [0, 1, 4, 5, 6, 7, 12, 20, 22, 28, 38, 39, 40, 45, 46, 47, 53], "regress": [0, 1, 4, 5, 6, 7, 12, 20, 22, 28, 38, 39, 40, 45, 46, 47, 53], "all": [0, 2, 3, 4, 5, 7, 9, 12, 13, 16, 20, 27, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53], "featur": [0, 6, 14, 15, 18, 24, 28, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53], "well": [0, 11, 14, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53], "sparsiti": [0, 47, 52, 53], "constrain": [0, 5, 9, 53], "variant": 0, "follow": [0, 12, 13, 40, 51], "class": [0, 9, 12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53], "implement": [0, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 48, 49, 51], "basic": 0, "evalu": [0, 2, 3, 20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "ani": [0, 7, 19, 21, 33, 36, 45, 46, 47, 52, 53], "condit": [0, 33, 34, 35, 36, 37, 43, 44], "distribut": [0, 2, 3, 4, 5, 7, 11, 12, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 48, 49, 51, 52], "These": 0, "ar": [0, 2, 3, 4, 5, 9, 12, 13, 14, 16, 17, 18, 24, 25, 27, 28, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52], "base": [0, 7, 9, 28, 29, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53], "standard": 0, "like": [0, 3, 14, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52], "one": [0, 3, 5, 20, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53], "hidden": [0, 41, 42, 47, 53], "layer": [0, 11, 41, 42, 45, 46, 47, 53], "neural": [0, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52], "network": [0, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52], "have": [0, 9, 11, 12, 20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "paramet": [0, 5, 9, 11, 12, 13, 17, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "assign": [0, 5, 13, 17, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "data": [0, 2, 3, 5, 9, 11, 12, 13, 17, 18, 20, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53], "sampl": [0, 2, 3, 4, 7, 8, 10, 14, 18, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "accord": [0, 13, 18, 49], "indic": [0, 13, 27, 45, 46, 47, 48], "consequ": [0, 14, 43, 44], "do": [0, 9, 13, 16, 18, 20, 43, 44, 51], "depend": [0, 2, 4, 5, 13, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "locat": [0, 31], "overal": [0, 51], "can": [0, 3, 9, 11, 12, 17, 20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53], "us": [0, 1, 5, 6, 7, 9, 11, 12, 13, 16, 17, 18, 20, 24, 35, 37, 52, 53], "decis": [0, 7, 18, 22, 25, 31, 39, 42, 53], "boundari": [0, 7, 18, 22, 31, 39, 42, 53], "hyper": 0, "howev": [0, 53], "underli": [0, 49], "cannot": [0, 11, 27], "unseen": 0, "predict": [0, 2, 3, 4, 9, 12, 14, 15, 16, 18, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52], "train": [0, 12, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52], "progress": [0, 2, 3, 4, 5, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "remov": 0, "thei": [0, 9, 20], "select": [0, 6, 28, 29, 45, 46, 47, 49, 53], "subset": 0, "which": [0, 2, 4, 5, 12, 13, 16, 18, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 45, 46, 47, 48, 49, 52], "mai": [0, 9, 14, 49, 51, 52], "enhanc": 0, "interpret": 0, "we": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 16, 17, 18, 20, 25, 51, 52, 53], "propos": [0, 3, 9, 11, 18, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53], "method": [0, 2, 3, 4, 5, 9, 13, 17, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53], "architectur": [0, 47, 53], "thu": [0, 2, 3, 4, 5, 27, 52], "rule": [0, 48], "simultan": [0, 45, 46, 47], "construct": [0, 24, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "i": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53], "learnt": [0, 24], "function": [0, 12, 13, 16, 27, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53], "intend": 0, "help": [0, 14, 49, 51], "understand": 0, "structur": [0, 49, 50], "abov": 0, "print": [0, 2, 3, 4, 5, 9, 13, 17, 18, 20, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "inner": 0, "thi": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 28, 29, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53], "aim": [0, 12], "decor": [0, 9, 27], "give": [0, 7, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52], "further": [0, 52], "guidanc": [0, 9], "desir": [0, 16], "synthet": 0, "spars": [1, 5, 6, 7, 13, 16, 28, 38, 39, 40, 41, 42, 43, 44, 48, 49, 52, 53], "mmd": [1, 3, 6, 7, 11, 22, 25, 28, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 53], "ovo": [1, 6, 7, 9, 12, 13, 15, 17, 28, 38, 39, 41, 42, 43, 44, 46, 47, 52, 53], "linear": [1, 6, 7, 9, 11, 14, 16, 18, 20, 28, 34, 35, 41, 42, 43, 45, 46, 47, 49, 53], "mi": [1, 6, 7, 28, 45, 48], "group": [1, 4, 6, 7, 45, 46, 47, 53], "model": [1, 6, 7, 19, 21, 22, 24, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53], "ova": [1, 6, 7, 20, 38, 39, 41, 42, 43, 44, 46, 47, 52, 53], "go": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 51], "end": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 48, 49], "download": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 51], "full": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "exampl": [2, 3, 4, 5, 9, 11, 12, 13, 16, 17, 18, 20, 22, 24, 25, 51], "code": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 51], "In": [2, 3, 4, 5, 12, 13, 15, 18, 31, 51, 52, 53], "ask": [2, 3, 4, 5, 52], "gemclu": [2, 3, 4, 5, 7, 9, 11, 13, 14, 15, 16, 17, 18, 20, 22, 24, 25, 53], "sparselinearmmd": [2, 5, 47, 53], "perform": [2, 3, 4, 5, 9, 13, 20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53], "where": [2, 3, 4, 5, 9, 14, 16, 20, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "regularis": [2, 3, 4, 5, 18, 40], "penalti": [2, 3, 4, 5, 18, 20, 40, 45, 46, 47, 53], "increas": [2, 3, 4, 5, 45, 46, 47, 49], "until": [2, 3, 4, 5, 45, 46, 47, 49], "2": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25, 27, 28, 29, 31, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53], "discard": [2, 3, 4, 5], "keep": [2, 3, 4, 53], "best": [2, 3, 4, 9, 45, 46, 47, 49], "weight": [2, 3, 4, 27, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "minimum": [2, 3, 4, 45, 46, 47, 49], "number": [2, 3, 4, 9, 11, 13, 17, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51], "maintain": [2, 3, 4], "gemini": [2, 3, 4, 5, 11, 12, 13, 14, 16, 17, 21, 22, 24, 25, 27, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "score": [2, 3, 4, 5, 13, 17, 18, 21, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52], "close": [2, 3, 4, 9, 11, 28, 31], "90": [2, 3, 4], "maximum": [2, 3, 4, 13, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49], "valu": [2, 3, 4, 11, 13, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "encount": [2, 3, 4], "dure": [2, 3, 4, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "consist": [2, 3, 4, 5, 9, 11, 18, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52], "3": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52], "isotrop": [2, 3, 4, 12, 28], "gaussian": [2, 3, 4, 7, 11, 12, 13, 18, 20, 22, 28, 29, 30, 31, 39], "so": [2, 3, 4, 14, 16, 20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "find": [2, 3, 4, 5, 9, 14, 16, 48, 51], "5d": [2, 3], "20": [2, 3, 28, 41, 42, 47], "noisi": [2, 3, 4, 5, 28, 29], "variabl": [2, 3, 4, 5, 13, 28, 29, 45, 46, 47], "optim": [2, 3, 4, 5, 11, 16], "solut": [2, 3, 4, 5, 9, 16, 45, 46, 47], "should": [2, 3, 4, 5, 9, 33, 34, 35, 36, 37, 48], "onli": [2, 3, 4, 5, 13, 14, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53], "5": [2, 3, 4, 5, 9, 11, 13, 14, 15, 16, 17, 18, 25, 28, 45, 46, 47], "relev": [2, 3, 4, 5], "suffici": [2, 3, 4, 5], "get": [2, 3, 4, 5, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52], "correct": [2, 3, 4, 5, 12], "import": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 38, 39, 40, 41, 42, 45, 46, 47, 48, 52], "numpi": [2, 3, 4, 5, 9, 11, 12, 13, 14, 16, 17, 18, 20, 51], "np": [2, 3, 4, 5, 9, 11, 12, 13, 14, 16, 17, 18, 20], "from": [2, 3, 4, 5, 9, 11, 12, 14, 15, 16, 18, 20, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 51, 52, 53], "matplotlib": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18], "pyplot": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18], "plt": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18], "sklearn": [2, 3, 4, 9, 11, 13, 15, 16, 17, 18, 20, 24, 25, 38, 39, 40, 41, 42, 45, 46, 47, 49, 52, 53], "metric": [2, 3, 9, 11, 12, 17, 20, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "celeux_on": [2, 3, 9], "gener": [2, 3, 4, 5, 9, 11, 12, 13, 17, 18, 20, 24, 25, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "separ": [2, 3, 4, 13, 17, 18], "addit": [2, 3, 28, 29, 52], "p": [2, 3, 9, 13, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52], "independ": [2, 3, 28, 52], "x": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53], "y": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53], "n": [2, 3, 5, 9, 12, 13, 14, 17, 28, 29, 30, 31, 32], "300": [2, 3, 28], "mu": [2, 3, 9, 28], "1": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 27, 28, 31, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52], "7": [2, 3, 5, 13, 16, 25, 28], "random_st": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "0": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "creat": [2, 3, 4, 5, 16, 17, 18], "just": [2, 3, 4, 5, 18], "call": [2, 3, 4, 5, 13, 17, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "iter": [2, 3, 4, 5, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "through": [2, 3, 4, 5, 47, 49, 51], "gradient": [2, 3, 4, 5, 12, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "descent": [2, 3, 4, 5, 27, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "clf": [2, 3, 4, 5, 14, 15, 18, 38, 39, 40, 41, 42, 45, 46, 47], "alpha": [2, 3, 4, 5, 11, 13, 14, 16, 18, 31, 45, 46, 47], "true": [2, 3, 4, 5, 9, 12, 13, 14, 15, 16, 17, 18, 20, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53], "search": [2, 3, 4, 5], "elimin": [2, 3, 4, 5, 47], "best_weight": [2, 3, 4, 5, 45, 46, 47], "n_featur": [2, 3, 4, 5, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "take": [2, 4, 5, 9, 11, 14, 18, 52], "look": [2, 4, 5, 11, 18, 52], "how": [2, 4, 5, 7, 9, 17, 18, 20, 24, 25, 28, 31, 52, 53], "decreas": [2, 4], "f": [2, 3, 4, 5, 13, 17, 20, 31, 47, 51, 52], "top": [2, 4, 5, 12, 14, 45, 46, 47], "wa": [2, 4, 5, 28, 29, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "max": [2, 4, 5, 9, 11, 16, 18], "settl": [2, 4, 5], "an": [2, 4, 5, 7, 9, 13, 14, 16, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53], "optimum": [2, 4, 5], "9": [2, 4, 5, 45, 46, 47], "highlight": [2, 4], "along": [2, 4, 16], "titl": [2, 3, 4, 11, 12, 51], "plot": [2, 4, 11, 13, 14], "xlabel": [2, 4, 14, 15, 18], "ylabel": [2, 4, 14, 15, 18], "ylim": [2, 4, 11, 14], "show": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "expect": [2, 3, 12, 14, 52], "first": [2, 3, 12, 20, 41, 42, 47, 52], "linalg": [2, 3], "norm": [2, 3, 27, 53], "axi": [2, 3, 4, 5, 11, 12, 16], "ord": [2, 3], "8259728240495163": 2, "0249912491496707": 2, "7224921242347038": 2, "arrai": [2, 3, 4, 5, 12, 13, 17, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "4": [2, 3, 4, 5, 11, 13, 14, 17, 25, 29], "now": [2, 3, 4, 14, 18, 20], "y_pred": [2, 3, 4, 9, 12, 13, 14, 15, 16, 17, 18, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "ari": [2, 3, 9, 13, 17, 24, 25], "adjusted_rand_scor": [2, 3, 9, 13, 17, 24, 25], "83290627605772": 2, "total": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26], "run": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52], "time": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 52], "script": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "minut": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "26": [2, 6], "361": [2, 6], "second": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24], "python": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "sourc": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "plot_feature_selection_linear": [2, 6], "py": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26], "jupyt": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "notebook": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "ipynb": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "galleri": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 53], "sphinx": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "sparselinearmi": 3, "path": [3, 13, 16, 45, 46, 47], "50": [3, 4, 5, 11, 13, 14, 15, 16, 18], "contrari": [3, 12], "guid": [3, 16, 49, 51, 52], "specif": [3, 52, 53], "kernel": [3, 7, 9, 22, 23, 26, 33, 34, 35, 36, 37, 38, 41, 43, 46, 47, 49, 50, 53], "space": [3, 34, 35, 36, 37, 53], "That": 3, "why": 3, "accept": 3, "threshold": [3, 5, 16, 24], "lower": [3, 5], "instead": [3, 13, 14, 20], "other": [3, 28, 43, 44], "A": [3, 9, 27, 28, 29, 30, 31, 47, 48, 50, 52], "veri": 3, "similar": [3, 11], "found": [3, 49, 51], "discrimin": [3, 22, 27, 30, 31, 38, 39, 40, 41, 42, 45, 46, 47], "brain": [3, 45], "mri": [3, 45], "segment": [3, 45], "kong": [3, 45], "et": [3, 18, 28, 29, 40, 47, 52], "al": [3, 18, 28, 29, 40, 47, 52], "2014": [3, 28, 29], "decomposit": 3, "keep_threshold": [3, 5, 45, 46, 47], "let": [3, 18, 20], "": [3, 4, 13, 15, 18, 20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "make": [3, 13], "small": [3, 9, 45, 46, 47, 51], "pca": 3, "visualis": [3, 5], "purpos": 3, "distinguish": 3, "label": [3, 20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "x_pca": 3, "n_compon": [3, 11], "fit_transform": [3, 20], "k": [3, 30, 43, 44, 52], "rang": [3, 5, 9, 13], "class_indic": 3, "scatter": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18], "c": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 28, 29, 31, 51, 52], "marker": 3, "o": 3, "off": [3, 11, 16], "celeux": [3, 28, 29], "lasso": [3, 4, 45, 46, 47, 53], "4104563447985772": 3, "773": [3, 6], "plot_feature_selection_logreg_mi": [3, 6], "sparsemlpmmd": [4, 45, 46], "2d": [4, 29], "48": 4, "make_blob": [4, 15, 18], "center": [4, 15, 18], "cluster_std": [4, 15, 18], "n_sampl": [4, 11, 12, 15, 16, 18, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "200": [4, 11, 14, 15, 16, 18], "add": [4, 12, 27, 53], "extra": 4, "random": [4, 5, 9, 12, 13, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "seed": [4, 5, 9, 13], "concaten": [4, 5, 12, 28], "normal": [4, 5], "scale": [4, 12, 28, 30, 32, 51], "size": [4, 5, 12, 13, 16, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "18": 4, "batch_siz": [4, 5, 12, 14, 38, 39, 40, 41, 42, 45, 46, 47, 48], "max_it": [4, 5, 11, 12, 24, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "25": 4, "learning_r": [4, 5, 9, 12, 13, 16, 17, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "001": [4, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "our": [4, 5, 7, 9, 12, 13, 16, 51, 52], "figur": 4, "figsiz": 4, "10": [4, 5, 9, 14, 18, 24, 26, 32, 45, 46, 47, 52], "subplot": [4, 11], "tight_layout": [4, 11], "get_select": [4, 5, 45, 46, 47], "4596486286280377": 4, "5824499242836225": 4, "4242049318552603": 4, "x_0": [4, 15, 18], "x_1": [4, 15, 18], "x_2": [4, 15, 18], "ax0": [4, 15, 18], "crimson": [4, 15, 18], "ax1": [4, 15, 18], "deepskyblu": [4, 15, 18], "ax2": [4, 15, 18], "darkgreen": [4, 15, 18], "leg": [4, 15, 18], "legend": [4, 15, 18], "loc": [4, 12, 15, 18, 30, 32], "upper": [4, 15, 18], "left": [4, 15, 18, 52], "fancybox": [4, 15, 18], "scatterpoint": [4, 15, 18], "get_fram": [4, 15, 18], "set_alpha": [4, 15, 18], "6": [4, 5, 9, 11, 25], "295": [4, 6], "plot_feature_selection_mlp": [4, 6], "moreov": [5, 52], "produc": [5, 48], "some": [5, 7, 9, 11, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53], "categor": [5, 43, 44], "hot": [5, 45, 46, 47], "encod": [5, 45, 46, 47], "consid": [5, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49], "altogeth": 5, "option": [5, 16, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "binomi": [5, 13], "cluster": [5, 10, 20, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "8": [5, 9, 14], "inform": [5, 12, 18, 20, 29, 31, 33, 38, 39, 40, 41, 42, 45, 46, 47, 48, 51, 52], "outcom": 5, "multinomi": 5, "x1_class_1": 5, "pval": [5, 12, 30], "05": [5, 11, 16, 45, 46, 47], "45": 5, "x2_class_1": 5, "x_class_1": 5, "x1_class_2": 5, "x2_class_2": 5, "x_class_2": 5, "x_inform": 5, "x_nois": 5, "100": [5, 9, 12, 13, 17, 24, 48], "repeat": 5, "arang": 5, "final": [5, 9], "write": 5, "out": [5, 51], "partit": [5, 45, 46, 47], "shape": [5, 9, 12, 13, 16, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "def": [5, 12], "rand_jitt": 5, "return": [5, 12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "randn": 5, "len": [5, 9], "01": [5, 6, 22, 45, 46, 47, 48], "argmax": [5, 9, 18], "red": 5, "blue": [5, 14], "11": 5, "12": [5, 33, 34, 35, 36, 37], "13": 5, "14": [5, 29], "15": 5, "1e": [5, 9, 12, 13, 16, 17, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "80": 5, "4935152433868388": 5, "8084378363828286": 5, "646750269106263": 5, "085": [5, 6], "plot_grouped_select": [5, 6], "00": [6, 10, 21, 22, 26], "37": 6, "515": 6, "execut": [6, 10, 21, 22, 26], "auto_examples_feature_select": 6, "file": [6, 10, 21, 22, 26], "mb": [6, 10, 21, 22, 26], "06": [6, 22], "03": 6, "here": [7, 9, 11, 12, 13, 14, 20, 25, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53], "introduc": [7, 22, 41], "non": [7, 13, 22, 29, 30, 43], "parametr": [7, 13, 22, 30, 43, 52], "map": [7, 22, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "mixtur": [7, 11, 13, 18, 22, 28, 29, 30, 31, 39], "low": [7, 9, 22, 31, 39, 48], "degre": [7, 22, 31, 32, 39], "student": [7, 22, 31, 32, 39], "draw": [7, 14, 22, 28, 29, 30, 31, 32, 42], "between": [7, 22, 27, 33, 34, 35, 36, 37, 42, 47, 52, 53], "two": [7, 11, 12, 22, 25, 35, 37, 41, 42, 45, 46, 49, 52], "interlac": [7, 22, 42], "moon": [7, 22, 42], "rim": [7, 22], "graph": [7, 16, 17, 22, 30, 44], "node": [7, 17, 22, 25, 30, 44, 49], "nonparametr": [7, 9, 17, 22, 30], "compar": [7, 22, 28, 29, 34, 35, 36, 37, 41, 52], "circl": [7, 22, 41], "dataset": [7, 15, 16, 22, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 45, 46, 47, 52], "chang": [7, 22, 41], "extend": [7, 22, 30], "build": [7, 22, 23, 26, 30, 34, 48, 49, 50], "your": [7, 22, 30, 52], "own": [7, 22, 30, 52], "link": [7, 8, 10, 27, 28, 38, 44], "constraint": [7, 8, 10, 27, 28, 38, 44, 45, 46, 47, 49], "pair": [7, 8, 10, 13, 16, 27, 28, 38, 44], "differenti": [7, 23, 26, 34, 48], "unsupervis": [7, 9, 12, 23, 26, 34, 48, 49, 50], "dougla": [7, 23, 26, 34], "kmean": [7, 23, 26, 49, 50], "object": [7, 12, 23, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52], "kauri": [7, 23, 26, 50], "auto_examples_python": 7, "zip": 7, "auto_examples_jupyt": 7, "improv": [9, 45, 46, 47, 52], "enforc": 9, "loos": 9, "equival": [9, 25], "ensembl": 9, "learn": [9, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52], "seek": [9, 20], "agreeanc": 9, "describ": [9, 27, 40, 45, 46, 47, 50], "ratio": 9, "were": [9, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "togeth": [9, 27], "provid": [9, 51, 52, 53], "Then": [9, 11], "ensur": [9, 12, 27, 45, 46, 47], "remain": [9, 45, 46, 47], "apart": [9, 12, 14], "while": 9, "satisfi": [9, 27, 49], "try": [9, 15, 18, 51], "its": [9, 48, 52], "level": [9, 18], "supervis": 9, "input": [9, 14, 18, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53], "advantag": 9, "requir": [9, 51, 53], "knowledg": 9, "rather": [9, 20], "idea": 9, "whether": [9, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "start": [9, 11, 12, 20, 45, 46, 47, 51], "categoricalwasserstein": [9, 13], "linearmmd": [9, 39, 40, 46], "add_mlcl_constraint": 9, "itertool": [9, 13], "challeng": [9, 11], "mean": [9, 11, 12, 13, 14, 17, 28, 30, 31, 34, 35], "fit": [9, 11, 13, 16, 17, 18, 20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52], "sever": [9, 52], "variou": [9, 45, 46, 47], "all_model": 9, "n_cluster": [9, 11, 12, 13, 14, 16, 17, 18, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52], "cosin": [9, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49], "sigmoid": [9, 12, 34, 35, 38, 41, 43, 46, 47, 49], "rbf": [9, 11, 34, 35, 38, 41, 43, 46, 47, 49], "sub": 9, "11914066061963555": 9, "11176053892324672": 9, "11421905413971052": 9, "22472124150185058": 9, "e": [9, 28, 29, 33, 34, 35, 36, 37, 51, 52], "same": [9, 12, 20, 27, 53], "consensus_matrix": 9, "zero": [9, 11], "j": [9, 13], "combinations_with_replac": 9, "r": [9, 33, 34, 35, 36, 37, 47, 48, 52], "int": [9, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "precomput": [9, 13, 16, 20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "notic": [9, 25], "api": [9, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52], "although": 9, "superflu": 9, "consensus_model": 9, "y_pred_consensu": 9, "predict_proba": [9, 18, 20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "what": 9, "10728640074310927": 9, "simul": 9, "extrapol": 9, "real": 9, "life": 9, "situat": 9, "would": [9, 16, 51], "emphas": 9, "more": [9, 52, 53], "field": 9, "expert": 9, "most": 9, "confid": 9, "sorted_confidence_sampl": 9, "sort": 9, "kei": 9, "lambda": 9, "revers": 9, "must_link": [9, 27], "unsure_sample_pair": 9, "combin": [9, 13, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49], "next": 9, "cannot_link": [9, 27], "over": [9, 28], "base_model": 9, "line": 9, "mlcl_consensus_model": 9, "y_pred_mlcl_consensu": 9, "16976700304809886": 9, "consensus_ord": 9, "argsort": 9, "imshow": 9, "cmap": [9, 11, 14, 16], "seismic": 9, "726": [9, 10], "plot_semi_supervised_consensu": [9, 10], "08": [10, 22], "auto_examples_mlcl": 10, "consensu": [10, 27, 28, 38, 44], "centr": 11, "algorithm": [11, 16, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "unless": 11, "adequ": [11, 13], "spectralclust": 11, "gaussianmixtur": 11, "make_circl": 11, "nois": [11, 16], "factor": [11, 27, 45, 46, 47, 49], "normalis": 11, "std": 11, "ddof": 11, "set": [11, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53], "covari": [11, 13, 17, 30], "type": [11, 52], "spheric": 11, "lighten": 11, "correspond": [11, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49], "symmetri": 11, "eas": 11, "job": 11, "initialis": [11, 12, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "actual": [11, 49], "gm": 11, "covariance_typ": 11, "means_init": 11, "1000": [11, 12, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "spectral": [11, 16], "sc": 11, "multi": [11, 53], "perceptron": [11, 53], "becaus": [11, 13, 16, 53], "incap": 11, "euclidean_gemini": 11, "mlpmmd": [11, 15, 42, 52], "comput": [11, 12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53], "rbf_gemini": 11, "grid": [11, 14], "x_val": [11, 14, 16, 18], "linspac": [11, 14, 16, 18], "min": [11, 16, 18], "num": [11, 14, 16, 18], "y_val": [11, 14, 16, 18], "xx": [11, 14, 16, 18], "yy": [11, 14, 16, 18], "meshgrid": [11, 14, 16, 18], "grid_input": [11, 14, 16, 18], "c_": [11, 14, 16, 18], "ravel": [11, 14, 16, 18], "contourf": [11, 14, 16, 18], "reshap": [11, 12, 14, 16, 18], "cm": [11, 16, 25], "labels_": [11, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "49": [11, 22], "919": [11, 22], "plot_circl": [11, 22], "It": [12, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52], "possibl": [12, 27, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "wish": 12, "avail": [12, 52], "among": [12, 48], "choic": [12, 49, 53], "To": [12, 13, 16], "framework": [12, 40], "defin": [12, 16, 34, 35, 36, 37], "still": 12, "bia": [12, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "less": [12, 16], "activ": [12, 48], "tell": 12, "written": [12, 51], "p_": [12, 44, 52, 53], "theta": [12, 52, 53], "text": [12, 33, 34, 35], "wassersteinmodel": 12, "draw_gmm": [12, 13, 17], "binaryregress": 12, "parent": 12, "wasserstein": [12, 20, 36, 37, 38, 39, 41, 42, 44, 48, 53], "__init__": [12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "self": [12, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "solver": [12, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "adam": [12, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "none": [12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "euclidean": [12, 13, 16, 20, 36, 37, 39, 42, 44, 53], "fals": [12, 13, 16, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "verbos": [12, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "super": 12, "_init_param": [12, 53], "state": 12, "in_threshold": 12, "sqrt": 12, "theta_": [12, 43, 44], "uniform": 12, "_get_weight": [12, 53], "For": [12, 52, 53], "optimis": [12, 13, 17, 25, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "need": [12, 20, 33, 34, 35, 36, 37], "insid": 12, "list": [12, 27, 30, 45, 46, 47, 48], "_infer": [12, 53], "retain": 12, "output": [12, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "you": [12, 51, 52, 53], "must": [12, 27, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49], "probabl": [12, 13, 18, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52], "vector": [12, 27, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "y_pred_logit": 12, "matmul": [12, 20], "exp": [12, 13], "flag": 12, "allow": [12, 51], "store": 12, "intermedi": 12, "backpropag": 12, "_y_sigmoid": 12, "As": 12, "duplic": 12, "opposit": 12, "column": 12, "up": [12, 49], "each": [12, 13, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "row": 12, "otherwis": [12, 20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "work": [12, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51], "_compute_grad": 12, "ha": [12, 48, 51, 52], "extens": [12, 51, 53], "appli": [12, 27], "And": 12, "finish": 12, "theta_grad": 12, "t": [12, 13, 14, 20, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "order": [12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "match": [12, 13, 20, 48], "goal": 12, "maximis": [12, 18, 24, 27, 38, 39, 40, 41, 42, 43, 44, 48, 52], "common": 12, "minimis": [12, 27], "neg": 12, "ey": [12, 13, 17, 20], "ones": [12, 13, 17, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49], "custom_model": 12, "fit_predict": [12, 13, 14, 16, 17, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "binari": [12, 50], "824": [12, 22], "plot_custom_model": [12, 22], "simplifi": 13, "version": [13, 45, 46, 47, 52, 53], "latent": 13, "posit": [13, 32], "procedur": 13, "mani": [13, 51], "determin": [13, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "distanc": [13, 16, 20, 33, 34, 35, 36, 37, 39, 42, 44, 52, 53], "associ": [13, 24], "note": [13, 16, 49, 53], "given": [13, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "ident": 13, "matrix": [13, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "scipi": [13, 16, 51], "csgraph": [13, 16], "pairwise_dist": [13, 16, 53], "edge_prob": 13, "adjacency_matrix": 13, "adjac": [13, 16], "symmetr": [13, 33, 34, 35, 36, 37], "shortest": [13, 16], "floyd_warshal": [13, 16], "direct": [13, 16], "unweight": [13, 16], "replac": [13, 16, 20], "inf": [13, 16], "isinf": [13, 16], "specifi": [13, 20, 45, 46, 47], "custom": [13, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49], "pass": [13, 16, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "argument": [13, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49], "1789": [13, 17], "dummi": 13, "unnecessari": 13, "There": 13, "index": 13, "node_i": 13, "node_j": 13, "grai": 13, "linewidth": 13, "ari_scor": [13, 17], "gemini_scor": [13, 17], "3f": [13, 17, 20], "977": [13, 20, 21], "141": 13, "613": [13, 22], "plot_graph_node_clust": [13, 22], "retak": [14, 16], "experi": [14, 16], "origin": [14, 16, 30, 51, 52, 53], "paper": [14, 16, 40, 53], "want": [14, 16, 53], "incorpor": 14, "freedom": [14, 31, 32], "seem": [14, 53], "outlier": 14, "unlik": 14, "done": 14, "linearwasserstein": [14, 38], "gstm": 14, "far": [14, 53], "df": [14, 31, 32], "zz": [14, 16, 18], "reds_r": 14, "xlim": 14, "913": [14, 22], "plot_gstm": [14, 22], "base_gemini": 15, "densemmdovo": 15, "environ": [15, 18], "pleas": [15, 18, 49, 51, 52], "rerun": [15, 18], "cell": [15, 18], "html": [15, 18], "represent": [15, 18, 41, 42, 47], "trust": [15, 18], "On": [15, 18, 45, 46, 47], "github": [15, 18, 51], "unabl": [15, 18], "render": [15, 18], "load": 15, "page": [15, 18], "nbviewer": [15, 18], "org": [15, 18], "mlpmmdmlpmmd": 15, "768": [15, 22], "plot_intro_mlp_mmd": [15, 22], "face": 16, "trick": 16, "mlpwasserstein": [16, 41], "abl": 16, "make_moon": 16, "2023": [16, 52], "edg": 16, "than": [16, 45, 46, 47, 52], "quantil": 16, "876": [16, 22], "plot_moon_clust": [16, 22], "illustr": 17, "categoricalmmd": 17, "975": 17, "328": 17, "393": [17, 22], "plot_nonparametric_clust": [17, 22], "mutual": [18, 31, 33, 38, 39, 40, 41, 42, 45, 46, 47, 48, 51, 52], "kraus": [18, 40], "2010": [18, 40], "under": [18, 45, 46, 47, 51], "ell_2": [18, 27, 40], "rimrim": 18, "u": [18, 51], "grad": 18, "grid_pr": 18, "isol": 18, "02554995289356299": 18, "322": [18, 22], "plot_rim": [18, 22], "anoth": [20, 53], "preprocess": 20, "linear_model": [20, 25], "naive_bay": 20, "load_breast_canc": 20, "return_x_i": [20, 38, 39, 40, 41, 42, 45, 46, 47, 52], "robustscal": 20, "differ": [20, 24, 25, 45, 46, 47, 48, 49], "breast": 20, "cancer": 20, "l2": [20, 36, 37, 39, 42, 44], "clf1": 20, "logisticregress": 20, "p_y_given_x_1": 20, "naiv": 20, "bay": [20, 52], "hypothes": [20, 51], "clf2": 20, "gaussiannb": 20, "p_y_given_x_2": 20, "both": [20, 53], "wassersteingemini": [20, 48], "v": [20, 34, 35, 36, 37, 48, 52], "wasserstein_scor": 20, "wassersteinova": 20, "affin": [20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "compute_affin": [20, 33, 34, 35, 36, 37], "clf1_score": 20, "clf2_score": 20, "878": 20, "005": 20, "By": [20, 53], "obtain": [20, 25], "share": 20, "y_one_hot": 20, "precomputed_dist": 20, "431": 20, "403": 20, "plot_gemini_scor": [20, 21], "auto_examples_scor": 21, "07": 22, "17": 22, "626": 22, "auto_exampl": 22, "few": [24, 45, 46, 47], "bin": [24, 48], "per": [24, 33, 34, 35, 36, 37, 48], "mmdova": 24, "iri": [24, 25], "load_iri": [24, 25, 38, 39, 40, 41, 42, 45, 46, 47, 52], "target": [24, 25], "n_cut": [24, 48], "y_pred_linear": [24, 25], "474150686050238": 24, "5681159420289855": 24, "712": [24, 26], "plot_douglas_exampl": [24, 26], "accompanni": 25, "gain": [25, 49], "deriv": [25, 33, 34, 35, 36, 37, 51, 52, 53], "squar": 25, "print_kauri_tre": 25, "limit": [25, 49], "depth": [25, 49], "simplic": 25, "max_clust": [25, 49], "max_depth": [25, 49], "9459": 25, "167022308022": 25, "additive_chi2_model": 25, "additive_chi2": [25, 34, 35, 38, 41, 43, 46, 47, 49], "y_pred_additive_chi2": 25, "22": [25, 52], "43532371061057": 25, "7172759168337549": 25, "8680377279943841": 25, "feature_nam": [25, 50], "petal": 25, "width": 25, "length": [25, 45, 46, 47], "230": [25, 26], "plot_kauri_exampl": [25, 26], "943": 26, "auto_examples_tre": 26, "tree": [26, 34], "gemini_model": 27, "contraint": 27, "respect": [27, 28, 52], "fulli": 27, "mlp___": 27, "linear___": 27, "categorical___": 27, "involv": [27, 52], "ndarrai": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "n_constraint": 27, "default": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53], "being": 27, "i1": 27, "j1": 27, "iN": 27, "jn": 27, "If": [27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "float": [27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "hyperparamet": [27, 40, 48], "tupl": [28, 29, 30], "compon": [28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "dimens": 28, "excess": 28, "taken": [28, 29], "section": [28, 29], "control": [28, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "randomst": [28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "instanc": [28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "creation": [28, 29, 30, 31, 32], "reproduc": [28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "across": [28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "multipl": [28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "gmm": [28, 29, 30, 31], "drawn": [28, 29, 30, 31, 32, 52], "refer": [28, 29, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "g": [28, 29], "martin": [28, 29], "magniett": [28, 29], "m": [28, 29, 31, 47, 51, 52], "l": [28, 29, 31, 47, 51, 52], "maugi": [28, 29], "rabusseau": [28, 29], "rafteri": [28, 29], "regular": [28, 29, 40], "approach": [28, 29], "journal": [28, 29, 52], "de": [28, 29], "la": [28, 29], "societ": [28, 29], "francais": [28, 29], "statistiqu": [28, 29], "155": [28, 29], "57": [28, 29], "71": [28, 29], "2000": 29, "linearli": 29, "element": 30, "d": [30, 32, 48, 51, 52], "proport": 30, "500": 31, "articl": 31, "ohl": [31, 38, 39, 41, 42, 45, 46, 47, 48, 49, 51, 52], "mattei": [31, 38, 39, 41, 42, 45, 46, 47, 48, 49, 51, 52], "bouveyron": [31, 38, 39, 41, 42, 45, 46, 47, 51, 52], "harchaoui": [31, 38, 39, 41, 42, 45, 46, 47, 51, 52], "w": [31, 33, 34, 35, 36, 37, 48, 51, 52], "leclercq": [31, 38, 39, 41, 42, 45, 46, 47, 48, 49, 51, 52], "droit": [31, 38, 39, 41, 42, 45, 46, 47, 48, 49, 51, 52], "precioso": [31, 38, 39, 41, 42, 45, 46, 47, 51, 52], "2022": [31, 51, 52], "octob": [31, 51], "generalis": [31, 38, 39, 41, 42, 45, 46, 47, 48, 51, 52], "advanc": [31, 51, 52], "process": [31, 51, 52], "system": [31, 51, 52], "multivari": 32, "semi": 32, "definit": [32, 52], "spread": 32, "epsilon": [33, 34, 35, 36, 37], "classic": [33, 40], "complet": [33, 51], "mathcal": [33, 34, 35, 36, 37], "mathbb": [33, 34, 35, 36, 37, 52], "_": [33, 34, 35, 36, 37, 52], "sim": [33, 34, 35, 36, 37, 52], "kl": 33, "precis": [33, 34, 35, 36, 37], "clip": [33, 34, 35, 36, 37], "avoid": [33, 34, 35, 36, 37], "numer": [33, 34, 35, 36, 37], "instabl": [33, 34, 35, 36, 37], "doe": [33, 43, 44], "case": [33, 34, 35, 36, 37, 53], "ignor": [33, 34, 35, 36, 37], "return_grad": [33, 34, 35, 36, 37], "context": [33, 34, 35, 36, 37], "either": [33, 34, 35, 36, 37, 45, 46, 47, 49], "result": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52], "bool": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "nabla_": [33, 34, 35, 36, 37], "discrep": [34, 35], "kappa": [34, 35], "chi2": [34, 35, 38, 41, 43, 46, 47, 49], "poli": [34, 35, 38, 41, 43, 46, 47, 49], "polynomi": [34, 35, 38, 41, 43, 46, 47, 49], "laplacian": [34, 35, 38, 41, 43, 46, 47, 49], "kernel_param": [34, 35, 38, 41, 43, 46, 47, 49], "y_a": [35, 37], "y_b": [35, 37], "delta": [36, 37, 48], "l1": [36, 37, 39, 42, 44], "manhattan": [36, 37, 39, 42, 44], "cityblock": [36, 37, 39, 42, 44], "paired_dist": [36, 37, 39, 42, 44], "form": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "neuron": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "epoch": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "singl": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "initi": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "rate": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "step": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "updat": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51], "sgd": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "stochast": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "kingma": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "diederik": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "jimmi": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "ba": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "batch": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "whole": [38, 39, 40, 41, 42, 45, 46, 47], "messag": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "stdout": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "loui": [38, 39, 41, 42, 45, 46, 47, 48, 49, 51], "pierr": [38, 39, 41, 42, 45, 46, 47, 48, 49, 51], "alexandr": [38, 39, 41, 42, 45, 46, 47, 48, 49, 51], "charl": [38, 39, 41, 42, 45, 46, 47, 51], "warith": [38, 39, 41, 42, 45, 46, 47, 51], "micka\u00ebl": [38, 39, 41, 42, 45, 46, 47, 48, 49, 51], "arnaud": [38, 39, 41, 42, 45, 46, 47, 48, 49, 51], "freder": [38, 39, 41, 42, 45, 46, 47, 48, 49, 51], "6949190522657067": 38, "attribut": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "w_": [38, 39, 40, 45, 46], "b_": [38, 39, 40, 45, 46], "bias": [38, 39, 40, 41, 42, 45, 46, 47], "optimiser_": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "adamoptim": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "sgdoptim": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "chosen": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "n_iter_": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "took": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "converg": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52], "present": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "convent": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52], "estim": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "get_gemini": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "get_param": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "deep": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "subobject": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "param": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "dict": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "name": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "membership": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "after": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "closest": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "seen": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "test": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "set_param": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "nest": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "pipelin": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "latter": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "__": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "6993348362264595": 39, "n_features_in": [39, 40], "reg": 40, "maxim": [40, 45, 46, 47, 49], "ryan": 40, "gome": 40, "andrea": 40, "pietro": 40, "perona": 40, "00962912118121384": 40, "n_hidden_dim": [41, 42, 47], "7592155845461646": 41, "w1_": [41, 42, 47], "b1_": [41, 42, 47], "w2_": [41, 42, 47], "b2_": [41, 42, 47], "h_": [41, 42, 47], "7636482655127903": 42, "directli": [43, 44, 53], "x_i": [43, 44], "ki": [43, 44], "contrarili": [43, 44], "part": [43, 44], "support": [43, 44, 51], "vanilla": [45, 46, 47], "variat": [45, 46, 47, 49], "bring": [45, 46, 47, 52], "via": [45, 46], "proxim": [45, 46, 47], "repres": [45, 46, 47], "typic": [45, 46, 47], "scheme": [45, 46, 47], "joint": [45, 46, 47, 52, 53], "youyong": 45, "yue": 45, "deng": 45, "qionghai": 45, "dai": 45, "6940342321220005": [45, 46], "retriev": [45, 46, 47], "ind": [45, 46, 47], "alpha_multipli": [45, 46, 47], "min_featur": [45, 46, 47], "restore_best_weight": [45, 46, 47], "early_stopping_factor": [45, 46, 47], "99": [45, 46, 47], "max_pati": [45, 46, 47], "unfold": [45, 46, 47], "geometr": [45, 46, 47], "amount": [45, 46, 47], "histori": [45, 46, 47], "kept": [45, 46, 47], "certain": [45, 46, 47], "percentag": [45, 46, 47], "reduct": [45, 46, 47], "made": [45, 46, 47, 53], "retrain": [45, 46, 47], "greater": [45, 46, 47], "stop": [45, 46, 47], "minim": [45, 46, 47], "deem": [45, 46, 47], "offer": [45, 46, 47], "good": [45, 46, 47, 52], "restor": [45, 46, 47], "beyond": [45, 46, 47], "upgrad": [45, 46, 47], "too": [45, 46, 47], "earli": [45, 46, 47], "wait": [45, 46, 47], "without": [45, 46, 47, 51, 52], "befor": [45, 46, 47], "sequenti": [45, 46, 47], "group_penalti": [45, 46, 47], "skip": [47, 53], "connect": [47, 53], "inspir": [47, 52, 53], "lassonet": [47, 52, 53], "lemhadri": [47, 52], "2021": [47, 52], "hierarchi": 47, "coeffici": 47, "rel": [47, 48], "strength": 47, "ruan": [47, 52], "abraham": [47, 52], "tibshirani": [47, 52], "766421183641077": 47, "w_skip_": 47, "feature_mask": 48, "temperatur": 48, "dndt": 48, "leverag": 48, "appris": 48, "split": [48, 49], "learnabl": 48, "wise": 48, "soft": 48, "recombin": 48, "those": [48, 49], "cut": 48, "boolean": 48, "logit": 48, "leaf": [48, 49], "high": 48, "smoothen": 48, "wherea": 48, "closer": 48, "dirac": [48, 49], "mmdgemini": 48, "explor": [48, 49], "preciosio": [48, 49], "find_active_point": 48, "calcul": 48, "point": 48, "fall": 48, "within": 48, "bound": 48, "contribut": [48, 51], "active_point": 48, "integ": 48, "min_samples_split": 49, "min_samples_leaf": 49, "max_featur": 49, "max_leav": 49, "reward": 49, "ideal": 49, "new": 49, "refurbish": 49, "them": 49, "alreadi": 49, "exist": 49, "leav": 49, "least": 49, "logic": 49, "randomli": 49, "upon": 49, "put": 49, "tree_": 49, "_tree": 49, "repeatedli": 49, "choos": 49, "reach": 49, "onc": 49, "special": [49, 51], "henc": [49, 52], "constant": 49, "kauri_tre": 50, "thank": 51, "check": [51, 52], "realli": 51, "pleasur": 51, "dedic": 51, "theori": [51, 52], "user": [51, 52], "tool": 51, "scikit": [51, 52], "compat": 51, "http": 51, "io": 51, "main": 51, "com": 51, "instruct": 51, "pip": 51, "librari": [51, 53], "coupl": 51, "scientif": 51, "pot": 51, "repo": 51, "git": 51, "clone": 51, "cd": 51, "cite": 51, "neurip": 51, "inproceed": 51, "ohl2022generalis": 51, "author": 51, "micka": 51, "booktitl": 51, "editor": 51, "alic": 51, "h": [51, 52], "oh": [51, 52], "alekh": 51, "agarw": [51, 52], "daniel": 51, "belgrav": [51, 52], "kyunghyun": 51, "cho": [51, 52], "year": 51, "url": 51, "openreview": 51, "net": 51, "forum": 51, "id": 51, "0oy3pia": 51, "adp": 51, "been": 51, "french": 51, "govern": 51, "3ia": 51, "c\u00f4te": 51, "azur": 51, "invest": 51, "futur": 51, "project": 51, "manag": 51, "nation": 51, "research": [51, 52], "agenc": 51, "anr": 51, "19": 51, "p3ia": 51, "0002": 51, "also": 51, "franc": 51, "canada": 51, "fund": 51, "ffcr": 51, "partli": 51, "eu": 51, "horizon": 51, "2020": 51, "ai4media": 51, "contract": 51, "951911": 51, "jhonatan": 51, "torr": 51, "hi": 51, "insight": 51, "develop": 51, "short": 52, "descript": 52, "hint": 52, "about": 52, "detail": 52, "public": 52, "stand": 52, "novel": 52, "measur": 52, "custer": 52, "right": 52, "y_1": 52, "y_2": 52, "theorem": 52, "easili": 52, "tractabl": 52, "cane": 52, "valuat": 52, "assumpt": 52, "At": 52, "moment": 52, "report": 52, "fewer": 52, "practic": 52, "merg": 52, "loss": 52, "mainli": 52, "feel": 52, "interest": 52, "ed": 52, "machin": 52, "127": 52, "29": 52, "doi": 52, "48550": 52, "arxiv": 52, "2302": 52, "03391": 52, "mode": 53, "ad": 53, "constructor": 53, "achiev": 53, "regard": 53, "chose": 53, "yield": 53, "worst": 53, "manner": 53, "pairwise_kernel": 53, "forc": 53, "usag": 53, "flexibl": 53, "yet": 53, "express": 53, "enough": 53, "term": 53, "simpler": 53, "induc": 53, "_basemmd": 53, "_basewasserstein": 53, "rewrit": 53, "includ": 53}, "objects": {"gemclus": [[27, 0, 1, "", "add_mlcl_constraint"]], "gemclus.data": [[28, 0, 1, "", "celeux_one"], [29, 0, 1, "", "celeux_two"], [30, 0, 1, "", "draw_gmm"], [31, 0, 1, "", "gstm"], [32, 0, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[33, 1, 1, "", "MI"], [34, 1, 1, "", "MMDOvA"], [35, 1, 1, "", "MMDOvO"], [36, 1, 1, "", "WassersteinOvA"], [37, 1, 1, "", "WassersteinOvO"]], "gemclus.gemini.MI": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "compute_affinity"], [33, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvA": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "compute_affinity"], [34, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvO": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "compute_affinity"], [35, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvA": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "compute_affinity"], [36, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvO": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "compute_affinity"], [37, 2, 1, "", "evaluate"]], "gemclus.linear": [[38, 1, 1, "", "LinearMMD"], [39, 1, 1, "", "LinearWasserstein"], [40, 1, 1, "", "RIM"]], "gemclus.linear.LinearMMD": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "fit"], [38, 2, 1, "", "fit_predict"], [38, 2, 1, "", "get_gemini"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "predict_proba"], [38, 2, 1, "", "score"], [38, 2, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "fit"], [39, 2, 1, "", "fit_predict"], [39, 2, 1, "", "get_gemini"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "predict"], [39, 2, 1, "", "predict_proba"], [39, 2, 1, "", "score"], [39, 2, 1, "", "set_params"]], "gemclus.linear.RIM": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "fit"], [40, 2, 1, "", "fit_predict"], [40, 2, 1, "", "get_gemini"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "predict"], [40, 2, 1, "", "predict_proba"], [40, 2, 1, "", "score"], [40, 2, 1, "", "set_params"]], "gemclus.mlp": [[41, 1, 1, "", "MLPMMD"], [42, 1, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "fit_predict"], [41, 2, 1, "", "get_gemini"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "predict"], [41, 2, 1, "", "predict_proba"], [41, 2, 1, "", "score"], [41, 2, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "fit_predict"], [42, 2, 1, "", "get_gemini"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "predict"], [42, 2, 1, "", "predict_proba"], [42, 2, 1, "", "score"], [42, 2, 1, "", "set_params"]], "gemclus.nonparametric": [[43, 1, 1, "", "CategoricalMMD"], [44, 1, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "fit_predict"], [43, 2, 1, "", "get_gemini"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "predict"], [43, 2, 1, "", "predict_proba"], [43, 2, 1, "", "score"], [43, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "fit_predict"], [44, 2, 1, "", "get_gemini"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "predict_proba"], [44, 2, 1, "", "score"], [44, 2, 1, "", "set_params"]], "gemclus.sparse": [[45, 1, 1, "", "SparseLinearMI"], [46, 1, 1, "", "SparseLinearMMD"], [47, 1, 1, "", "SparseMLPMMD"]], "gemclus.sparse.SparseLinearMI": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "fit_predict"], [45, 2, 1, "", "get_gemini"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "get_selection"], [45, 2, 1, "", "path"], [45, 2, 1, "", "predict"], [45, 2, 1, "", "predict_proba"], [45, 2, 1, "", "score"], [45, 2, 1, "", "set_params"]], "gemclus.sparse.SparseLinearMMD": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "fit_predict"], [46, 2, 1, "", "get_gemini"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "get_selection"], [46, 2, 1, "", "path"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "predict_proba"], [46, 2, 1, "", "score"], [46, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "fit_predict"], [47, 2, 1, "", "get_gemini"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "get_selection"], [47, 2, 1, "", "path"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "predict_proba"], [47, 2, 1, "", "score"], [47, 2, 1, "", "set_params"]], "gemclus.tree": [[48, 1, 1, "", "Douglas"], [49, 1, 1, "", "Kauri"], [50, 0, 1, "", "print_kauri_tree"]], "gemclus.tree.Douglas": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "find_active_points"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "fit_predict"], [48, 2, 1, "", "get_gemini"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "predict_proba"], [48, 2, 1, "", "score"], [48, 2, 1, "", "set_params"]], "gemclus.tree.Kauri": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "fit_predict"], [49, 2, 1, "", "get_params"], [49, 2, 1, "", "predict"], [49, 2, 1, "", "score"], [49, 2, 1, "", "set_params"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"gemclu": [0, 12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "api": 0, "score": [0, 7, 19, 20], "gemini": [0, 7, 15, 19, 20, 33, 34, 35, 36, 37, 51, 52, 53], "cluster": [0, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 51, 52], "model": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25], "dens": 0, "nonparametr": [0, 13, 43, 44], "spars": [0, 2, 3, 4, 45, 46, 47], "tree": [0, 7, 23, 24, 25, 48, 49, 50], "constraint": [0, 9], "dataset": [0, 2, 3, 4, 5, 9, 11, 18, 20, 24, 25], "gener": [0, 7, 14, 15, 16], "featur": [1, 2, 3, 4, 5, 7, 52], "select": [1, 2, 3, 4, 5, 7, 52], "us": [2, 3, 4, 25, 27, 28, 30, 31, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "mmd": [2, 4, 15], "ovo": 2, "logist": [2, 3, 18], "regress": [2, 3, 18], "load": [2, 3, 4, 5, 9, 18, 20, 24, 25], "simpl": [2, 3, 4, 5, 18, 20], "synthet": [2, 3, 4, 5, 18], "train": [2, 3, 4, 5, 11, 13, 14, 16, 17, 18, 20], "path": [2, 4, 5], "result": [2, 4, 5, 9, 12], "final": [2, 3, 4, 13, 14, 15, 16, 17, 18], "linear": [3, 5, 25, 38, 39, 40], "mi": [3, 33], "ova": 4, "mlp": [4, 15, 41, 42], "group": 5, "comput": [6, 10, 13, 16, 21, 22, 26], "time": [6, 10, 21, 22, 26], "exampl": [7, 14, 15, 27, 28, 30, 31, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53], "discrimin": [7, 12, 51, 52, 53], "consensu": [7, 8, 9], "link": 9, "sampl": [9, 11, 13, 16, 17], "pair": 9, "multipl": 9, "build": [9, 12, 24, 25], "matrix": 9, "creat": [9, 12, 13, 15, 24, 25], "optimis": 9, "add": 9, "must": 9, "cannot": 9, "plot": [9, 12, 15], "compar": 11, "circl": 11, "kernel": [11, 25], "chang": 11, "draw": [11, 13, 16, 17], "displai": 11, "predict": 11, "decis": [11, 14, 16], "boundari": [11, 14, 16], "extend": 12, "your": 12, "own": 12, "custom": 12, "test": 12, "fit": [12, 15, 24], "procedur": 12, "graph": 13, "node": 13, "from": [13, 17], "gmm": [13, 17], "edg": 13, "pre": [13, 16], "specif": [13, 16], "metric": [13, 16], "between": [13, 16], "map": 14, "mixtur": 14, "gaussian": 14, "low": 14, "degre": 14, "student": 14, "distribut": [14, 53], "data": [14, 15, 28, 29, 30, 31, 32], "an": [15, 25], "introduc": 15, "two": [16, 20], "interlac": 16, "moon": 16, "non": 17, "parametr": 17, "rim": [18, 40], "ani": 20, "real": 20, "supervis": 20, "differenti": 24, "unsupervis": [24, 25], "dougla": [24, 48], "kmean": 25, "object": 25, "kauri": [25, 49], "first": 25, "second": 25, "addit": 25, "chi2": 25, "evalu": 25, "perform": 25, "visualis": 25, "structur": 25, "add_mlcl_constraint": 27, "celeux_on": 28, "celeux_two": 29, "draw_gmm": 30, "gstm": 31, "multivariate_student_t": 32, "mmdova": 34, "mmdovo": 35, "wassersteinova": 36, "wassersteinovo": 37, "linearmmd": 38, "linearwasserstein": 39, "mlpmmd": 41, "mlpwasserstein": 42, "categoricalmmd": 43, "categoricalwasserstein": 44, "sparselinearmi": 45, "sparselinearmmd": 46, "sparsemlpmmd": 47, "print_kauri_tre": 50, "welcom": 51, "document": 51, "content": [51, 53], "A": 51, "packag": [51, 53], "instal": 51, "offici": 51, "latest": 51, "version": 51, "refer": [51, 52], "acknowledg": 51, "quick": 52, "start": 52, "what": [52, 53], "i": 52, "do": 52, "user": 53, "guid": 53, "which": 53, "ar": 53, "implement": 53, "avail": 53, "basic": 53}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"GEMCLUS API": [[0, "gemclus-api"]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [7, "scoring-with-gemini"], [19, "scoring-with-gemini"], [20, "scoring-with-gemini"]], "Clustering models": [[0, "clustering-models"]], "Dense models": [[0, "dense-models"]], "Nonparametric models": [[0, "nonparametric-models"]], "Sparse models": [[0, "sparse-models"]], "Tree models": [[0, "tree-models"]], "Constraints": [[0, "constraints"]], "Dataset generation": [[0, "dataset-generation"]], "Feature selection": [[1, "feature-selection"], [7, "feature-selection"]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[2, "feature-selection-using-the-sparse-mmd-ovo-logistic-regression"]], "Load a simple synthetic dataset": [[2, "load-a-simple-synthetic-dataset"], [3, "load-a-simple-synthetic-dataset"], [4, "load-a-simple-synthetic-dataset"], [5, "load-a-simple-synthetic-dataset"], [18, "load-a-simple-synthetic-dataset"]], "Train the model": [[2, "train-the-model"], [3, "train-the-model"], [4, "train-the-model"], [5, "train-the-model"], [13, "train-the-model"], [16, "train-the-model"], [17, "train-the-model"], [18, "train-the-model"]], "Path results": [[2, "path-results"], [4, "path-results"], [5, "path-results"]], "Final Clustering": [[2, "final-clustering"], [3, "final-clustering"], [4, "final-clustering"], [13, "final-clustering"], [14, "final-clustering"], [16, "final-clustering"], [17, "final-clustering"], [18, "final-clustering"]], "Feature selection using the Sparse Linear MI (Logistic regression)": [[3, "feature-selection-using-the-sparse-linear-mi-logistic-regression"]], "Feature selection using the Sparse MMD OvA (MLP)": [[4, "feature-selection-using-the-sparse-mmd-ova-mlp"]], "Grouped Feature selection with a linear model": [[5, "grouped-feature-selection-with-a-linear-model"]], "Computation times": [[6, "computation-times"], [10, "computation-times"], [21, "computation-times"], [22, "computation-times"], [26, "computation-times"]], "General examples": [[7, "general-examples"]], "Discriminative clustering": [[7, "discriminative-clustering"]], "Consensus clustering": [[7, "consensus-clustering"], [8, "consensus-clustering"]], "Trees": [[7, "trees"], [23, "trees"]], "Consensus clustering with linking constraints on sample pairs": [[9, "consensus-clustering-with-linking-constraints-on-sample-pairs"]], "Load the dataset": [[9, "load-the-dataset"], [24, "load-the-dataset"], [25, "load-the-dataset"]], "Multiple model clustering": [[9, "multiple-model-clustering"]], "Build the consensus matrix": [[9, "build-the-consensus-matrix"]], "Create the consensus clustering model": [[9, "create-the-consensus-clustering-model"]], "Optimise the results with linking constraints": [[9, "optimise-the-results-with-linking-constraints"]], "Add must-link / cannot-link constraint": [[9, "add-must-link-cannot-link-constraint"]], "Plotting the consensus matrix": [[9, "plotting-the-consensus-matrix"]], "Comparative clustering of circles dataset with kernel change": [[11, "comparative-clustering-of-circles-dataset-with-kernel-change"]], "Draw samples for the circle dataset": [[11, "draw-samples-for-the-circle-dataset"]], "Training clustering models": [[11, "training-clustering-models"]], "Display predictions and decision boundaries": [[11, "display-predictions-and-decision-boundaries"]], "Extending GemClus to build your own discriminative clustering model": [[12, "extending-gemclus-to-build-your-own-discriminative-clustering-model"]], "Create the custom model": [[12, "create-the-custom-model"]], "Test the fitting procedure and plot the clustering results": [[12, "test-the-fitting-procedure-and-plot-the-clustering-results"]], "Graph node clustering with a nonparametric model": [[13, "graph-node-clustering-with-a-nonparametric-model"]], "Draw samples from a GMM": [[13, "draw-samples-from-a-gmm"], [17, "draw-samples-from-a-gmm"]], "Create the graph edges": [[13, "create-the-graph-edges"]], "Pre-compute a specific metric between samples": [[13, "pre-compute-a-specific-metric-between-samples"], [16, "pre-compute-a-specific-metric-between-samples"]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[14, "example-of-decision-boundary-map-for-a-mixture-of-gaussian-and-low-degree-student-distributions"]], "Generate the data": [[14, "generate-the-data"]], "Train the model for clustering": [[14, "train-the-model-for-clustering"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[15, "an-introducing-example-to-clustering-with-an-mlp-and-the-mmd-gemini"]], "Generate data": [[15, "generate-data"]], "Create the MLP clustering model and fit it": [[15, "create-the-mlp-clustering-model-and-fit-it"]], "Plot the final clustering": [[15, "plot-the-final-clustering"]], "Drawing a decision boundary between two interlacing moons": [[16, "drawing-a-decision-boundary-between-two-interlacing-moons"]], "Generate two interlacing moons": [[16, "generate-two-interlacing-moons"]], "Non parametric clustering": [[17, "non-parametric-clustering"]], "Simple logistic regression with RIM": [[18, "simple-logistic-regression-with-rim"]], "Scoring any model with GEMINI": [[20, "scoring-any-model-with-gemini"]], "Load a simple real dataset": [[20, "load-a-simple-real-dataset"]], "Train two supervised models": [[20, "train-two-supervised-models"]], "Supervised Scoring with GEMINI": [[20, "supervised-scoring-with-gemini"]], "Building a differentiable unsupervised tree: DOUGLAS": [[24, "building-a-differentiable-unsupervised-tree-douglas"]], "Create the douglas tree and fit it": [[24, "create-the-douglas-tree-and-fit-it"]], "Building an unsupervised tree with kernel-kmeans objective: KAURI": [[25, "building-an-unsupervised-tree-with-kernel-kmeans-objective-kauri"]], "Create a first tree using a linear kernel": [[25, "create-a-first-tree-using-a-linear-kernel"]], "Create a second tree using an additive chi2 kernel": [[25, "create-a-second-tree-using-an-additive-chi2-kernel"]], "Evaluate the performances of the model": [[25, "evaluate-the-performances-of-the-model"]], "Visualise the tree structure": [[25, "visualise-the-tree-structure"]], "gemclus.add_mlcl_constraint": [[27, "gemclus-add-mlcl-constraint"]], "Examples using gemclus.add_mlcl_constraint": [[27, "examples-using-gemclus-add-mlcl-constraint"]], "gemclus.data.celeux_one": [[28, "gemclus-data-celeux-one"]], "Examples using gemclus.data.celeux_one": [[28, "examples-using-gemclus-data-celeux-one"]], "gemclus.data.celeux_two": [[29, "gemclus-data-celeux-two"]], "gemclus.data.draw_gmm": [[30, "gemclus-data-draw-gmm"]], "Examples using gemclus.data.draw_gmm": [[30, "examples-using-gemclus-data-draw-gmm"]], "gemclus.data.gstm": [[31, "gemclus-data-gstm"]], "Examples using gemclus.data.gstm": [[31, "examples-using-gemclus-data-gstm"]], "gemclus.data.multivariate_student_t": [[32, "gemclus-data-multivariate-student-t"]], "gemclus.gemini.MI": [[33, "gemclus-gemini-mi"]], "gemclus.gemini.MMDOvA": [[34, "gemclus-gemini-mmdova"]], "Examples using gemclus.gemini.MMDOvA": [[34, "examples-using-gemclus-gemini-mmdova"]], "gemclus.gemini.MMDOvO": [[35, "gemclus-gemini-mmdovo"]], "gemclus.gemini.WassersteinOvA": [[36, "gemclus-gemini-wassersteinova"]], "Examples using gemclus.gemini.WassersteinOvA": [[36, "examples-using-gemclus-gemini-wassersteinova"]], "gemclus.gemini.WassersteinOvO": [[37, "gemclus-gemini-wassersteinovo"]], "gemclus.linear.LinearMMD": [[38, "gemclus-linear-linearmmd"]], "Examples using gemclus.linear.LinearMMD": [[38, "examples-using-gemclus-linear-linearmmd"]], "gemclus.linear.LinearWasserstein": [[39, "gemclus-linear-linearwasserstein"]], "Examples using gemclus.linear.LinearWasserstein": [[39, "examples-using-gemclus-linear-linearwasserstein"]], "gemclus.linear.RIM": [[40, "gemclus-linear-rim"]], "Examples using gemclus.linear.RIM": [[40, "examples-using-gemclus-linear-rim"]], "gemclus.mlp.MLPMMD": [[41, "gemclus-mlp-mlpmmd"]], "Examples using gemclus.mlp.MLPMMD": [[41, "examples-using-gemclus-mlp-mlpmmd"]], "gemclus.mlp.MLPWasserstein": [[42, "gemclus-mlp-mlpwasserstein"]], "Examples using gemclus.mlp.MLPWasserstein": [[42, "examples-using-gemclus-mlp-mlpwasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[43, "gemclus-nonparametric-categoricalmmd"]], "Examples using gemclus.nonparametric.CategoricalMMD": [[43, "examples-using-gemclus-nonparametric-categoricalmmd"]], "gemclus.nonparametric.CategoricalWasserstein": [[44, "gemclus-nonparametric-categoricalwasserstein"]], "Examples using gemclus.nonparametric.CategoricalWasserstein": [[44, "examples-using-gemclus-nonparametric-categoricalwasserstein"]], "gemclus.sparse.SparseLinearMI": [[45, "gemclus-sparse-sparselinearmi"]], "Examples using gemclus.sparse.SparseLinearMI": [[45, "examples-using-gemclus-sparse-sparselinearmi"]], "gemclus.sparse.SparseLinearMMD": [[46, "gemclus-sparse-sparselinearmmd"]], "Examples using gemclus.sparse.SparseLinearMMD": [[46, "examples-using-gemclus-sparse-sparselinearmmd"]], "gemclus.sparse.SparseMLPMMD": [[47, "gemclus-sparse-sparsemlpmmd"]], "Examples using gemclus.sparse.SparseMLPMMD": [[47, "examples-using-gemclus-sparse-sparsemlpmmd"]], "gemclus.tree.Douglas": [[48, "gemclus-tree-douglas"]], "Examples using gemclus.tree.Douglas": [[48, "examples-using-gemclus-tree-douglas"]], "gemclus.tree.Kauri": [[49, "gemclus-tree-kauri"]], "Examples using gemclus.tree.Kauri": [[49, "examples-using-gemclus-tree-kauri"]], "gemclus.tree.print_kauri_tree": [[50, "gemclus-tree-print-kauri-tree"]], "Examples using gemclus.tree.print_kauri_tree": [[50, "examples-using-gemclus-tree-print-kauri-tree"]], "Welcome to GemClus documentation!": [[51, "welcome-to-gemclus-documentation"]], "Contents": [[51, "contents"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[51, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "Installation": [[51, "installation"]], "Official package": [[51, "official-package"]], "Latest version": [[51, "latest-version"]], "Reference": [[51, "reference"]], "Acknowledgements": [[51, "acknowledgements"]], "Quick start on gemclus": [[52, "quick-start-on-gemclus"]], "What is GEMINI": [[52, "what-is-gemini"]], "Doing discriminative clustering": [[52, "doing-discriminative-clustering"]], "Selecting features in clustering": [[52, "selecting-features-in-clustering"]], "References": [[52, "references"]], "User Guide": [[53, "user-guide"]], "Content of the package": [[53, "content-of-the-package"]], "Which GEMINIs are implemented": [[53, "which-geminis-are-implemented"]], "What discriminative distributions are available": [[53, "what-discriminative-distributions-are-available"]], "Basic examples": [[53, "basic-examples"]]}, "indexentries": {"add_mlcl_constraint() (in module gemclus)": [[27, "gemclus.add_mlcl_constraint"]], "celeux_one() (in module gemclus.data)": [[28, "gemclus.data.celeux_one"]], "celeux_two() (in module gemclus.data)": [[29, "gemclus.data.celeux_two"]], "draw_gmm() (in module gemclus.data)": [[30, "gemclus.data.draw_gmm"]], "gstm() (in module gemclus.data)": [[31, "gemclus.data.gstm"]], "multivariate_student_t() (in module gemclus.data)": [[32, "gemclus.data.multivariate_student_t"]], "mi (class in gemclus.gemini)": [[33, "gemclus.gemini.MI"]], "__init__() (gemclus.gemini.mi method)": [[33, "gemclus.gemini.MI.__init__"]], "compute_affinity() (gemclus.gemini.mi method)": [[33, "gemclus.gemini.MI.compute_affinity"]], "evaluate() (gemclus.gemini.mi method)": [[33, "gemclus.gemini.MI.evaluate"]], "mmdova (class in gemclus.gemini)": [[34, "gemclus.gemini.MMDOvA"]], "__init__() (gemclus.gemini.mmdova method)": [[34, "gemclus.gemini.MMDOvA.__init__"]], "compute_affinity() (gemclus.gemini.mmdova method)": [[34, "gemclus.gemini.MMDOvA.compute_affinity"]], "evaluate() (gemclus.gemini.mmdova method)": [[34, "gemclus.gemini.MMDOvA.evaluate"]], "mmdovo (class in gemclus.gemini)": [[35, "gemclus.gemini.MMDOvO"]], "__init__() (gemclus.gemini.mmdovo method)": [[35, "gemclus.gemini.MMDOvO.__init__"]], "compute_affinity() (gemclus.gemini.mmdovo method)": [[35, "gemclus.gemini.MMDOvO.compute_affinity"]], "evaluate() (gemclus.gemini.mmdovo method)": [[35, "gemclus.gemini.MMDOvO.evaluate"]], "wassersteinova (class in gemclus.gemini)": [[36, "gemclus.gemini.WassersteinOvA"]], "__init__() (gemclus.gemini.wassersteinova method)": [[36, "gemclus.gemini.WassersteinOvA.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinova method)": [[36, "gemclus.gemini.WassersteinOvA.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinova method)": [[36, "gemclus.gemini.WassersteinOvA.evaluate"]], "wassersteinovo (class in gemclus.gemini)": [[37, "gemclus.gemini.WassersteinOvO"]], "__init__() (gemclus.gemini.wassersteinovo method)": [[37, "gemclus.gemini.WassersteinOvO.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinovo method)": [[37, "gemclus.gemini.WassersteinOvO.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinovo method)": [[37, "gemclus.gemini.WassersteinOvO.evaluate"]], "linearmmd (class in gemclus.linear)": [[38, "gemclus.linear.LinearMMD"]], "__init__() (gemclus.linear.linearmmd method)": [[38, "gemclus.linear.LinearMMD.__init__"]], "fit() (gemclus.linear.linearmmd method)": [[38, "gemclus.linear.LinearMMD.fit"]], "fit_predict() (gemclus.linear.linearmmd method)": [[38, "gemclus.linear.LinearMMD.fit_predict"]], "get_gemini() (gemclus.linear.linearmmd method)": [[38, "gemclus.linear.LinearMMD.get_gemini"]], "get_params() (gemclus.linear.linearmmd method)": [[38, "gemclus.linear.LinearMMD.get_params"]], "predict() (gemclus.linear.linearmmd method)": [[38, "gemclus.linear.LinearMMD.predict"]], "predict_proba() (gemclus.linear.linearmmd method)": [[38, "gemclus.linear.LinearMMD.predict_proba"]], "score() (gemclus.linear.linearmmd method)": [[38, "gemclus.linear.LinearMMD.score"]], "set_params() (gemclus.linear.linearmmd method)": [[38, "gemclus.linear.LinearMMD.set_params"]], "linearwasserstein (class in gemclus.linear)": [[39, "gemclus.linear.LinearWasserstein"]], "__init__() (gemclus.linear.linearwasserstein method)": [[39, "gemclus.linear.LinearWasserstein.__init__"]], "fit() (gemclus.linear.linearwasserstein method)": [[39, "gemclus.linear.LinearWasserstein.fit"]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[39, "gemclus.linear.LinearWasserstein.fit_predict"]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[39, "gemclus.linear.LinearWasserstein.get_gemini"]], "get_params() (gemclus.linear.linearwasserstein method)": [[39, "gemclus.linear.LinearWasserstein.get_params"]], "predict() (gemclus.linear.linearwasserstein method)": [[39, "gemclus.linear.LinearWasserstein.predict"]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[39, "gemclus.linear.LinearWasserstein.predict_proba"]], "score() (gemclus.linear.linearwasserstein method)": [[39, "gemclus.linear.LinearWasserstein.score"]], "set_params() (gemclus.linear.linearwasserstein method)": [[39, "gemclus.linear.LinearWasserstein.set_params"]], "rim (class in gemclus.linear)": [[40, "gemclus.linear.RIM"]], "__init__() (gemclus.linear.rim method)": [[40, "gemclus.linear.RIM.__init__"]], "fit() (gemclus.linear.rim method)": [[40, "gemclus.linear.RIM.fit"]], "fit_predict() (gemclus.linear.rim method)": [[40, "gemclus.linear.RIM.fit_predict"]], "get_gemini() (gemclus.linear.rim method)": [[40, "gemclus.linear.RIM.get_gemini"]], "get_params() (gemclus.linear.rim method)": [[40, "gemclus.linear.RIM.get_params"]], "predict() (gemclus.linear.rim method)": [[40, "gemclus.linear.RIM.predict"]], "predict_proba() (gemclus.linear.rim method)": [[40, "gemclus.linear.RIM.predict_proba"]], "score() (gemclus.linear.rim method)": [[40, "gemclus.linear.RIM.score"]], "set_params() (gemclus.linear.rim method)": [[40, "gemclus.linear.RIM.set_params"]], "mlpmmd (class in gemclus.mlp)": [[41, "gemclus.mlp.MLPMMD"]], "__init__() (gemclus.mlp.mlpmmd method)": [[41, "gemclus.mlp.MLPMMD.__init__"]], "fit() (gemclus.mlp.mlpmmd method)": [[41, "gemclus.mlp.MLPMMD.fit"]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[41, "gemclus.mlp.MLPMMD.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[41, "gemclus.mlp.MLPMMD.get_gemini"]], "get_params() (gemclus.mlp.mlpmmd method)": [[41, "gemclus.mlp.MLPMMD.get_params"]], "predict() (gemclus.mlp.mlpmmd method)": [[41, "gemclus.mlp.MLPMMD.predict"]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[41, "gemclus.mlp.MLPMMD.predict_proba"]], "score() (gemclus.mlp.mlpmmd method)": [[41, "gemclus.mlp.MLPMMD.score"]], "set_params() (gemclus.mlp.mlpmmd method)": [[41, "gemclus.mlp.MLPMMD.set_params"]], "mlpwasserstein (class in gemclus.mlp)": [[42, "gemclus.mlp.MLPWasserstein"]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.__init__"]], "fit() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.fit"]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.fit_predict"]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.get_gemini"]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.get_params"]], "predict() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.predict"]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.predict_proba"]], "score() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.score"]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.set_params"]], "categoricalmmd (class in gemclus.nonparametric)": [[43, "gemclus.nonparametric.CategoricalMMD"]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.__init__"]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.get_params"]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.predict_proba"]], "score() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.score"]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.set_params"]], "categoricalwasserstein (class in gemclus.nonparametric)": [[44, "gemclus.nonparametric.CategoricalWasserstein"]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[44, "gemclus.nonparametric.CategoricalWasserstein.__init__"]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[44, "gemclus.nonparametric.CategoricalWasserstein.fit"]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[44, "gemclus.nonparametric.CategoricalWasserstein.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[44, "gemclus.nonparametric.CategoricalWasserstein.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[44, "gemclus.nonparametric.CategoricalWasserstein.get_params"]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[44, "gemclus.nonparametric.CategoricalWasserstein.predict"]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[44, "gemclus.nonparametric.CategoricalWasserstein.predict_proba"]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[44, "gemclus.nonparametric.CategoricalWasserstein.score"]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[44, "gemclus.nonparametric.CategoricalWasserstein.set_params"]], "sparselinearmi (class in gemclus.sparse)": [[45, "gemclus.sparse.SparseLinearMI"]], "__init__() (gemclus.sparse.sparselinearmi method)": [[45, "gemclus.sparse.SparseLinearMI.__init__"]], "fit() (gemclus.sparse.sparselinearmi method)": [[45, "gemclus.sparse.SparseLinearMI.fit"]], "fit_predict() (gemclus.sparse.sparselinearmi method)": [[45, "gemclus.sparse.SparseLinearMI.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmi method)": [[45, "gemclus.sparse.SparseLinearMI.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmi method)": [[45, "gemclus.sparse.SparseLinearMI.get_params"]], "get_selection() (gemclus.sparse.sparselinearmi method)": [[45, "gemclus.sparse.SparseLinearMI.get_selection"]], "path() (gemclus.sparse.sparselinearmi method)": [[45, "gemclus.sparse.SparseLinearMI.path"]], "predict() (gemclus.sparse.sparselinearmi method)": [[45, "gemclus.sparse.SparseLinearMI.predict"]], "predict_proba() (gemclus.sparse.sparselinearmi method)": [[45, "gemclus.sparse.SparseLinearMI.predict_proba"]], "score() (gemclus.sparse.sparselinearmi method)": [[45, "gemclus.sparse.SparseLinearMI.score"]], "set_params() (gemclus.sparse.sparselinearmi method)": [[45, "gemclus.sparse.SparseLinearMI.set_params"]], "sparselinearmmd (class in gemclus.sparse)": [[46, "gemclus.sparse.SparseLinearMMD"]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[46, "gemclus.sparse.SparseLinearMMD.__init__"]], "fit() (gemclus.sparse.sparselinearmmd method)": [[46, "gemclus.sparse.SparseLinearMMD.fit"]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[46, "gemclus.sparse.SparseLinearMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[46, "gemclus.sparse.SparseLinearMMD.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[46, "gemclus.sparse.SparseLinearMMD.get_params"]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[46, "gemclus.sparse.SparseLinearMMD.get_selection"]], "path() (gemclus.sparse.sparselinearmmd method)": [[46, "gemclus.sparse.SparseLinearMMD.path"]], "predict() (gemclus.sparse.sparselinearmmd method)": [[46, "gemclus.sparse.SparseLinearMMD.predict"]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[46, "gemclus.sparse.SparseLinearMMD.predict_proba"]], "score() (gemclus.sparse.sparselinearmmd method)": [[46, "gemclus.sparse.SparseLinearMMD.score"]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[46, "gemclus.sparse.SparseLinearMMD.set_params"]], "sparsemlpmmd (class in gemclus.sparse)": [[47, "gemclus.sparse.SparseMLPMMD"]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[47, "gemclus.sparse.SparseMLPMMD.__init__"]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[47, "gemclus.sparse.SparseMLPMMD.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[47, "gemclus.sparse.SparseMLPMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[47, "gemclus.sparse.SparseMLPMMD.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[47, "gemclus.sparse.SparseMLPMMD.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[47, "gemclus.sparse.SparseMLPMMD.get_selection"]], "path() (gemclus.sparse.sparsemlpmmd method)": [[47, "gemclus.sparse.SparseMLPMMD.path"]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[47, "gemclus.sparse.SparseMLPMMD.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[47, "gemclus.sparse.SparseMLPMMD.predict_proba"]], "score() (gemclus.sparse.sparsemlpmmd method)": [[47, "gemclus.sparse.SparseMLPMMD.score"]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[47, "gemclus.sparse.SparseMLPMMD.set_params"]], "douglas (class in gemclus.tree)": [[48, "gemclus.tree.Douglas"]], "__init__() (gemclus.tree.douglas method)": [[48, "gemclus.tree.Douglas.__init__"]], "find_active_points() (gemclus.tree.douglas method)": [[48, "gemclus.tree.Douglas.find_active_points"]], "fit() (gemclus.tree.douglas method)": [[48, "gemclus.tree.Douglas.fit"]], "fit_predict() (gemclus.tree.douglas method)": [[48, "gemclus.tree.Douglas.fit_predict"]], "get_gemini() (gemclus.tree.douglas method)": [[48, "gemclus.tree.Douglas.get_gemini"]], "get_params() (gemclus.tree.douglas method)": [[48, "gemclus.tree.Douglas.get_params"]], "predict() (gemclus.tree.douglas method)": [[48, "gemclus.tree.Douglas.predict"]], "predict_proba() (gemclus.tree.douglas method)": [[48, "gemclus.tree.Douglas.predict_proba"]], "score() (gemclus.tree.douglas method)": [[48, "gemclus.tree.Douglas.score"]], "set_params() (gemclus.tree.douglas method)": [[48, "gemclus.tree.Douglas.set_params"]], "kauri (class in gemclus.tree)": [[49, "gemclus.tree.Kauri"]], "__init__() (gemclus.tree.kauri method)": [[49, "gemclus.tree.Kauri.__init__"]], "fit() (gemclus.tree.kauri method)": [[49, "gemclus.tree.Kauri.fit"]], "fit_predict() (gemclus.tree.kauri method)": [[49, "gemclus.tree.Kauri.fit_predict"]], "get_params() (gemclus.tree.kauri method)": [[49, "gemclus.tree.Kauri.get_params"]], "predict() (gemclus.tree.kauri method)": [[49, "gemclus.tree.Kauri.predict"]], "score() (gemclus.tree.kauri method)": [[49, "gemclus.tree.Kauri.score"]], "set_params() (gemclus.tree.kauri method)": [[49, "gemclus.tree.Kauri.set_params"]], "print_kauri_tree() (in module gemclus.tree)": [[50, "gemclus.tree.print_kauri_tree"]]}})