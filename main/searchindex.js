Search.setIndex({"docnames": ["api", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_feature_selection_linear", "auto_examples/feature_selection/plot_feature_selection_mlp", "auto_examples/feature_selection/plot_grouped_selection", "auto_examples/feature_selection/sg_execution_times", "auto_examples/index", "auto_examples/plot_graph_node_clustering", "auto_examples/plot_gstm", "auto_examples/plot_intro_mlp_mmd", "auto_examples/plot_moon_clustering", "auto_examples/plot_nonparametric_clustering", "auto_examples/plot_rim", "auto_examples/scoring/index", "auto_examples/scoring/plot_gemini_scoring", "auto_examples/scoring/sg_execution_times", "auto_examples/sg_execution_times", "generated/gemclus.data.celeux_one", "generated/gemclus.data.celeux_two", "generated/gemclus.data.draw_gmm", "generated/gemclus.data.gstm", "generated/gemclus.data.multivariate_student_t", "generated/gemclus.gemini.MI", "generated/gemclus.gemini.MMDOvA", "generated/gemclus.gemini.MMDOvO", "generated/gemclus.gemini.WassersteinOvA", "generated/gemclus.gemini.WassersteinOvO", "generated/gemclus.linear.LinearMMD", "generated/gemclus.linear.LinearWasserstein", "generated/gemclus.linear.RIM", "generated/gemclus.mlp.MLPMMD", "generated/gemclus.mlp.MLPWasserstein", "generated/gemclus.nonparametric.CategoricalMMD", "generated/gemclus.nonparametric.CategoricalWasserstein", "generated/gemclus.sparse.SparseLinearMMD", "generated/gemclus.sparse.SparseMLPMMD", "index", "quick_start", "user_guide"], "filenames": ["api.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_feature_selection_linear.rst", "auto_examples/feature_selection/plot_feature_selection_mlp.rst", "auto_examples/feature_selection/plot_grouped_selection.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/plot_graph_node_clustering.rst", "auto_examples/plot_gstm.rst", "auto_examples/plot_intro_mlp_mmd.rst", "auto_examples/plot_moon_clustering.rst", "auto_examples/plot_nonparametric_clustering.rst", "auto_examples/plot_rim.rst", "auto_examples/scoring/index.rst", "auto_examples/scoring/plot_gemini_scoring.rst", "auto_examples/scoring/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "generated/gemclus.data.celeux_one.rst", "generated/gemclus.data.celeux_two.rst", "generated/gemclus.data.draw_gmm.rst", "generated/gemclus.data.gstm.rst", "generated/gemclus.data.multivariate_student_t.rst", "generated/gemclus.gemini.MI.rst", "generated/gemclus.gemini.MMDOvA.rst", "generated/gemclus.gemini.MMDOvO.rst", "generated/gemclus.gemini.WassersteinOvA.rst", "generated/gemclus.gemini.WassersteinOvO.rst", "generated/gemclus.linear.LinearMMD.rst", "generated/gemclus.linear.LinearWasserstein.rst", "generated/gemclus.linear.RIM.rst", "generated/gemclus.mlp.MLPMMD.rst", "generated/gemclus.mlp.MLPWasserstein.rst", "generated/gemclus.nonparametric.CategoricalMMD.rst", "generated/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/gemclus.sparse.SparseLinearMMD.rst", "generated/gemclus.sparse.SparseMLPMMD.rst", "index.rst", "quick_start.rst", "user_guide.rst"], "titles": ["GEMCLUS API", "Feature selection", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Grouped Feature selection with a linear model", "Computation times", "General examples", "Graph node clustering with a nonparametric model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Scoring with GEMINI", "Scoring any model with GEMINI", "Computation times", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "Welcome to GemClus documentation!", "Quick start on gemclus", "User guide : contents"], "terms": {"The": [0, 2, 3, 4, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "packag": [0, 37], "current": [0, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 38], "contain": [0, 19, 27, 28, 29, 30, 31, 32, 33, 34, 35], "simpl": [0, 6, 7, 11, 16, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "mlp": [0, 1, 5, 6, 8, 10, 16, 35, 37], "logist": [0, 1, 3, 4, 5, 6, 14, 16, 17, 27, 28, 29, 34, 35, 38], "regress": [0, 1, 3, 4, 5, 6, 14, 16, 17, 27, 28, 29, 34, 35, 38], "all": [0, 2, 3, 4, 6, 7, 10, 14, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38], "featur": [0, 5, 8, 9, 12, 17, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "well": [0, 8, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "sparsiti": [0, 34, 35, 37, 38], "constrain": [0, 4, 38], "variant": 0, "follow": [0, 7, 29, 36], "class": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38], "implement": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36], "basic": 0, "evalu": [0, 2, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "ani": [0, 6, 13, 15, 22, 25, 34, 35, 37, 38], "condit": [0, 22, 23, 24, 25, 26, 32, 33], "distribut": [0, 2, 3, 4, 6, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37], "These": 0, "ar": [0, 2, 3, 4, 7, 8, 10, 11, 12, 17, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "base": [0, 6, 17, 18, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38], "standard": 0, "like": [0, 8, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "one": [0, 4, 14, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38], "hidden": [0, 30, 31, 35, 38], "layer": [0, 30, 31, 34, 35, 38], "neural": [0, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "network": [0, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "have": [0, 14, 27, 28, 29, 30, 31, 32, 33, 34, 35], "paramet": [0, 4, 7, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "assign": [0, 4, 7, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "data": [0, 2, 4, 7, 11, 12, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "sampl": [0, 2, 3, 8, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "accord": [0, 7, 12], "indic": [0, 7, 34, 35], "consequ": [0, 8, 32, 33], "do": [0, 7, 10, 12, 14, 32, 33, 36], "depend": [0, 2, 3, 4, 7, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "locat": [0, 20], "overal": [0, 36], "can": [0, 11, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "us": [0, 1, 4, 5, 6, 7, 10, 11, 12, 14, 23, 24, 26, 27, 37, 38], "decis": [0, 6, 12, 16, 20, 28, 31, 38], "boundari": [0, 6, 12, 16, 20, 28, 31, 38], "hyper": 0, "howev": [0, 38], "underli": 0, "cannot": 0, "unseen": 0, "predict": [0, 2, 3, 8, 9, 10, 12, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "train": [0, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "progress": [0, 2, 3, 4, 27, 28, 29, 30, 31, 32, 33, 34, 35], "remov": 0, "thei": [0, 14], "select": [0, 5, 17, 18, 34, 35, 38], "subset": 0, "which": [0, 2, 3, 4, 7, 10, 12, 17, 18, 19, 20, 22, 23, 24, 25, 26, 34, 35, 37], "mai": [0, 8, 36, 37], "enhanc": 0, "interpret": 0, "thi": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 17, 18, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "function": [0, 7, 10, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "synthet": 0, "spars": [1, 4, 5, 6, 7, 10, 17, 27, 28, 29, 30, 31, 32, 33, 37, 38], "mmd": [1, 5, 6, 16, 17, 23, 24, 27, 28, 29, 30, 31, 32, 34, 35, 38], "ovo": [1, 5, 6, 7, 9, 11, 17, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38], "group": [1, 3, 5, 6, 34, 35, 38], "linear": [1, 5, 6, 8, 10, 12, 14, 23, 24, 30, 31, 32, 34, 35, 38], "model": [1, 5, 6, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38], "ova": [1, 5, 6, 14, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38], "go": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 36], "end": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14], "download": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 36], "full": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14], "exampl": [2, 3, 4, 7, 10, 11, 12, 14, 16, 27, 36], "code": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14], "In": [2, 3, 4, 7, 9, 12, 20, 36, 37, 38], "we": [2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 36, 37, 38], "ask": [2, 3, 4, 37], "gemclu": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 38], "sparselinearmmd": [2, 4, 35, 38], "perform": [2, 3, 4, 7, 14, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "where": [2, 3, 4, 8, 10, 14, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "regularis": [2, 3, 4, 12, 29], "penalti": [2, 3, 4, 12, 14, 29, 34, 35, 38], "i": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "increas": [2, 3, 4, 34, 35], "until": [2, 3, 4, 34, 35], "2": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 17, 18, 20, 27, 28, 29, 30, 31, 34, 35, 37, 38], "discard": [2, 3, 4], "keep": [2, 3, 38], "best": [2, 3, 34, 35], "weight": [2, 3, 27, 28, 29, 30, 31, 32, 33, 34, 35], "minimum": [2, 3, 34, 35], "number": [2, 3, 7, 11, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "maintain": [2, 3], "gemini": [2, 3, 4, 7, 8, 10, 11, 15, 16, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35], "score": [2, 3, 4, 7, 11, 12, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "close": [2, 3, 17, 20], "90": [2, 3], "maximum": [2, 3, 7, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35], "valu": [2, 3, 7, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "encount": [2, 3], "dure": [2, 3, 27, 28, 29, 30, 31, 32, 33, 34, 35], "consist": [2, 3, 4, 12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "3": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 17, 18, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "isotrop": [2, 3, 17], "gaussian": [2, 3, 6, 7, 12, 14, 16, 17, 18, 19, 20, 28], "so": [2, 3, 8, 10, 14, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "find": [2, 3, 4, 8, 10, 36], "5d": 2, "20": [2, 17, 30, 31, 35], "noisi": [2, 3, 4, 17, 18], "variabl": [2, 3, 4, 7, 17, 18, 34, 35], "thu": [2, 3, 4, 37], "optim": [2, 3, 4, 10], "solut": [2, 3, 4, 10, 34, 35], "should": [2, 3, 4, 22, 23, 24, 25, 26], "onli": [2, 3, 4, 7, 8, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38], "5": [2, 3, 4, 7, 8, 9, 10, 11, 12, 17, 34, 35], "relev": [2, 3, 4], "suffici": [2, 3, 4], "get": [2, 3, 4, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "correct": [2, 3, 4], "import": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 27, 28, 29, 30, 31, 34, 35, 37], "numpi": [2, 3, 4, 7, 8, 10, 11, 12, 14, 36], "np": [2, 3, 4, 7, 8, 10, 11, 12, 14], "from": [2, 3, 4, 8, 9, 10, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38], "matplotlib": [2, 3, 4, 7, 8, 9, 10, 11, 12], "pyplot": [2, 3, 4, 7, 8, 9, 10, 11, 12], "plt": [2, 3, 4, 7, 8, 9, 10, 11, 12], "sklearn": [2, 3, 7, 9, 10, 11, 12, 14, 27, 28, 29, 30, 31, 34, 35, 37, 38], "metric": [2, 11, 14, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "celeux_on": 2, "gener": [2, 3, 4, 7, 11, 12, 14, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35], "separ": [2, 3, 7, 11, 12], "addit": [2, 17, 18, 37], "p": [2, 7, 17, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "independ": [2, 17, 37], "x": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38], "y": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38], "n": [2, 4, 7, 8, 11, 17, 18, 19, 20, 21], "300": [2, 17], "mu": [2, 17], "1": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 17, 20, 27, 28, 29, 30, 31, 34, 35, 37], "7": [2, 4, 17], "random_st": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35], "0": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33, 34, 35], "creat": [2, 3, 4, 10, 11, 12], "just": [2, 3, 4, 12], "call": [2, 3, 4, 7, 11, 27, 28, 29, 30, 31, 32, 33, 34, 35], "method": [2, 3, 4, 7, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "iter": [2, 3, 4, 27, 28, 29, 30, 31, 32, 33, 34, 35], "through": [2, 3, 4, 35, 36], "gradient": [2, 3, 4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "descent": [2, 3, 4, 27, 28, 29, 30, 31, 32, 33, 34, 35], "clf": [2, 3, 4, 8, 9, 12, 27, 28, 29, 30, 31, 34, 35], "alpha": [2, 3, 4, 7, 8, 10, 12, 20, 34, 35], "true": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38], "search": [2, 3, 4], "elimin": [2, 3, 4, 35], "best_weight": [2, 3, 4, 34, 35], "n_featur": [2, 3, 4, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "take": [2, 3, 4, 8, 12, 37], "look": [2, 3, 4, 12, 37], "how": [2, 3, 4, 6, 11, 12, 14, 17, 20, 37, 38], "decreas": [2, 3], "print": [2, 3, 4, 7, 11, 12, 14, 27, 28, 29, 30, 31, 32, 33, 34, 35], "f": [2, 3, 4, 7, 11, 14, 20, 34, 35, 36, 37], "top": [2, 3, 4, 8, 34, 35], "wa": [2, 3, 4, 17, 18, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "max": [2, 3, 4, 10, 12], "settl": [2, 3, 4], "an": [2, 3, 4, 6, 7, 8, 10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38], "optimum": [2, 3, 4], "9": [2, 3, 4, 8, 34, 35], "highlight": [2, 3], "along": [2, 3, 10], "titl": [2, 3, 36], "plot": [2, 3, 7, 8], "xlabel": [2, 3, 8, 9, 12], "ylabel": [2, 3, 8, 9, 12], "ylim": [2, 3, 8], "show": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14], "expect": [2, 8, 37], "first": [2, 14, 30, 31, 35, 37], "linalg": 2, "norm": [2, 38], "axi": [2, 3, 4, 10], "ord": 2, "730431446195361": 2, "0285492563142022": 2, "725694330682782": 2, "arrai": [2, 3, 4, 7, 11, 17, 18, 19, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35], "4": [2, 3, 4, 7, 8, 11, 18], "now": [2, 3, 8, 12, 14], "y_pred": [2, 3, 7, 8, 9, 10, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "ari": [2, 7, 11], "adjusted_rand_scor": [2, 7, 11], "8752937655453139": 2, "total": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16], "run": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "time": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 37], "script": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14], "minut": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14], "28": [2, 5], "377": [2, 5], "second": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14], "python": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14], "sourc": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "plot_feature_selection_linear": [2, 5], "py": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16], "jupyt": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14], "notebook": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14], "ipynb": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14], "galleri": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 38], "sphinx": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14], "sparsemlpmmd": [3, 34], "2d": [3, 18], "48": 3, "make_blob": [3, 9, 12], "center": [3, 9, 12], "cluster_std": [3, 9, 12], "n_sampl": [3, 9, 10, 12, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "200": [3, 8, 9, 10, 12], "add": [3, 38], "extra": 3, "random": [3, 4, 7, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35], "seed": [3, 4, 7], "concaten": [3, 4, 17], "normal": [3, 4], "scale": [3, 17, 19, 21, 36], "size": [3, 4, 7, 10, 27, 28, 29, 30, 31, 32, 33, 34, 35], "18": 3, "batch_siz": [3, 4, 8, 27, 28, 29, 30, 31, 34, 35], "50": [3, 4, 7, 8, 9, 10, 12], "max_it": [3, 4, 27, 28, 29, 30, 31, 32, 33, 34, 35], "25": 3, "learning_r": [3, 4, 7, 10, 11, 27, 28, 29, 30, 31, 32, 33, 34, 35], "001": [3, 27, 28, 29, 30, 31, 32, 33, 34, 35], "our": [3, 4, 6, 7, 10, 36, 37], "figur": 3, "figsiz": 3, "10": [3, 4, 8, 12, 21, 34, 35, 37], "subplot": 3, "lasso": [3, 34, 35, 38], "tight_layout": 3, "get_select": [3, 4, 34, 35], "4596486286280377": 3, "5824499242836225": 3, "4242049318552603": 3, "x_0": [3, 9, 12], "x_1": [3, 9, 12], "x_2": [3, 9, 12], "ax0": [3, 9, 12], "scatter": [3, 4, 7, 8, 9, 10, 11, 12], "c": [3, 4, 7, 8, 9, 10, 11, 12, 17, 18, 20, 36, 37], "crimson": [3, 9, 12], "": [3, 7, 9, 12, 14, 27, 28, 29, 30, 31, 32, 33, 34, 35], "ax1": [3, 9, 12], "deepskyblu": [3, 9, 12], "ax2": [3, 9, 12], "darkgreen": [3, 9, 12], "leg": [3, 9, 12], "legend": [3, 9, 12], "loc": [3, 9, 12, 19, 21], "upper": [3, 9, 12], "left": [3, 9, 12, 37], "fancybox": [3, 9, 12], "scatterpoint": [3, 9, 12], "get_fram": [3, 9, 12], "set_alpha": [3, 9, 12], "6": [3, 4], "431": [3, 5, 14], "plot_feature_selection_mlp": [3, 5], "moreov": [4, 37], "produc": 4, "some": [4, 6, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "categor": [4, 32, 33], "hot": [4, 34, 35], "encod": [4, 34, 35], "consid": [4, 27, 28, 29, 30, 31, 34, 35], "altogeth": 4, "option": [4, 10, 27, 28, 29, 30, 31, 32, 33, 34, 35], "binomi": [4, 7], "cluster": [4, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "8": [4, 7, 10], "inform": [4, 12, 14, 18, 20, 22, 27, 28, 29, 30, 31, 34, 35, 36, 37], "outcom": 4, "multinomi": 4, "x1_class_1": 4, "pval": [4, 19], "05": [4, 10, 34, 35], "45": 4, "x2_class_1": 4, "x_class_1": 4, "x1_class_2": 4, "x2_class_2": 4, "x_class_2": 4, "x_inform": 4, "x_nois": 4, "100": [4, 7, 11], "repeat": 4, "arang": 4, "final": 4, "write": 4, "out": [4, 36], "partit": [4, 34, 35], "rang": [4, 7], "shape": [4, 7, 10, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "visualis": 4, "def": 4, "rand_jitt": 4, "return": [4, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "randn": 4, "len": 4, "01": [4, 15, 34, 35], "argmax": [4, 12], "red": 4, "blue": [4, 8], "11": 4, "12": [4, 22, 23, 24, 25, 26], "13": 4, "14": [4, 18], "15": 4, "1e": [4, 7, 10, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "lower": 4, "threshold": [4, 10], "80": 4, "keep_threshold": [4, 34, 35], "4323062818447518": 4, "8434561566009591": 4, "6747649252807673": 4, "299": [4, 5], "plot_grouped_select": [4, 5], "00": [5, 15, 16], "39": 5, "107": 5, "execut": [5, 15, 16], "auto_examples_feature_select": 5, "file": [5, 15, 16], "mb": [5, 15, 16], "06": 5, "04": 5, "give": [6, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "here": [6, 7, 8, 14, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "introduc": [6, 16, 30], "non": [6, 7, 16, 18, 19, 32], "parametr": [6, 7, 16, 19, 32, 37], "map": [6, 16, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35], "mixtur": [6, 7, 12, 16, 17, 18, 19, 20, 28], "low": [6, 16, 20, 28], "degre": [6, 16, 20, 21, 28], "student": [6, 16, 20, 21, 28], "draw": [6, 8, 16, 17, 18, 19, 20, 21, 31], "between": [6, 16, 22, 23, 24, 25, 26, 31, 35, 37, 38], "two": [6, 16, 24, 26, 30, 31, 34, 37], "interlac": [6, 16, 31], "moon": [6, 16, 31], "rim": [6, 16], "graph": [6, 10, 11, 16, 19, 33], "node": [6, 11, 16, 19, 33], "nonparametr": [6, 11, 16, 19], "auto_examples_python": 6, "zip": 6, "auto_examples_jupyt": 6, "simplifi": 7, "version": [7, 34, 35, 37, 38], "latent": 7, "posit": [7, 21], "procedur": 7, "To": [7, 10], "mani": [7, 36], "determin": [7, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35], "probabl": [7, 12, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "distanc": [7, 10, 14, 22, 23, 24, 25, 26, 28, 31, 33, 37, 38], "associ": 7, "each": [7, 17, 18, 19, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35], "adequ": 7, "note": [7, 10, 38], "given": [7, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "fit": [7, 10, 11, 12, 14, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "instead": [7, 8, 14], "ident": 7, "matrix": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "itertool": 7, "scipi": [7, 10, 36], "csgraph": [7, 10], "categoricalwasserstein": 7, "mean": [7, 8, 11, 17, 19, 20, 23, 24], "covari": [7, 11, 19], "ey": [7, 11, 14], "draw_gmm": [7, 11], "ones": [7, 11, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35], "pairwise_dist": [7, 10, 38], "euclidean": [7, 10, 14, 25, 26, 28, 31, 33, 38], "edge_prob": 7, "exp": 7, "adjacency_matrix": 7, "j": 7, "make": 7, "adjac": [7, 10], "symmetr": [7, 22, 23, 24, 25, 26], "t": [7, 8, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "pair": [7, 10], "shortest": [7, 10], "path": [7, 10, 34, 35], "floyd_warshal": [7, 10], "direct": [7, 10], "fals": [7, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "unweight": [7, 10], "replac": [7, 10, 14], "inf": [7, 10], "isinf": [7, 10], "optimis": [7, 11, 27, 28, 29, 30, 31, 32, 33, 34, 35], "specifi": [7, 14, 34, 35], "custom": [7, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35], "pass": [7, 10, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "argument": [7, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35], "n_cluster": [7, 8, 10, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "precomput": [7, 10, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "1789": [7, 11], "dummi": 7, "unnecessari": 7, "becaus": [7, 10, 38], "There": 7, "index": 7, "match": [7, 14], "fit_predict": [7, 8, 10, 11, 27, 28, 29, 30, 31, 32, 33, 34, 35], "node_i": 7, "node_j": 7, "combin": [7, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35], "grai": 7, "linewidth": 7, "ari_scor": [7, 11], "gemini_scor": [7, 11], "3f": [7, 11, 14], "977": 7, "141": 7, "129": [7, 16], "plot_graph_node_clust": [7, 16], "retak": [8, 10], "experi": [8, 10], "origin": [8, 10, 19, 36, 37, 38], "paper": [8, 10, 29, 38], "want": [8, 10, 38], "incorpor": 8, "freedom": [8, 20, 21], "seem": [8, 38], "outlier": 8, "unlik": 8, "done": 8, "linearwasserstein": [8, 27], "gstm": 8, "far": [8, 38], "apart": 8, "df": [8, 20, 21], "grid": 8, "input": [8, 12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "help": [8, 36], "x_val": [8, 10, 12], "linspac": [8, 10, 12], "num": [8, 10, 12], "y_val": [8, 10, 12], "xx": [8, 10, 12], "yy": [8, 10, 12], "meshgrid": [8, 10, 12], "grid_input": [8, 10, 12], "c_": [8, 10, 12], "ravel": [8, 10, 12], "zz": [8, 10, 12], "reshap": [8, 10, 12], "contourf": [8, 10, 12], "cmap": [8, 10], "reds_r": 8, "xlim": 8, "219": [8, 16], "plot_gstm": [8, 16], "base_gemini": 9, "densemmdovo": 9, "dataset": [9, 10, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 34, 35, 37], "mlpmmd": [9, 31, 37], "environ": [9, 12], "pleas": [9, 12, 36, 37], "rerun": [9, 12], "cell": [9, 12], "html": [9, 12], "represent": [9, 12, 30, 31, 35], "trust": [9, 12], "On": [9, 12, 34, 35], "github": [9, 12, 36], "unabl": [9, 12], "render": [9, 12], "try": [9, 12, 36], "load": 9, "page": [9, 12], "nbviewer": [9, 12], "org": [9, 12], "mlpmmdmlpmmd": 9, "819": [9, 16], "plot_intro_mlp_mmd": [9, 16], "face": 10, "trick": 10, "guid": [10, 36, 37], "algorithm": [10, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "desir": 10, "mlpwasserstein": [10, 30], "would": [10, 36], "abl": 10, "make_moon": 10, "nois": 10, "2023": [10, 37], "edg": 10, "defin": [10, 23, 24, 25, 26], "less": 10, "than": [10, 34, 35, 37], "quantil": 10, "min": [10, 12], "cm": 10, "spectral": 10, "off": 10, "372": [10, 16], "plot_moon_clust": [10, 16], "illustr": 11, "categoricalmmd": 11, "975": 11, "328": 11, "400": [11, 16], "plot_nonparametric_clust": [11, 16], "mutual": [12, 20, 22, 27, 28, 29, 30, 31, 34, 35, 36, 37], "propos": [12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38], "kraus": [12, 29], "et": [12, 17, 18, 29, 35, 37], "al": [12, 17, 18, 29, 35, 37], "2010": [12, 29], "maximis": [12, 27, 28, 29, 30, 31, 32, 33, 37], "under": [12, 34, 35, 36], "ell_2": [12, 29], "rimrim": 12, "let": [12, 14], "u": [12, 36], "grad": 12, "grid_pr": 12, "predict_proba": [12, 14, 27, 28, 29, 30, 31, 32, 33, 34, 35], "isol": 12, "level": 12, "02139604932056094": 12, "369": [12, 16], "plot_rim": [12, 16], "anoth": [14, 38], "seek": 14, "rather": 14, "preprocess": 14, "linear_model": 14, "naive_bay": 14, "load_breast_canc": 14, "return_x_i": [14, 27, 28, 29, 30, 31, 34, 35, 37], "robustscal": 14, "fit_transform": 14, "differ": [14, 34, 35], "breast": 14, "cancer": 14, "l2": [14, 25, 26, 28, 31, 33], "clf1": 14, "logisticregress": 14, "p_y_given_x_1": 14, "naiv": 14, "bay": [14, 37], "hypothes": [14, 36], "clf2": 14, "gaussiannb": 14, "p_y_given_x_2": 14, "both": [14, 38], "start": [14, 34, 35, 36], "wassersteingemini": 14, "v": [14, 23, 24, 25, 26, 37], "wasserstein_scor": 14, "wassersteinova": 14, "need": [14, 22, 23, 24, 25, 26], "affin": [14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "wasserstein": [14, 25, 26, 27, 28, 30, 31, 33, 38], "compute_affin": [14, 22, 23, 24, 25, 26], "clf1_score": 14, "clf2_score": 14, "878": 14, "005": 14, "By": [14, 38], "label": [14, 27, 28, 29, 30, 31, 32, 33, 34, 35], "obtain": 14, "share": 14, "same": [14, 38], "otherwis": [14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "y_one_hot": 14, "precomputed_dist": 14, "matmul": 14, "403": 14, "441": [14, 15], "plot_gemini_scor": [14, 15], "auto_examples_scor": 15, "27": 16, "309": 16, "auto_exampl": 16, "09": 16, "08": 16, "none": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "tupl": [17, 18, 19], "ndarrai": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "compon": [17, 18, 19, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35], "respect": [17, 37], "over": 17, "dimens": 17, "excess": 17, "taken": [17, 18], "celeux": [17, 18], "section": [17, 18], "int": [17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35], "default": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "float": [17, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "control": [17, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35], "other": [17, 32, 33], "randomst": [17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35], "instanc": [17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35], "creation": [17, 18, 19, 20, 21], "reproduc": [17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35], "output": [17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "across": [17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35], "multipl": [17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35], "gmm": [17, 18, 19, 20], "drawn": [17, 18, 19, 20, 21, 37], "refer": [17, 18, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35], "g": [17, 18], "martin": [17, 18], "magniett": [17, 18], "m": [17, 18, 20, 35, 36, 37], "l": [17, 18, 20, 34, 35, 36, 37], "maugi": [17, 18], "rabusseau": [17, 18], "rafteri": [17, 18], "A": [17, 18, 19, 20, 34, 35, 37], "e": [17, 18, 22, 23, 24, 25, 26, 36, 37], "2014": [17, 18], "compar": [17, 18, 23, 24, 25, 26, 37], "regular": [17, 18, 29], "approach": [17, 18], "journal": [17, 18, 37], "de": [17, 18], "la": [17, 18], "societ": [17, 18], "francais": [17, 18], "statistiqu": [17, 18], "155": [17, 18], "57": [17, 18], "71": [17, 18], "2000": 18, "linearli": 18, "element": 19, "list": [19, 34, 35], "k": [19, 32, 33, 37], "d": [19, 21, 36, 37], "proport": 19, "500": 20, "articl": 20, "ohl": [20, 27, 28, 30, 31, 34, 35, 36, 37], "mattei": [20, 27, 28, 30, 31, 34, 35, 36, 37], "bouveyron": [20, 27, 28, 30, 31, 34, 35, 36, 37], "harchaoui": [20, 27, 28, 30, 31, 34, 35, 36, 37], "w": [20, 22, 23, 24, 25, 26, 36, 37], "leclercq": [20, 27, 28, 30, 31, 34, 35, 36, 37], "droit": [20, 27, 28, 30, 31, 34, 35, 36, 37], "precioso": [20, 36, 37], "2022": [20, 36, 37], "octob": [20, 36], "generalis": [20, 27, 28, 30, 31, 34, 35, 36, 37], "discrimin": [20, 27, 28, 29, 30, 31, 34, 35], "advanc": [20, 36, 37], "process": [20, 36, 37], "system": [20, 36, 37], "multivari": 21, "semi": 21, "definit": [21, 37], "spread": 21, "epsilon": [22, 23, 24, 25, 26], "classic": [22, 29], "complet": [22, 36], "mathcal": [22, 23, 24, 25, 26], "mathbb": [22, 23, 24, 25, 26, 37], "_": [22, 23, 24, 25, 26, 37], "sim": [22, 23, 24, 25, 26, 37], "text": [22, 23, 24], "kl": 22, "precis": [22, 23, 24, 25, 26], "clip": [22, 23, 24, 25, 26], "order": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "avoid": [22, 23, 24, 25, 26], "numer": [22, 23, 24, 25, 26], "instabl": [22, 23, 24, 25, 26], "__init__": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "comput": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "kernel": [22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 38], "If": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "doe": [22, 32, 33], "must": [22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35], "case": [22, 23, 24, 25, 26, 38], "ignor": [22, 23, 24, 25, 26], "return_grad": [22, 23, 24, 25, 26], "object": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "r": [22, 23, 24, 25, 26, 34, 35, 37], "context": [22, 23, 24, 25, 26], "either": [22, 23, 24, 25, 26, 34, 35], "result": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "per": [22, 23, 24, 25, 26], "bool": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "deriv": [22, 23, 24, 25, 26, 36, 37, 38], "nabla_": [22, 23, 24, 25, 26], "discrep": [23, 24], "kappa": [23, 24], "space": [23, 24, 25, 26, 38], "additive_chi2": [23, 24, 27, 30, 32, 34, 35], "chi2": [23, 24, 27, 30, 32, 34, 35], "cosin": [23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35], "poli": [23, 24, 27, 30, 32, 34, 35], "polynomi": [23, 24, 27, 30, 32, 34, 35], "rbf": [23, 24, 27, 30, 32, 34, 35], "laplacian": [23, 24, 27, 30, 32, 34, 35], "sigmoid": [23, 24, 27, 30, 32, 34, 35], "It": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "correspond": [23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35], "kernel_param": [23, 24, 27, 30, 32, 34, 35], "set": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38], "y_a": [24, 26], "y_b": [24, 26], "delta": [25, 26], "l1": [25, 26, 28, 31, 33], "manhattan": [25, 26, 28, 31, 33], "cityblock": [25, 26, 28, 31, 33], "paired_dist": [25, 26, 28, 31, 33], "1000": [27, 28, 29, 30, 31, 32, 33, 34, 35], "solver": [27, 28, 29, 30, 31, 32, 33, 34, 35], "adam": [27, 28, 29, 30, 31, 32, 33, 34, 35], "verbos": [27, 28, 29, 30, 31, 32, 33, 34, 35], "form": [27, 28, 29, 30, 31, 32, 33, 34, 35], "neuron": [27, 28, 29, 30, 31, 32, 33, 34, 35], "epoch": [27, 28, 29, 30, 31, 32, 33, 34, 35], "singl": [27, 28, 29, 30, 31, 32, 33, 34, 35], "initi": [27, 28, 29, 30, 31, 32, 33, 34, 35], "learn": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "rate": [27, 28, 29, 30, 31, 32, 33, 34, 35], "step": [27, 28, 29, 30, 31, 32, 33, 34, 35], "updat": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "whether": [27, 28, 29, 30, 31, 32, 33, 34, 35], "sgd": [27, 28, 29, 30, 31, 32, 33, 34, 35], "stochast": [27, 28, 29, 30, 31, 32, 33, 34, 35], "kingma": [27, 28, 29, 30, 31, 32, 33, 34, 35], "diederik": [27, 28, 29, 30, 31, 32, 33, 34, 35], "jimmi": [27, 28, 29, 30, 31, 32, 33, 34, 35], "ba": [27, 28, 29, 30, 31, 32, 33, 34, 35], "batch": [27, 28, 29, 30, 31, 32, 33, 34, 35], "whole": [27, 28, 29, 30, 31, 34, 35], "messag": [27, 28, 29, 30, 31, 32, 33, 34, 35], "stdout": [27, 28, 29, 30, 31, 32, 33, 34, 35], "bia": [27, 28, 29, 30, 31, 32, 33, 34, 35], "initialis": [27, 28, 29, 30, 31, 32, 33, 34, 35], "loui": [27, 28, 30, 31, 34, 35, 36], "pierr": [27, 28, 30, 31, 34, 35, 36], "alexandr": [27, 28, 30, 31, 34, 35, 36], "charl": [27, 28, 30, 31, 34, 35, 36], "warith": [27, 28, 30, 31, 34, 35, 36], "micka\u00ebl": [27, 28, 30, 31, 34, 35, 36], "arnaud": [27, 28, 30, 31, 34, 35, 36], "freder": [27, 28, 30, 31, 34, 35, 36], "preciosio": [27, 28, 30, 31, 34, 35], "load_iri": [27, 28, 29, 30, 31, 34, 35, 37], "6949190522657067": 27, "attribut": [27, 28, 29, 30, 31, 32, 33, 34, 35], "w_": [27, 28, 29, 34], "b_": [27, 28, 29, 34], "bias": [27, 28, 29, 30, 31, 34, 35], "optimiser_": [27, 28, 29, 30, 31, 32, 33, 34, 35], "adamoptim": [27, 28, 29, 30, 31, 32, 33, 34, 35], "sgdoptim": [27, 28, 29, 30, 31, 32, 33, 34, 35], "chosen": [27, 28, 29, 30, 31, 32, 33, 34, 35], "labels_": [27, 28, 29, 30, 31, 32, 33, 34, 35], "were": [27, 28, 29, 30, 31, 32, 33, 34, 35], "n_iter_": [27, 28, 29, 30, 31, 32, 33, 34, 35], "took": [27, 28, 29, 30, 31, 32, 33, 34, 35], "converg": [27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "construct": [27, 28, 29, 30, 31, 32, 33, 34, 35], "present": [27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "api": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "convent": [27, 28, 29, 30, 31, 32, 33, 34, 35, 37], "self": [27, 28, 29, 30, 31, 32, 33, 34, 35], "estim": [27, 28, 29, 30, 31, 32, 33, 34, 35], "vector": [27, 28, 29, 30, 31, 32, 33, 34, 35], "get_gemini": [27, 28, 29, 30, 31, 32, 33, 34, 35], "get_param": [27, 28, 29, 30, 31, 32, 33, 34, 35], "deep": [27, 28, 29, 30, 31, 32, 33, 34, 35], "subobject": [27, 28, 29, 30, 31, 32, 33, 34, 35], "param": [27, 28, 29, 30, 31, 32, 33, 34, 35], "dict": [27, 28, 29, 30, 31, 32, 33, 34, 35], "name": [27, 28, 29, 30, 31, 32, 33, 34, 35], "membership": [27, 28, 29, 30, 31, 32, 33, 34, 35], "after": [27, 28, 29, 30, 31, 32, 33, 34, 35], "closest": [27, 28, 29, 30, 31, 32, 33, 34, 35], "seen": [27, 28, 29, 30, 31, 32, 33, 34, 35], "test": [27, 28, 29, 30, 31, 32, 33, 34, 35], "set_param": [27, 28, 29, 30, 31, 32, 33, 34, 35], "work": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "nest": [27, 28, 29, 30, 31, 32, 33, 34, 35], "pipelin": [27, 28, 29, 30, 31, 32, 33, 34, 35], "latter": [27, 28, 29, 30, 31, 32, 33, 34, 35], "__": [27, 28, 29, 30, 31, 32, 33, 34, 35], "possibl": [27, 28, 29, 30, 31, 32, 33, 34, 35], "linearmmd": [28, 29, 34], "6993348362264595": 28, "n_features_in": [28, 29], "reg": 29, "framework": 29, "describ": [29, 34, 35], "hyperparamet": 29, "maxim": [29, 34, 35], "ryan": 29, "gome": 29, "andrea": 29, "pietro": 29, "perona": 29, "00962912118121384": 29, "n_hidden_dim": [30, 31, 35], "7592155845461646": 30, "w1_": [30, 31, 35], "b1_": [30, 31, 35], "w2_": [30, 31, 35], "b2_": [30, 31, 35], "h_": [30, 31, 35], "7636482655127903": 31, "directli": [32, 33, 38], "x_i": [32, 33], "theta_": [32, 33], "ki": [32, 33], "contrarili": [32, 33], "part": [32, 33], "support": [32, 33, 36], "p_": [33, 37, 38], "vanilla": [34, 35], "variat": [34, 35], "bring": [34, 35, 37], "constraint": [34, 35], "ensur": [34, 35], "via": 34, "proxim": [34, 35], "variou": [34, 35], "repres": [34, 35], "typic": [34, 35], "scheme": [34, 35], "lassonet": [34, 35, 37, 38], "architectur": [34, 35, 38], "lemhadri": [34, 35, 37], "ruan": [34, 35, 37], "abraham": [34, 35, 37], "tibshirani": [34, 35, 37], "joint": [34, 35, 37, 38], "6940342321220005": 34, "retriev": [34, 35], "ind": [34, 35], "alpha_multipli": [34, 35], "min_featur": [34, 35], "restore_best_weight": [34, 35], "early_stopping_factor": [34, 35], "99": [34, 35], "max_pati": [34, 35], "unfold": [34, 35], "geometr": [34, 35], "remain": [34, 35], "amount": [34, 35], "histori": [34, 35], "kept": [34, 35], "certain": [34, 35], "percentag": [34, 35], "reduct": [34, 35], "made": [34, 35, 38], "retrain": [34, 35], "greater": [34, 35], "stop": [34, 35], "minim": [34, 35], "deem": [34, 35], "offer": [34, 35], "simultan": [34, 35], "good": [34, 35, 37], "few": [34, 35], "restor": [34, 35], "factor": [34, 35], "beyond": [34, 35], "upgrad": [34, 35], "too": [34, 35], "small": [34, 35, 36], "earli": [34, 35], "wait": [34, 35], "without": [34, 35, 36, 37], "improv": [34, 35, 37], "befor": [34, 35], "length": [34, 35], "sequenti": [34, 35], "group_penalti": [34, 35], "skip": [35, 38], "connect": [35, 38], "inspir": [35, 37, 38], "2021": [35, 37], "hierarchi": 35, "coeffici": 35, "rel": 35, "strength": 35, "766421183641077": 35, "w_skip_": 35, "thank": 36, "you": [36, 37, 38], "check": [36, 37], "realli": 36, "pleasur": 36, "dedic": 36, "theori": [36, 37], "allow": 36, "provid": [36, 37, 38], "user": [36, 37], "tool": 36, "written": 36, "scikit": [36, 37], "compat": 36, "extens": [36, 38], "http": 36, "io": 36, "main": 36, "instruct": 36, "pip": 36, "librari": [36, 38], "requir": [36, 38], "coupl": 36, "scientif": 36, "pot": 36, "repo": 36, "git": 36, "clone": 36, "com": 36, "cd": 36, "cite": 36, "neurip": 36, "inproceed": 36, "ohl2022generalis": 36, "author": 36, "micka": 36, "booktitl": 36, "editor": 36, "alic": 36, "h": [36, 37], "oh": [36, 37], "alekh": 36, "agarw": [36, 37], "daniel": 36, "belgrav": [36, 37], "kyunghyun": 36, "cho": [36, 37], "year": 36, "url": 36, "openreview": 36, "net": 36, "forum": 36, "id": 36, "0oy3pia": 36, "adp": 36, "ha": [36, 37], "been": 36, "french": 36, "govern": 36, "3ia": 36, "c\u00f4te": 36, "azur": 36, "invest": 36, "futur": 36, "project": 36, "manag": 36, "nation": 36, "research": [36, 37], "agenc": 36, "anr": 36, "19": 36, "p3ia": 36, "0002": 36, "also": 36, "franc": 36, "canada": 36, "fund": 36, "ffcr": 36, "contribut": 36, "partli": 36, "eu": 36, "horizon": 36, "2020": 36, "ai4media": 36, "contract": 36, "951911": 36, "special": 36, "jhonatan": 36, "torr": 36, "hi": 36, "insight": 36, "develop": 36, "short": 37, "descript": 37, "hint": 37, "about": 37, "For": [37, 38], "more": [37, 38], "detail": 37, "its": 37, "public": 37, "stand": 37, "novel": 37, "type": 37, "measur": 37, "custer": 37, "theta": [37, 38], "right": 37, "y_1": 37, "y_2": 37, "specif": [37, 38], "involv": 37, "theorem": 37, "easili": 37, "tractabl": 37, "cane": 37, "valuat": 37, "henc": 37, "assumpt": 37, "At": 37, "moment": 37, "report": 37, "fewer": 37, "practic": 37, "sever": 37, "merg": 37, "avail": 37, "loss": 37, "your": 37, "own": 37, "further": 37, "mainli": 37, "feel": 37, "interest": 37, "ed": 37, "machin": 37, "22": 37, "127": 37, "29": 37, "doi": 37, "48550": 37, "arxiv": 37, "2302": 37, "03391": 37, "mode": 38, "ad": 38, "constructor": 38, "achiev": 38, "regard": 38, "chose": 38, "yield": 38, "worst": 38, "manner": 38, "pairwise_kernel": 38, "choic": 38, "forc": 38, "usag": 38, "multi": 38, "perceptron": 38, "flexibl": 38, "yet": 38, "express": 38, "enough": 38, "term": 38, "simpler": 38, "induc": 38, "_basemmd": 38, "_basewasserstein": 38, "rewrit": 38, "_infer": 38, "_get_weight": 38, "_init_param": 38, "includ": 38}, "objects": {"gemclus.data": [[17, 0, 1, "", "celeux_one"], [18, 0, 1, "", "celeux_two"], [19, 0, 1, "", "draw_gmm"], [20, 0, 1, "", "gstm"], [21, 0, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[22, 1, 1, "", "MI"], [23, 1, 1, "", "MMDOvA"], [24, 1, 1, "", "MMDOvO"], [25, 1, 1, "", "WassersteinOvA"], [26, 1, 1, "", "WassersteinOvO"]], "gemclus.gemini.MI": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "compute_affinity"], [22, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvA": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "compute_affinity"], [23, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvO": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "compute_affinity"], [24, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvA": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "compute_affinity"], [25, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvO": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "compute_affinity"], [26, 2, 1, "", "evaluate"]], "gemclus.linear": [[27, 1, 1, "", "LinearMMD"], [28, 1, 1, "", "LinearWasserstein"], [29, 1, 1, "", "RIM"]], "gemclus.linear.LinearMMD": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "fit"], [27, 2, 1, "", "fit_predict"], [27, 2, 1, "", "get_gemini"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "predict"], [27, 2, 1, "", "predict_proba"], [27, 2, 1, "", "score"], [27, 2, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "fit_predict"], [28, 2, 1, "", "get_gemini"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "predict_proba"], [28, 2, 1, "", "score"], [28, 2, 1, "", "set_params"]], "gemclus.linear.RIM": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "fit_predict"], [29, 2, 1, "", "get_gemini"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "predict_proba"], [29, 2, 1, "", "score"], [29, 2, 1, "", "set_params"]], "gemclus.mlp": [[30, 1, 1, "", "MLPMMD"], [31, 1, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "fit_predict"], [30, 2, 1, "", "get_gemini"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "predict_proba"], [30, 2, 1, "", "score"], [30, 2, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "fit_predict"], [31, 2, 1, "", "get_gemini"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "predict_proba"], [31, 2, 1, "", "score"], [31, 2, 1, "", "set_params"]], "gemclus.nonparametric": [[32, 1, 1, "", "CategoricalMMD"], [33, 1, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "fit_predict"], [32, 2, 1, "", "get_gemini"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "predict"], [32, 2, 1, "", "predict_proba"], [32, 2, 1, "", "score"], [32, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "fit"], [33, 2, 1, "", "fit_predict"], [33, 2, 1, "", "get_gemini"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "predict"], [33, 2, 1, "", "predict_proba"], [33, 2, 1, "", "score"], [33, 2, 1, "", "set_params"]], "gemclus.sparse": [[34, 1, 1, "", "SparseLinearMMD"], [35, 1, 1, "", "SparseMLPMMD"]], "gemclus.sparse.SparseLinearMMD": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "fit_predict"], [34, 2, 1, "", "get_gemini"], [34, 2, 1, "", "get_params"], [34, 2, 1, "", "get_selection"], [34, 2, 1, "", "path"], [34, 2, 1, "", "predict"], [34, 2, 1, "", "predict_proba"], [34, 2, 1, "", "score"], [34, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "fit"], [35, 2, 1, "", "fit_predict"], [35, 2, 1, "", "get_gemini"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "get_selection"], [35, 2, 1, "", "path"], [35, 2, 1, "", "predict"], [35, 2, 1, "", "predict_proba"], [35, 2, 1, "", "score"], [35, 2, 1, "", "set_params"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"gemclu": [0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "api": 0, "score": [0, 6, 13, 14], "gemini": [0, 6, 9, 13, 14, 22, 23, 24, 25, 26, 36, 37, 38], "cluster": [0, 2, 3, 6, 7, 8, 9, 10, 11, 12, 36, 37], "model": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 14], "dens": 0, "nonparametr": [0, 7, 32, 33], "spars": [0, 2, 3, 34, 35], "dataset": [0, 2, 3, 4, 12, 14], "gener": [0, 6, 8, 9, 10], "featur": [1, 2, 3, 4, 6, 37], "select": [1, 2, 3, 4, 6, 37], "us": [2, 3, 17, 19, 20, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36], "mmd": [2, 3, 9], "ovo": 2, "logist": [2, 12], "regress": [2, 12], "load": [2, 3, 4, 12, 14], "simpl": [2, 3, 4, 12, 14], "synthet": [2, 3, 4, 12], "train": [2, 3, 4, 7, 8, 10, 11, 12, 14], "path": [2, 3, 4], "result": [2, 3, 4], "final": [2, 3, 7, 8, 9, 10, 11, 12], "ova": 3, "mlp": [3, 9, 30, 31], "group": 4, "linear": [4, 27, 28, 29], "comput": [5, 7, 10, 15, 16], "time": [5, 15, 16], "exampl": [6, 8, 9, 17, 19, 20, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38], "discrimin": [6, 36, 37, 38], "graph": 7, "node": 7, "draw": [7, 10, 11], "sampl": [7, 10, 11], "from": [7, 11], "gmm": [7, 11], "creat": [7, 9], "edg": 7, "pre": [7, 10], "specif": [7, 10], "metric": [7, 10], "between": [7, 10], "decis": [8, 10], "boundari": [8, 10], "map": 8, "mixtur": 8, "gaussian": 8, "low": 8, "degre": 8, "student": 8, "distribut": [8, 38], "data": [8, 9, 17, 18, 19, 20, 21], "an": 9, "introduc": 9, "fit": 9, "plot": 9, "two": [10, 14], "interlac": 10, "moon": 10, "non": 11, "parametr": 11, "rim": [12, 29], "ani": 14, "real": 14, "supervis": 14, "celeux_on": 17, "celeux_two": 18, "draw_gmm": 19, "gstm": 20, "multivariate_student_t": 21, "mi": 22, "mmdova": 23, "mmdovo": 24, "wassersteinova": 25, "wassersteinovo": 26, "linearmmd": 27, "linearwasserstein": 28, "mlpmmd": 30, "mlpwasserstein": 31, "categoricalmmd": 32, "categoricalwasserstein": 33, "sparselinearmmd": 34, "sparsemlpmmd": 35, "welcom": 36, "document": 36, "content": [36, 38], "A": 36, "packag": [36, 38], "instal": 36, "offici": 36, "latest": 36, "version": 36, "refer": [36, 37], "acknowledg": 36, "quick": 37, "start": 37, "what": [37, 38], "i": 37, "do": 37, "user": 38, "guid": 38, "which": 38, "ar": 38, "implement": 38, "avail": 38, "basic": 38}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"GEMCLUS API": [[0, "gemclus-api"]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [6, "scoring-with-gemini"], [13, "scoring-with-gemini"], [14, "scoring-with-gemini"]], "Clustering models": [[0, "clustering-models"]], "Dense models": [[0, "dense-models"]], "Nonparametric models": [[0, "nonparametric-models"]], "Sparse models": [[0, "sparse-models"]], "Dataset generation": [[0, "dataset-generation"]], "Feature selection": [[1, "feature-selection"], [6, "feature-selection"]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[2, "feature-selection-using-the-sparse-mmd-ovo-logistic-regression"]], "Load a simple synthetic dataset": [[2, "load-a-simple-synthetic-dataset"], [3, "load-a-simple-synthetic-dataset"], [4, "load-a-simple-synthetic-dataset"], [12, "load-a-simple-synthetic-dataset"]], "Train the model": [[2, "train-the-model"], [3, "train-the-model"], [4, "train-the-model"], [7, "train-the-model"], [10, "train-the-model"], [11, "train-the-model"], [12, "train-the-model"]], "Path results": [[2, "path-results"], [3, "path-results"], [4, "path-results"]], "Final Clustering": [[2, "final-clustering"], [3, "final-clustering"], [7, "final-clustering"], [8, "final-clustering"], [10, "final-clustering"], [11, "final-clustering"], [12, "final-clustering"]], "Feature selection using the Sparse MMD OvA (MLP)": [[3, "feature-selection-using-the-sparse-mmd-ova-mlp"]], "Grouped Feature selection with a linear model": [[4, "grouped-feature-selection-with-a-linear-model"]], "Computation times": [[5, "computation-times"], [15, "computation-times"], [16, "computation-times"]], "General examples": [[6, "general-examples"]], "Discriminative clustering": [[6, "discriminative-clustering"]], "Graph node clustering with a nonparametric model": [[7, "graph-node-clustering-with-a-nonparametric-model"]], "Draw samples from a GMM": [[7, "draw-samples-from-a-gmm"], [11, "draw-samples-from-a-gmm"]], "Create the graph edges": [[7, "create-the-graph-edges"]], "Pre-compute a specific metric between samples": [[7, "pre-compute-a-specific-metric-between-samples"], [10, "pre-compute-a-specific-metric-between-samples"]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[8, "example-of-decision-boundary-map-for-a-mixture-of-gaussian-and-low-degree-student-distributions"]], "Generate the data": [[8, "generate-the-data"]], "Train the model for clustering": [[8, "train-the-model-for-clustering"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[9, "an-introducing-example-to-clustering-with-an-mlp-and-the-mmd-gemini"]], "Generate data": [[9, "generate-data"]], "Create the MLP clustering model and fit it": [[9, "create-the-mlp-clustering-model-and-fit-it"]], "Plot the final clustering": [[9, "plot-the-final-clustering"]], "Drawing a decision boundary between two interlacing moons": [[10, "drawing-a-decision-boundary-between-two-interlacing-moons"]], "Generate two interlacing moons": [[10, "generate-two-interlacing-moons"]], "Non parametric clustering": [[11, "non-parametric-clustering"]], "Simple logistic regression with RIM": [[12, "simple-logistic-regression-with-rim"]], "Scoring any model with GEMINI": [[14, "scoring-any-model-with-gemini"]], "Load a simple real dataset": [[14, "load-a-simple-real-dataset"]], "Train two supervised models": [[14, "train-two-supervised-models"]], "Supervised Scoring with GEMINI": [[14, "supervised-scoring-with-gemini"]], "gemclus.data.celeux_one": [[17, "gemclus-data-celeux-one"]], "Examples using gemclus.data.celeux_one": [[17, "examples-using-gemclus-data-celeux-one"]], "gemclus.data.celeux_two": [[18, "gemclus-data-celeux-two"]], "gemclus.data.draw_gmm": [[19, "gemclus-data-draw-gmm"]], "Examples using gemclus.data.draw_gmm": [[19, "examples-using-gemclus-data-draw-gmm"]], "gemclus.data.gstm": [[20, "gemclus-data-gstm"]], "Examples using gemclus.data.gstm": [[20, "examples-using-gemclus-data-gstm"]], "gemclus.data.multivariate_student_t": [[21, "gemclus-data-multivariate-student-t"]], "gemclus.gemini.MI": [[22, "gemclus-gemini-mi"]], "gemclus.gemini.MMDOvA": [[23, "gemclus-gemini-mmdova"]], "gemclus.gemini.MMDOvO": [[24, "gemclus-gemini-mmdovo"]], "gemclus.gemini.WassersteinOvA": [[25, "gemclus-gemini-wassersteinova"]], "Examples using gemclus.gemini.WassersteinOvA": [[25, "examples-using-gemclus-gemini-wassersteinova"]], "gemclus.gemini.WassersteinOvO": [[26, "gemclus-gemini-wassersteinovo"]], "gemclus.linear.LinearMMD": [[27, "gemclus-linear-linearmmd"]], "gemclus.linear.LinearWasserstein": [[28, "gemclus-linear-linearwasserstein"]], "Examples using gemclus.linear.LinearWasserstein": [[28, "examples-using-gemclus-linear-linearwasserstein"]], "gemclus.linear.RIM": [[29, "gemclus-linear-rim"]], "Examples using gemclus.linear.RIM": [[29, "examples-using-gemclus-linear-rim"]], "gemclus.mlp.MLPMMD": [[30, "gemclus-mlp-mlpmmd"]], "Examples using gemclus.mlp.MLPMMD": [[30, "examples-using-gemclus-mlp-mlpmmd"]], "gemclus.mlp.MLPWasserstein": [[31, "gemclus-mlp-mlpwasserstein"]], "Examples using gemclus.mlp.MLPWasserstein": [[31, "examples-using-gemclus-mlp-mlpwasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[32, "gemclus-nonparametric-categoricalmmd"]], "Examples using gemclus.nonparametric.CategoricalMMD": [[32, "examples-using-gemclus-nonparametric-categoricalmmd"]], "gemclus.nonparametric.CategoricalWasserstein": [[33, "gemclus-nonparametric-categoricalwasserstein"]], "Examples using gemclus.nonparametric.CategoricalWasserstein": [[33, "examples-using-gemclus-nonparametric-categoricalwasserstein"]], "gemclus.sparse.SparseLinearMMD": [[34, "gemclus-sparse-sparselinearmmd"]], "Examples using gemclus.sparse.SparseLinearMMD": [[34, "examples-using-gemclus-sparse-sparselinearmmd"]], "gemclus.sparse.SparseMLPMMD": [[35, "gemclus-sparse-sparsemlpmmd"]], "Examples using gemclus.sparse.SparseMLPMMD": [[35, "examples-using-gemclus-sparse-sparsemlpmmd"]], "Welcome to GemClus documentation!": [[36, "welcome-to-gemclus-documentation"]], "Contents": [[36, "contents"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[36, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "Installation": [[36, "installation"]], "Official package": [[36, "official-package"]], "Latest version": [[36, "latest-version"]], "Reference": [[36, "reference"]], "Acknowledgements": [[36, "acknowledgements"]], "Quick start on gemclus": [[37, "quick-start-on-gemclus"]], "What is GEMINI": [[37, "what-is-gemini"]], "Doing discriminative clustering": [[37, "doing-discriminative-clustering"]], "Selecting features in clustering": [[37, "selecting-features-in-clustering"]], "References": [[37, "references"]], "User Guide": [[38, "user-guide"]], "Content of the package": [[38, "content-of-the-package"]], "Which GEMINIs are implemented": [[38, "which-geminis-are-implemented"]], "What discriminative distributions are available": [[38, "what-discriminative-distributions-are-available"]], "Basic examples": [[38, "basic-examples"]]}, "indexentries": {"celeux_one() (in module gemclus.data)": [[17, "gemclus.data.celeux_one"]], "celeux_two() (in module gemclus.data)": [[18, "gemclus.data.celeux_two"]], "draw_gmm() (in module gemclus.data)": [[19, "gemclus.data.draw_gmm"]], "gstm() (in module gemclus.data)": [[20, "gemclus.data.gstm"]], "multivariate_student_t() (in module gemclus.data)": [[21, "gemclus.data.multivariate_student_t"]], "mi (class in gemclus.gemini)": [[22, "gemclus.gemini.MI"]], "__init__() (gemclus.gemini.mi method)": [[22, "gemclus.gemini.MI.__init__"]], "compute_affinity() (gemclus.gemini.mi method)": [[22, "gemclus.gemini.MI.compute_affinity"]], "evaluate() (gemclus.gemini.mi method)": [[22, "gemclus.gemini.MI.evaluate"]], "mmdova (class in gemclus.gemini)": [[23, "gemclus.gemini.MMDOvA"]], "__init__() (gemclus.gemini.mmdova method)": [[23, "gemclus.gemini.MMDOvA.__init__"]], "compute_affinity() (gemclus.gemini.mmdova method)": [[23, "gemclus.gemini.MMDOvA.compute_affinity"]], "evaluate() (gemclus.gemini.mmdova method)": [[23, "gemclus.gemini.MMDOvA.evaluate"]], "mmdovo (class in gemclus.gemini)": [[24, "gemclus.gemini.MMDOvO"]], "__init__() (gemclus.gemini.mmdovo method)": [[24, "gemclus.gemini.MMDOvO.__init__"]], "compute_affinity() (gemclus.gemini.mmdovo method)": [[24, "gemclus.gemini.MMDOvO.compute_affinity"]], "evaluate() (gemclus.gemini.mmdovo method)": [[24, "gemclus.gemini.MMDOvO.evaluate"]], "wassersteinova (class in gemclus.gemini)": [[25, "gemclus.gemini.WassersteinOvA"]], "__init__() (gemclus.gemini.wassersteinova method)": [[25, "gemclus.gemini.WassersteinOvA.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinova method)": [[25, "gemclus.gemini.WassersteinOvA.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinova method)": [[25, "gemclus.gemini.WassersteinOvA.evaluate"]], "wassersteinovo (class in gemclus.gemini)": [[26, "gemclus.gemini.WassersteinOvO"]], "__init__() (gemclus.gemini.wassersteinovo method)": [[26, "gemclus.gemini.WassersteinOvO.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinovo method)": [[26, "gemclus.gemini.WassersteinOvO.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinovo method)": [[26, "gemclus.gemini.WassersteinOvO.evaluate"]], "linearmmd (class in gemclus.linear)": [[27, "gemclus.linear.LinearMMD"]], "__init__() (gemclus.linear.linearmmd method)": [[27, "gemclus.linear.LinearMMD.__init__"]], "fit() (gemclus.linear.linearmmd method)": [[27, "gemclus.linear.LinearMMD.fit"]], "fit_predict() (gemclus.linear.linearmmd method)": [[27, "gemclus.linear.LinearMMD.fit_predict"]], "get_gemini() (gemclus.linear.linearmmd method)": [[27, "gemclus.linear.LinearMMD.get_gemini"]], "get_params() (gemclus.linear.linearmmd method)": [[27, "gemclus.linear.LinearMMD.get_params"]], "predict() (gemclus.linear.linearmmd method)": [[27, "gemclus.linear.LinearMMD.predict"]], "predict_proba() (gemclus.linear.linearmmd method)": [[27, "gemclus.linear.LinearMMD.predict_proba"]], "score() (gemclus.linear.linearmmd method)": [[27, "gemclus.linear.LinearMMD.score"]], "set_params() (gemclus.linear.linearmmd method)": [[27, "gemclus.linear.LinearMMD.set_params"]], "linearwasserstein (class in gemclus.linear)": [[28, "gemclus.linear.LinearWasserstein"]], "__init__() (gemclus.linear.linearwasserstein method)": [[28, "gemclus.linear.LinearWasserstein.__init__"]], "fit() (gemclus.linear.linearwasserstein method)": [[28, "gemclus.linear.LinearWasserstein.fit"]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[28, "gemclus.linear.LinearWasserstein.fit_predict"]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[28, "gemclus.linear.LinearWasserstein.get_gemini"]], "get_params() (gemclus.linear.linearwasserstein method)": [[28, "gemclus.linear.LinearWasserstein.get_params"]], "predict() (gemclus.linear.linearwasserstein method)": [[28, "gemclus.linear.LinearWasserstein.predict"]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[28, "gemclus.linear.LinearWasserstein.predict_proba"]], "score() (gemclus.linear.linearwasserstein method)": [[28, "gemclus.linear.LinearWasserstein.score"]], "set_params() (gemclus.linear.linearwasserstein method)": [[28, "gemclus.linear.LinearWasserstein.set_params"]], "rim (class in gemclus.linear)": [[29, "gemclus.linear.RIM"]], "__init__() (gemclus.linear.rim method)": [[29, "gemclus.linear.RIM.__init__"]], "fit() (gemclus.linear.rim method)": [[29, "gemclus.linear.RIM.fit"]], "fit_predict() (gemclus.linear.rim method)": [[29, "gemclus.linear.RIM.fit_predict"]], "get_gemini() (gemclus.linear.rim method)": [[29, "gemclus.linear.RIM.get_gemini"]], "get_params() (gemclus.linear.rim method)": [[29, "gemclus.linear.RIM.get_params"]], "predict() (gemclus.linear.rim method)": [[29, "gemclus.linear.RIM.predict"]], "predict_proba() (gemclus.linear.rim method)": [[29, "gemclus.linear.RIM.predict_proba"]], "score() (gemclus.linear.rim method)": [[29, "gemclus.linear.RIM.score"]], "set_params() (gemclus.linear.rim method)": [[29, "gemclus.linear.RIM.set_params"]], "mlpmmd (class in gemclus.mlp)": [[30, "gemclus.mlp.MLPMMD"]], "__init__() (gemclus.mlp.mlpmmd method)": [[30, "gemclus.mlp.MLPMMD.__init__"]], "fit() (gemclus.mlp.mlpmmd method)": [[30, "gemclus.mlp.MLPMMD.fit"]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[30, "gemclus.mlp.MLPMMD.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[30, "gemclus.mlp.MLPMMD.get_gemini"]], "get_params() (gemclus.mlp.mlpmmd method)": [[30, "gemclus.mlp.MLPMMD.get_params"]], "predict() (gemclus.mlp.mlpmmd method)": [[30, "gemclus.mlp.MLPMMD.predict"]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[30, "gemclus.mlp.MLPMMD.predict_proba"]], "score() (gemclus.mlp.mlpmmd method)": [[30, "gemclus.mlp.MLPMMD.score"]], "set_params() (gemclus.mlp.mlpmmd method)": [[30, "gemclus.mlp.MLPMMD.set_params"]], "mlpwasserstein (class in gemclus.mlp)": [[31, "gemclus.mlp.MLPWasserstein"]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[31, "gemclus.mlp.MLPWasserstein.__init__"]], "fit() (gemclus.mlp.mlpwasserstein method)": [[31, "gemclus.mlp.MLPWasserstein.fit"]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[31, "gemclus.mlp.MLPWasserstein.fit_predict"]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[31, "gemclus.mlp.MLPWasserstein.get_gemini"]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[31, "gemclus.mlp.MLPWasserstein.get_params"]], "predict() (gemclus.mlp.mlpwasserstein method)": [[31, "gemclus.mlp.MLPWasserstein.predict"]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[31, "gemclus.mlp.MLPWasserstein.predict_proba"]], "score() (gemclus.mlp.mlpwasserstein method)": [[31, "gemclus.mlp.MLPWasserstein.score"]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[31, "gemclus.mlp.MLPWasserstein.set_params"]], "categoricalmmd (class in gemclus.nonparametric)": [[32, "gemclus.nonparametric.CategoricalMMD"]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[32, "gemclus.nonparametric.CategoricalMMD.__init__"]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[32, "gemclus.nonparametric.CategoricalMMD.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[32, "gemclus.nonparametric.CategoricalMMD.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[32, "gemclus.nonparametric.CategoricalMMD.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[32, "gemclus.nonparametric.CategoricalMMD.get_params"]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[32, "gemclus.nonparametric.CategoricalMMD.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[32, "gemclus.nonparametric.CategoricalMMD.predict_proba"]], "score() (gemclus.nonparametric.categoricalmmd method)": [[32, "gemclus.nonparametric.CategoricalMMD.score"]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[32, "gemclus.nonparametric.CategoricalMMD.set_params"]], "categoricalwasserstein (class in gemclus.nonparametric)": [[33, "gemclus.nonparametric.CategoricalWasserstein"]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[33, "gemclus.nonparametric.CategoricalWasserstein.__init__"]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[33, "gemclus.nonparametric.CategoricalWasserstein.fit"]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[33, "gemclus.nonparametric.CategoricalWasserstein.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[33, "gemclus.nonparametric.CategoricalWasserstein.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[33, "gemclus.nonparametric.CategoricalWasserstein.get_params"]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[33, "gemclus.nonparametric.CategoricalWasserstein.predict"]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[33, "gemclus.nonparametric.CategoricalWasserstein.predict_proba"]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[33, "gemclus.nonparametric.CategoricalWasserstein.score"]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[33, "gemclus.nonparametric.CategoricalWasserstein.set_params"]], "sparselinearmmd (class in gemclus.sparse)": [[34, "gemclus.sparse.SparseLinearMMD"]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[34, "gemclus.sparse.SparseLinearMMD.__init__"]], "fit() (gemclus.sparse.sparselinearmmd method)": [[34, "gemclus.sparse.SparseLinearMMD.fit"]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[34, "gemclus.sparse.SparseLinearMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[34, "gemclus.sparse.SparseLinearMMD.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[34, "gemclus.sparse.SparseLinearMMD.get_params"]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[34, "gemclus.sparse.SparseLinearMMD.get_selection"]], "path() (gemclus.sparse.sparselinearmmd method)": [[34, "gemclus.sparse.SparseLinearMMD.path"]], "predict() (gemclus.sparse.sparselinearmmd method)": [[34, "gemclus.sparse.SparseLinearMMD.predict"]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[34, "gemclus.sparse.SparseLinearMMD.predict_proba"]], "score() (gemclus.sparse.sparselinearmmd method)": [[34, "gemclus.sparse.SparseLinearMMD.score"]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[34, "gemclus.sparse.SparseLinearMMD.set_params"]], "sparsemlpmmd (class in gemclus.sparse)": [[35, "gemclus.sparse.SparseMLPMMD"]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[35, "gemclus.sparse.SparseMLPMMD.__init__"]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[35, "gemclus.sparse.SparseMLPMMD.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[35, "gemclus.sparse.SparseMLPMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[35, "gemclus.sparse.SparseMLPMMD.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[35, "gemclus.sparse.SparseMLPMMD.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[35, "gemclus.sparse.SparseMLPMMD.get_selection"]], "path() (gemclus.sparse.sparsemlpmmd method)": [[35, "gemclus.sparse.SparseMLPMMD.path"]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[35, "gemclus.sparse.SparseMLPMMD.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[35, "gemclus.sparse.SparseMLPMMD.predict_proba"]], "score() (gemclus.sparse.sparsemlpmmd method)": [[35, "gemclus.sparse.SparseMLPMMD.score"]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[35, "gemclus.sparse.SparseMLPMMD.set_params"]]}})