Search.setIndex({"docnames": ["api", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_feature_selection_linear", "auto_examples/feature_selection/plot_feature_selection_logreg_mi", "auto_examples/feature_selection/plot_feature_selection_mlp", "auto_examples/feature_selection/plot_grouped_selection", "auto_examples/feature_selection/sg_execution_times", "auto_examples/index", "auto_examples/mlcl/index", "auto_examples/mlcl/plot_semi_supervised_consensus", "auto_examples/mlcl/sg_execution_times", "auto_examples/plot_circles", "auto_examples/plot_custom_model", "auto_examples/plot_graph_node_clustering", "auto_examples/plot_gstm", "auto_examples/plot_intro_mlp_mmd", "auto_examples/plot_kernel_kmeans", "auto_examples/plot_kernel_rim", "auto_examples/plot_moon_clustering", "auto_examples/plot_nonparametric_clustering", "auto_examples/plot_rim", "auto_examples/scoring/index", "auto_examples/scoring/plot_gemini_scoring", "auto_examples/scoring/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/trees/index", "auto_examples/trees/plot_douglas_example", "auto_examples/trees/plot_kauri_example", "auto_examples/trees/sg_execution_times", "generated/constraints/gemclus.add_mlcl_constraint", "generated/data/gemclus.data.celeux_one", "generated/data/gemclus.data.celeux_two", "generated/data/gemclus.data.draw_gmm", "generated/data/gemclus.data.gstm", "generated/data/gemclus.data.multivariate_student_t", "generated/gemini/gemclus.gemini.HellingerGEMINI", "generated/gemini/gemclus.gemini.KLGEMINI", "generated/gemini/gemclus.gemini.MI", "generated/gemini/gemclus.gemini.MMDGEMINI", "generated/gemini/gemclus.gemini.TVGEMINI", "generated/gemini/gemclus.gemini.WassersteinGEMINI", "generated/models/gemclus.linear.KernelRIM", "generated/models/gemclus.linear.LinearMMD", "generated/models/gemclus.linear.LinearModel", "generated/models/gemclus.linear.LinearWasserstein", "generated/models/gemclus.linear.RIM", "generated/models/gemclus.mlp.MLPMMD", "generated/models/gemclus.mlp.MLPModel", "generated/models/gemclus.mlp.MLPWasserstein", "generated/models/gemclus.nonparametric.CategoricalMMD", "generated/models/gemclus.nonparametric.CategoricalModel", "generated/models/gemclus.nonparametric.CategoricalWasserstein", "generated/models/gemclus.sparse.SparseLinearMI", "generated/models/gemclus.sparse.SparseLinearMMD", "generated/models/gemclus.sparse.SparseLinearModel", "generated/models/gemclus.sparse.SparseMLPMMD", "generated/models/gemclus.sparse.SparseMLPModel", "generated/models/gemclus.tree.Douglas", "generated/models/gemclus.tree.Kauri", "generated/models/gemclus.tree.print_kauri_tree", "history", "index", "quick_start", "sg_execution_times", "user_guide"], "filenames": ["api.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_feature_selection_linear.rst", "auto_examples/feature_selection/plot_feature_selection_logreg_mi.rst", "auto_examples/feature_selection/plot_feature_selection_mlp.rst", "auto_examples/feature_selection/plot_grouped_selection.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/mlcl/index.rst", "auto_examples/mlcl/plot_semi_supervised_consensus.rst", "auto_examples/mlcl/sg_execution_times.rst", "auto_examples/plot_circles.rst", "auto_examples/plot_custom_model.rst", "auto_examples/plot_graph_node_clustering.rst", "auto_examples/plot_gstm.rst", "auto_examples/plot_intro_mlp_mmd.rst", "auto_examples/plot_kernel_kmeans.rst", "auto_examples/plot_kernel_rim.rst", "auto_examples/plot_moon_clustering.rst", "auto_examples/plot_nonparametric_clustering.rst", "auto_examples/plot_rim.rst", "auto_examples/scoring/index.rst", "auto_examples/scoring/plot_gemini_scoring.rst", "auto_examples/scoring/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/trees/index.rst", "auto_examples/trees/plot_douglas_example.rst", "auto_examples/trees/plot_kauri_example.rst", "auto_examples/trees/sg_execution_times.rst", "generated/constraints/gemclus.add_mlcl_constraint.rst", "generated/data/gemclus.data.celeux_one.rst", "generated/data/gemclus.data.celeux_two.rst", "generated/data/gemclus.data.draw_gmm.rst", "generated/data/gemclus.data.gstm.rst", "generated/data/gemclus.data.multivariate_student_t.rst", "generated/gemini/gemclus.gemini.HellingerGEMINI.rst", "generated/gemini/gemclus.gemini.KLGEMINI.rst", "generated/gemini/gemclus.gemini.MI.rst", "generated/gemini/gemclus.gemini.MMDGEMINI.rst", "generated/gemini/gemclus.gemini.TVGEMINI.rst", "generated/gemini/gemclus.gemini.WassersteinGEMINI.rst", "generated/models/gemclus.linear.KernelRIM.rst", "generated/models/gemclus.linear.LinearMMD.rst", "generated/models/gemclus.linear.LinearModel.rst", "generated/models/gemclus.linear.LinearWasserstein.rst", "generated/models/gemclus.linear.RIM.rst", "generated/models/gemclus.mlp.MLPMMD.rst", "generated/models/gemclus.mlp.MLPModel.rst", "generated/models/gemclus.mlp.MLPWasserstein.rst", "generated/models/gemclus.nonparametric.CategoricalMMD.rst", "generated/models/gemclus.nonparametric.CategoricalModel.rst", "generated/models/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/models/gemclus.sparse.SparseLinearMI.rst", "generated/models/gemclus.sparse.SparseLinearMMD.rst", "generated/models/gemclus.sparse.SparseLinearModel.rst", "generated/models/gemclus.sparse.SparseMLPMMD.rst", "generated/models/gemclus.sparse.SparseMLPModel.rst", "generated/models/gemclus.tree.Douglas.rst", "generated/models/gemclus.tree.Kauri.rst", "generated/models/gemclus.tree.print_kauri_tree.rst", "history.rst", "index.rst", "quick_start.rst", "sg_execution_times.rst", "user_guide.rst"], "titles": ["GEMCLUS API", "Feature selection", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse Linear MI (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Grouped Feature selection with a linear model", "Computation times", "General examples", "Consensus clustering", "Consensus clustering with linking constraints on sample pairs", "Computation times", "Comparative clustering of circles dataset with kernel change", "Extending GemClus to build your own discriminative clustering model", "Graph node clustering with a nonparametric model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Kernel KMeans clustering with GEMINI", "Comparative clustering of circles dataset with kernel change", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Scoring with GEMINI", "Scoring any model with GEMINI", "Computation times", "Computation times", "Trees", "Building a differentiable unsupervised tree: DOUGLAS", "Building an unsupervised tree with kernel-kmeans objective: KAURI", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.add_mlcl_constraint", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.HellingerGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.KLGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.TVGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.KernelRIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Douglas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Kauri", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.print_kauri_tree", "RELEASES", "Welcome to GemClus documentation!", "Quick start on gemclus", "Computation times", "User guide : contents"], "terms": {"The": [0, 2, 3, 4, 5, 9, 12, 15, 16, 19, 22, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64], "packag": [0, 60, 62], "current": [0, 38, 40, 41, 42, 44, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 64], "contain": [0, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "simpl": [0, 7, 9, 11, 12, 13, 15, 17, 19, 24, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64], "mlp": [0, 1, 6, 7, 11, 14, 18, 24, 55, 56, 60, 62, 63], "logist": [0, 1, 4, 5, 6, 7, 12, 22, 24, 41, 42, 43, 44, 45, 52, 53, 55, 56, 60, 63, 64], "regress": [0, 1, 4, 5, 6, 7, 12, 22, 24, 41, 42, 43, 44, 45, 52, 53, 55, 56, 60, 63, 64], "all": [0, 2, 3, 4, 5, 7, 9, 12, 13, 18, 22, 29, 32, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64], "featur": [0, 6, 14, 15, 20, 26, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64], "well": [0, 11, 14, 17, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64], "sparsiti": [0, 55, 56, 62, 64], "constrain": [0, 5, 9, 60, 64], "variant": 0, "follow": [0, 12, 13, 41, 45, 61], "class": [0, 9, 12, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64], "implement": [0, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 58, 61], "basic": 0, "evalu": [0, 2, 3, 22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "ani": [0, 7, 21, 23, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 62, 63, 64], "condit": [0, 35, 36, 37, 38, 39, 40, 49, 50, 51, 54], "distribut": [0, 2, 3, 4, 5, 7, 11, 12, 15, 16, 17, 24, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61, 62, 63], "These": 0, "ar": [0, 2, 3, 4, 5, 9, 12, 13, 14, 18, 19, 20, 26, 27, 29, 30, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62], "base": [0, 7, 9, 30, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64], "standard": 0, "like": [0, 3, 14, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62], "one": [0, 3, 5, 22, 35, 36, 38, 39, 40, 41, 42, 44, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 62], "hidden": [0, 46, 47, 48, 55, 56, 64], "layer": [0, 11, 15, 46, 47, 48, 54, 55, 56, 64], "neural": [0, 15, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62], "network": [0, 15, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62], "have": [0, 9, 11, 12, 16, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "paramet": [0, 5, 9, 11, 12, 13, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "assign": [0, 5, 13, 16, 19, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "data": [0, 2, 3, 5, 9, 11, 12, 13, 16, 19, 20, 22, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64], "sampl": [0, 2, 3, 4, 7, 8, 10, 14, 20, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64], "accord": [0, 13, 20, 58], "indic": [0, 13, 29, 52, 53, 54, 55, 56, 57], "consequ": [0, 14, 19, 49, 50, 51], "do": [0, 9, 13, 18, 20, 22, 49, 50, 51, 61], "depend": [0, 2, 4, 5, 13, 19, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "locat": [0, 33], "overal": [0, 16, 61], "can": [0, 3, 9, 11, 12, 16, 17, 19, 22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64], "us": [0, 1, 5, 6, 7, 9, 11, 12, 13, 15, 16, 18, 19, 20, 22, 26, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64], "decis": [0, 7, 19, 20, 24, 27, 63, 64], "boundari": [0, 7, 20, 24, 63, 64], "hyper": 0, "howev": [0, 16], "underli": [0, 58], "cannot": [0, 11, 19, 29, 60], "unseen": [0, 19], "predict": [0, 2, 3, 4, 9, 12, 14, 15, 18, 19, 20, 22, 29, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62], "train": [0, 12, 15, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62], "progress": [0, 2, 3, 4, 5, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "remov": 0, "thei": [0, 9, 22], "select": [0, 6, 30, 31, 52, 53, 54, 55, 56, 58, 60, 63, 64], "subset": [0, 53, 54, 55, 56], "which": [0, 2, 4, 5, 12, 13, 18, 20, 27, 29, 30, 31, 32, 33, 38, 40, 52, 53, 54, 55, 56, 57, 58, 62], "mai": [0, 9, 14, 58, 61, 62], "enhanc": 0, "interpret": 0, "we": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27, 61, 62, 64], "propos": [0, 3, 9, 11, 20, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 64], "method": [0, 2, 3, 4, 5, 9, 13, 16, 19, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 64], "architectur": [0, 15, 55, 56, 64], "thu": [0, 2, 3, 4, 5, 16, 29, 62], "rule": [0, 57], "simultan": [0, 52, 53, 54, 55, 56], "construct": [0, 26, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "i": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 26, 27, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64], "learnt": [0, 26], "function": [0, 12, 13, 18, 29, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64], "intend": 0, "help": [0, 14, 58, 61], "understand": 0, "structur": [0, 58, 59], "abov": 0, "print": [0, 2, 3, 4, 5, 9, 13, 16, 17, 19, 20, 22, 26, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "inner": 0, "thi": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 26, 30, 31, 33, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64], "aim": [0, 12], "decor": [0, 9, 29], "give": [0, 7, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62], "further": [0, 62], "guidanc": [0, 9], "desir": [0, 18], "synthet": 0, "spars": [1, 5, 6, 7, 13, 18, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 58, 60, 62, 63, 64], "mmd": [1, 3, 6, 7, 11, 16, 24, 27, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64], "ovo": [1, 6, 7, 9, 13, 15, 16, 19, 35, 36, 37, 38, 39, 40, 42, 44, 46, 48, 49, 51, 53, 55, 62, 63, 64], "linear": [1, 6, 7, 9, 11, 14, 17, 18, 20, 22, 38, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64], "mi": [1, 6, 7, 12, 43, 47, 50, 52, 54, 57, 60, 63], "group": [1, 4, 6, 7, 52, 53, 54, 55, 56, 60, 63, 64], "model": [1, 6, 7, 21, 23, 24, 26, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64], "ova": [1, 6, 7, 22, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 62, 63, 64], "go": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 61], "end": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 60], "download": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 61], "full": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 60], "exampl": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63], "code": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 61], "In": [2, 3, 4, 5, 12, 13, 15, 20, 33, 61, 62, 64], "ask": [2, 3, 4, 5, 62], "gemclu": [2, 3, 4, 5, 7, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 27, 60, 63, 64], "sparselinearmmd": [2, 5, 52, 55], "perform": [2, 3, 4, 5, 9, 13, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64], "where": [2, 3, 4, 5, 9, 14, 18, 22, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "regularis": [2, 3, 4, 5, 20, 41, 42, 43, 44, 45], "penalti": [2, 3, 4, 5, 20, 22, 41, 45, 52, 53, 54, 55, 56, 64], "increas": [2, 3, 4, 5, 52, 53, 54, 55, 56, 58], "until": [2, 3, 4, 5, 52, 53, 54, 55, 56, 58], "2": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 28, 29, 30, 31, 33, 35, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 62, 64], "discard": [2, 3, 4, 5], "keep": [2, 3, 4, 64], "best": [2, 3, 4, 9, 52, 53, 54, 55, 56, 58], "weight": [2, 3, 4, 29, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "minimum": [2, 3, 4, 52, 53, 54, 55, 56, 58], "number": [2, 3, 4, 9, 11, 13, 19, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61], "maintain": [2, 3, 4], "gemini": [2, 3, 4, 5, 11, 12, 13, 14, 17, 18, 19, 23, 24, 26, 27, 29, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63], "score": [2, 3, 4, 5, 13, 16, 19, 20, 23, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63], "close": [2, 3, 4, 9, 11, 30, 33], "90": [2, 3, 4], "maximum": [2, 3, 4, 13, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "valu": [2, 3, 4, 11, 13, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "encount": [2, 3, 4], "dure": [2, 3, 4, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "consist": [2, 3, 4, 5, 9, 11, 17, 20, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62], "3": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 26, 27, 30, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62], "isotrop": [2, 3, 4, 12, 30], "gaussian": [2, 3, 4, 7, 11, 12, 13, 15, 20, 22, 24, 30, 31, 32, 33, 60, 63], "so": [2, 3, 4, 14, 18, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "find": [2, 3, 4, 5, 9, 14, 18, 57, 61], "5d": [2, 3], "20": [2, 3, 30, 46, 47, 48, 55, 56], "noisi": [2, 3, 4, 5, 30, 31], "variabl": [2, 3, 4, 5, 13, 30, 31, 52, 53, 54, 55, 56, 60], "optim": [2, 3, 4, 5, 11, 18], "solut": [2, 3, 4, 5, 9, 18, 52, 53, 54, 55, 56], "should": [2, 3, 4, 5, 9, 35, 36, 37, 38, 39, 40, 54, 57], "onli": [2, 3, 4, 5, 13, 14, 19, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62], "5": [2, 3, 4, 5, 9, 11, 13, 14, 15, 18, 19, 20, 27, 30, 52, 53, 54, 55, 56], "relev": [2, 3, 4, 5], "suffici": [2, 3, 4, 5], "get": [2, 3, 4, 5, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62], "correct": [2, 3, 4, 5, 12], "import": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 62], "numpi": [2, 3, 4, 5, 9, 11, 12, 13, 14, 16, 18, 19, 20, 22, 61], "np": [2, 3, 4, 5, 9, 11, 12, 13, 14, 16, 18, 19, 20, 22], "from": [2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64], "matplotlib": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "pyplot": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "plt": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "sklearn": [2, 3, 4, 9, 11, 13, 15, 16, 17, 18, 19, 20, 22, 26, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 58, 62, 64], "metric": [2, 3, 9, 11, 16, 17, 19, 22, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64], "celeux_on": [2, 3, 9], "gener": [2, 3, 4, 5, 9, 11, 12, 13, 16, 17, 19, 20, 22, 26, 27, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "separ": [2, 3, 4, 13, 19, 20, 60], "addit": [2, 3, 30, 31, 38, 40, 60, 62], "p": [2, 3, 9, 13, 30, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62], "independ": [2, 3, 30, 62], "x": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64], "y": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 64], "n": [2, 3, 5, 9, 12, 13, 14, 19, 30, 31, 32, 33, 34], "300": [2, 3, 30], "mu": [2, 3, 9, 30], "1": [2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 26, 27, 29, 30, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62], "7": [2, 3, 5, 13, 16, 18, 27, 30], "random_st": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "0": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63], "creat": [2, 3, 4, 5, 16, 17, 18, 19, 20], "just": [2, 3, 4, 5, 20], "call": [2, 3, 4, 5, 13, 16, 19, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "iter": [2, 3, 4, 5, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "through": [2, 3, 4, 5, 55, 56, 58, 60, 61], "gradient": [2, 3, 4, 5, 12, 16, 29, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "descent": [2, 3, 4, 5, 16, 29, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "clf": [2, 3, 4, 5, 14, 15, 20, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55], "alpha": [2, 3, 4, 5, 11, 13, 14, 18, 20, 33, 52, 53, 54, 55, 56], "true": [2, 3, 4, 5, 9, 12, 13, 14, 15, 18, 19, 20, 22, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64], "search": [2, 3, 4, 5], "elimin": [2, 3, 4, 5, 55, 56], "best_weight": [2, 3, 4, 5, 52, 53, 54, 55, 56], "n_featur": [2, 3, 4, 5, 30, 31, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "take": [2, 4, 5, 9, 11, 14, 20, 62], "look": [2, 4, 5, 11, 16, 20, 62], "how": [2, 4, 5, 7, 9, 15, 19, 20, 22, 26, 27, 30, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 64], "decreas": [2, 4], "f": [2, 3, 4, 5, 13, 16, 17, 19, 22, 33, 35, 36, 37, 39, 55, 56, 61, 62], "top": [2, 4, 5, 12, 14, 52, 54, 55, 56], "wa": [2, 4, 5, 30, 31, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62], "max": [2, 4, 5, 9, 11, 18, 20], "settl": [2, 4, 5], "an": [2, 4, 5, 7, 9, 13, 14, 18, 24, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64], "optimum": [2, 4, 5], "9": [2, 4, 27, 52, 53, 54, 55, 56], "highlight": [2, 4], "along": [2, 4, 18], "titl": [2, 3, 4, 11, 12, 61], "plot": [2, 4, 11, 13, 14], "xlabel": [2, 4, 14, 15, 20], "ylabel": [2, 4, 14, 15, 20], "ylim": [2, 4, 11, 14, 16], "show": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 26, 27], "expect": [2, 3, 12, 14, 62], "first": [2, 3, 12, 22, 46, 47, 48, 55, 56, 62], "linalg": [2, 3], "norm": [2, 3, 29, 64], "axi": [2, 3, 4, 5, 11, 12, 16, 18], "ord": [2, 3], "8259728240495163": 2, "0249912491496707": 2, "7224921242347038": 2, "arrai": [2, 3, 4, 5, 12, 13, 19, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "4": [2, 3, 4, 5, 6, 11, 13, 14, 17, 19, 27, 31], "now": [2, 3, 4, 14, 20, 22, 60], "y_pred": [2, 3, 4, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "ari": [2, 3, 9, 13, 16, 17, 19, 26, 27], "adjusted_rand_scor": [2, 3, 9, 13, 16, 17, 19, 26, 27], "83290627605772": 2, "total": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 39, 63], "run": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62], "time": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 62], "script": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27], "minut": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27], "421": [2, 6, 63], "second": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26], "jupyt": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27], "notebook": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27], "plot_feature_selection_linear": [2, 6, 63], "ipynb": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27], "python": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 60], "sourc": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61], "py": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 63], "galleri": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27, 63, 64], "sphinx": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 27], "sparselinearmi": [3, 53, 60], "path": [3, 13, 18, 52, 53, 54, 55, 56, 60], "50": [3, 4, 5, 11, 13, 14, 15, 18, 20], "contrari": [3, 12], "guid": [3, 18, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62], "specif": [3, 19, 62], "kernel": [3, 7, 9, 15, 24, 25, 28, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 49, 50, 53, 54, 55, 57, 58, 60, 63, 64], "space": [3, 38, 40, 64], "That": 3, "why": 3, "accept": [3, 52, 53, 54, 55, 56], "threshold": [3, 5, 18, 26], "lower": [3, 5], "instead": [3, 13, 14, 22, 53, 54, 55, 56, 60], "other": [3, 30, 43, 47, 49, 50, 51, 54, 57], "A": [3, 9, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62], "veri": 3, "similar": [3, 11], "found": [3, 58, 61], "discrimin": [3, 24, 29, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63], "brain": [3, 52], "mri": [3, 52], "segment": [3, 52], "kong": [3, 52], "et": [3, 20, 30, 31, 41, 45, 55, 56, 62], "al": [3, 20, 30, 31, 41, 45, 55, 56, 62], "2014": [3, 30, 31], "decomposit": 3, "keep_threshold": [3, 5, 52, 53, 54, 55, 56], "6": [3, 4, 5, 9, 27], "11": 3, "let": [3, 20, 22], "": [3, 4, 13, 15, 20, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "make": [3, 13], "small": [3, 9, 52, 53, 54, 55, 56, 61], "pca": 3, "visualis": [3, 5], "purpos": 3, "distinguish": 3, "label": [3, 17, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "x_pca": 3, "n_compon": [3, 11], "fit_transform": [3, 22], "k": [3, 32, 49, 50, 51, 62], "rang": [3, 5, 9, 13], "class_indic": 3, "scatter": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "c": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 31, 33, 61, 62], "marker": [3, 17], "o": [3, 17], "off": [3, 11, 16, 18], "celeux": [3, 30, 31], "lasso": [3, 4, 52, 53, 54, 55, 56, 64], "458336976163333": 3, "838": [3, 6, 63], "plot_feature_selection_logreg_mi": [3, 6, 63], "sparsemlpmmd": [4, 54, 56], "2d": [4, 31], "48": 4, "make_blob": [4, 15, 20], "center": [4, 15, 20], "cluster_std": [4, 15, 20], "n_sampl": [4, 11, 12, 15, 16, 17, 18, 20, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "200": [4, 11, 14, 15, 16, 17, 18, 20], "add": [4, 12, 29, 64], "extra": 4, "random": [4, 5, 9, 12, 13, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "seed": [4, 5, 9, 13], "concaten": [4, 5, 12, 30], "normal": [4, 5], "scale": [4, 12, 30, 32, 34, 61], "size": [4, 5, 12, 13, 18, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "18": [4, 63], "batch_siz": [4, 5, 12, 14, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57], "max_it": [4, 5, 11, 12, 17, 26, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "25": 4, "learning_r": [4, 5, 9, 12, 13, 18, 19, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "001": [4, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "our": [4, 5, 7, 9, 12, 13, 18, 61, 62], "figur": 4, "figsiz": 4, "10": [4, 9, 14, 20, 24, 34, 52, 53, 54, 55, 56, 62], "subplot": [4, 11], "tight_layout": [4, 11], "get_select": [4, 5, 52, 53, 54, 55, 56, 60], "4596486286280377": 4, "5824499242836227": 4, "4242049318552605": 4, "x_0": [4, 15, 20], "x_1": [4, 15, 20], "x_2": [4, 15, 20], "ax0": [4, 15, 20], "crimson": [4, 15, 20], "ax1": [4, 15, 20], "deepskyblu": [4, 15, 20], "ax2": [4, 15, 20], "darkgreen": [4, 15, 20], "leg": [4, 15, 20], "legend": [4, 15, 17, 20], "loc": [4, 12, 15, 20, 32, 34], "upper": [4, 15, 20], "left": [4, 15, 20, 62], "fancybox": [4, 15, 20], "scatterpoint": [4, 15, 20], "get_fram": [4, 15, 20], "set_alpha": [4, 15, 20], "460": [4, 6, 63], "plot_feature_selection_mlp": [4, 6, 63], "moreov": [5, 62], "produc": [5, 57], "some": [5, 7, 9, 11, 17, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64], "categor": [5, 49, 50, 51], "hot": [5, 52, 53, 54, 55, 56], "encod": [5, 52, 53, 54, 55, 56], "consid": [5, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58], "altogeth": 5, "option": [5, 18, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "binomi": [5, 13], "cluster": [5, 10, 22, 24, 26, 27, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64], "8": [5, 9, 14, 60], "inform": [5, 12, 20, 22, 31, 33, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62], "outcom": 5, "multinomi": 5, "x1_class_1": 5, "pval": [5, 12, 32], "05": [5, 11, 16, 17, 18, 52, 53, 54, 55, 56], "45": 5, "x2_class_1": 5, "x_class_1": 5, "x1_class_2": 5, "x2_class_2": 5, "x_class_2": 5, "x_inform": 5, "x_nois": 5, "100": [5, 9, 12, 13, 19, 26, 57], "repeat": 5, "arang": 5, "final": [5, 9], "write": 5, "out": [5, 61], "partit": [5, 52, 53, 54, 55, 56, 60], "shape": [5, 9, 12, 13, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "def": [5, 12], "rand_jitt": 5, "return": [5, 12, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "randn": 5, "len": [5, 9, 17], "01": [5, 6, 24, 52, 53, 54, 55, 56, 57, 63], "argmax": [5, 9, 20], "red": 5, "blue": [5, 14], "15": [5, 6], "1e": [5, 9, 12, 13, 18, 19, 20, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "80": 5, "4935152433868388": 5, "8084378363828292": 5, "6467502691062634": 5, "902": [5, 6, 63], "plot_grouped_select": [5, 6, 63], "00": [6, 10, 23, 24, 28, 63], "621": 6, "execut": [6, 10, 23, 24, 28, 63], "file": [6, 10, 23, 24, 28, 63], "auto_exampl": [6, 10, 23, 24, 28], "feature_select": [6, 63], "mem": [6, 10, 23, 24, 28, 63], "mb": [6, 10, 23, 24, 28, 63], "06": [6, 63], "04": [6, 63], "02": [6, 23, 28, 63], "here": [7, 9, 11, 12, 13, 14, 15, 17, 22, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64], "introduc": [7, 24, 60, 63], "non": [7, 13, 16, 24, 31, 63], "parametr": [7, 13, 16, 24, 62, 63], "kmean": [7, 15, 24, 25, 28, 38, 58, 63], "map": [7, 24, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63], "mixtur": [7, 11, 13, 15, 20, 24, 30, 31, 32, 33, 60, 63], "low": [7, 9, 24, 57, 63], "degre": [7, 24, 33, 34, 63], "student": [7, 24, 33, 34, 60, 63], "compar": [7, 24, 30, 31, 35, 36, 38, 39, 40, 62, 63], "circl": [7, 16, 24, 63], "dataset": [7, 15, 18, 24, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 60, 62, 63], "chang": [7, 24, 52, 53, 54, 55, 56, 63], "draw": [7, 14, 24, 30, 31, 32, 33, 34, 63], "between": [7, 24, 29, 35, 36, 37, 38, 39, 40, 55, 56, 62, 63, 64], "two": [7, 11, 12, 15, 16, 17, 24, 27, 35, 36, 38, 39, 40, 46, 47, 48, 54, 55, 58, 62, 63], "interlac": [7, 24, 63], "moon": [7, 24, 63], "rim": [7, 24, 41, 42, 43, 44, 60, 63], "graph": [7, 18, 19, 24, 60, 63], "node": [7, 16, 19, 24, 27, 58, 60, 63], "nonparametr": [7, 9, 16, 19, 24, 60, 63], "extend": [7, 24, 63], "build": [7, 24, 25, 28, 63], "your": [7, 24, 62, 63], "own": [7, 24, 62, 63], "link": [7, 8, 10, 29, 60, 63], "constraint": [7, 8, 10, 29, 52, 54, 55, 56, 58, 60, 63], "pair": [7, 8, 10, 13, 18, 29, 63], "differenti": [7, 25, 28, 60, 63], "unsupervis": [7, 9, 12, 25, 28, 58, 60, 63], "dougla": [7, 25, 28, 60, 63], "object": [7, 12, 15, 16, 25, 28, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63], "kauri": [7, 25, 28, 59, 60, 63], "auto_examples_python": 7, "zip": 7, "auto_examples_jupyt": 7, "improv": [9, 52, 53, 54, 55, 56, 62], "enforc": 9, "loos": 9, "equival": [9, 15, 16, 27, 38], "ensembl": 9, "learn": [9, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62], "seek": [9, 22], "agreeanc": 9, "describ": [9, 29, 41, 45, 52, 53, 54, 55, 56, 59], "ratio": 9, "were": [9, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "togeth": [9, 29], "provid": [9, 61, 62, 64], "Then": [9, 11], "ensur": [9, 12, 29, 52, 53, 54, 55, 56], "remain": [9, 52, 53, 54, 55, 56, 60], "apart": [9, 12, 14], "while": 9, "satisfi": [9, 29, 58], "try": [9, 15, 20, 61], "its": [9, 16, 57, 60, 62, 64], "level": [9, 20], "supervis": 9, "input": [9, 14, 19, 20, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64], "advantag": 9, "requir": [9, 60, 61, 64], "knowledg": 9, "rather": [9, 22], "idea": 9, "whether": [9, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "start": [9, 11, 12, 16, 17, 22, 52, 53, 54, 55, 56, 61], "categoricalwasserstein": [9, 13, 49, 50], "linearmmd": [9, 41, 43, 44, 45], "add_mlcl_constraint": [9, 60], "itertool": [9, 13], "challeng": [9, 11, 17], "mean": [9, 11, 12, 13, 14, 16, 19, 30, 32, 33, 38], "fit": [9, 11, 13, 16, 18, 19, 20, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62], "sever": [9, 62], "variou": [9, 52, 53, 54, 55, 56], "all_model": 9, "n_cluster": [9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 26, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62], "cosin": [9, 38, 40, 41, 42, 44, 46, 48, 49, 51, 53, 55, 58], "sigmoid": [9, 12, 38, 41, 42, 46, 49, 53, 55, 58], "rbf": [9, 11, 16, 38, 41, 42, 46, 49, 53, 55, 58], "sub": 9, "11914066061963555": 9, "11176053892324672": 9, "11421905413971052": 9, "22472124150185058": 9, "e": [9, 30, 31, 35, 36, 37, 38, 39, 40, 61, 62], "same": [9, 12, 19, 22, 29, 64], "consensus_matrix": 9, "zero": [9, 11, 60], "j": [9, 13], "combinations_with_replac": 9, "r": [9, 35, 36, 37, 38, 39, 40, 55, 56, 62], "int": [9, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "precomput": [9, 13, 18, 22, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "notic": [9, 27], "api": [9, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62], "although": 9, "superflu": 9, "consensus_model": 9, "y_pred_consensu": 9, "predict_proba": [9, 20, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "what": 9, "10728640074310927": 9, "simul": 9, "extrapol": 9, "real": 9, "life": 9, "situat": 9, "would": [9, 16, 18, 61], "emphas": 9, "more": [9, 62, 64], "field": 9, "expert": 9, "most": [9, 64], "confid": 9, "sorted_confidence_sampl": 9, "sort": 9, "kei": 9, "lambda": 9, "revers": 9, "must_link": [9, 29], "unsure_sample_pair": 9, "combin": [9, 13, 38, 40, 41, 42, 44, 46, 48, 49, 51, 53, 55, 58, 60], "next": 9, "cannot_link": [9, 29], "over": [9, 30], "base_model": 9, "line": 9, "mlcl_consensus_model": 9, "y_pred_mlcl_consensu": 9, "16976700304809886": 9, "consensus_ord": 9, "argsort": 9, "imshow": 9, "cmap": [9, 11, 14, 18], "seismic": 9, "223": [9, 10, 63], "plot_semi_supervised_consensu": [9, 10, 63], "08": [10, 24, 63], "mlcl": [10, 63], "consensu": [10, 63], "centr": [11, 17], "algorithm": [11, 16, 17, 18, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64], "unless": [11, 17], "adequ": [11, 13, 17], "spectralclust": 11, "gaussianmixtur": 11, "make_circl": [11, 16, 17], "nois": [11, 16, 17, 18], "factor": [11, 16, 17, 29, 52, 53, 54, 55, 56, 58], "normalis": [11, 16], "std": [11, 16], "ddof": [11, 16], "set": [11, 17, 29, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64], "covari": [11, 13, 19, 32], "type": [11, 60, 62], "spheric": 11, "lighten": 11, "correspond": [11, 38, 40, 41, 42, 44, 46, 48, 49, 51, 53, 55, 58], "symmetri": 11, "eas": 11, "job": 11, "initialis": [11, 12, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "actual": [11, 58], "gm": 11, "covariance_typ": 11, "means_init": 11, "1000": [11, 12, 17, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "spectral": [11, 18], "sc": 11, "multi": [11, 64], "perceptron": [11, 64], "becaus": [11, 13, 18, 52, 53, 54, 55, 56], "incap": 11, "euclidean_gemini": 11, "mlpmmd": [11, 15, 47, 48], "comput": [11, 12, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64], "rbf_gemini": 11, "grid": [11, 14], "x_val": [11, 14, 18, 20], "linspac": [11, 14, 18, 20], "min": [11, 18, 20], "num": [11, 14, 18, 20], "y_val": [11, 14, 18, 20], "xx": [11, 14, 18, 20], "yy": [11, 14, 18, 20], "meshgrid": [11, 14, 18, 20], "grid_input": [11, 14, 18, 20], "c_": [11, 14, 18, 20], "ravel": [11, 14, 18, 20], "contourf": [11, 14, 18, 20], "reshap": [11, 12, 14, 18, 20], "cm": [11, 18, 27], "labels_": [11, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "33": [11, 24, 63], "500": [11, 24, 33, 63], "plot_circl": [11, 24, 63], "It": [12, 29, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62, 64], "possibl": [12, 29, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64], "wish": 12, "avail": [12, 43, 47, 50, 54, 57, 62], "among": [12, 57], "choic": [12, 58, 64], "To": [12, 13, 18, 43, 47, 50, 54, 57], "framework": [12, 41, 45], "defin": [12, 18, 38, 40], "still": 12, "bia": [12, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "less": [12, 18], "activ": [12, 57, 60], "tell": 12, "written": [12, 61], "p_": [12, 51, 62, 64], "theta": [12, 62, 64], "text": [12, 35, 36, 37, 38, 39], "discriminativemodel": [12, 64], "draw_gmm": [12, 13, 19, 60], "binaryregress": 12, "parent": 12, "__init__": [12, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "self": [12, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "solver": [12, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "adam": [12, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "none": [12, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "verbos": [12, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "fals": [12, 13, 18, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "super": 12, "_init_param": [12, 64], "state": 12, "in_threshold": 12, "sqrt": 12, "theta_": [12, 49, 50, 51], "uniform": 12, "_get_weight": [12, 64], "For": [12, 52, 53, 54, 55, 56, 62, 64], "optimis": [12, 13, 16, 19, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "need": [12, 22, 38, 40, 60], "insid": 12, "list": [12, 29, 32, 52, 53, 54, 55, 56, 57], "_infer": [12, 64], "retain": 12, "output": [12, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64], "you": [12, 61, 62, 64], "must": [12, 29, 35, 36, 37, 38, 39, 40, 42, 44, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 60], "probabl": [12, 13, 20, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62], "vector": [12, 29, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "y_pred_logit": 12, "matmul": [12, 22], "exp": [12, 13], "flag": 12, "allow": [12, 61], "store": 12, "intermedi": 12, "backpropag": 12, "_y_sigmoid": 12, "As": 12, "duplic": 12, "opposit": 12, "column": 12, "up": [12, 58], "each": [12, 13, 16, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "row": 12, "otherwis": [12, 22, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "work": [12, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61], "_compute_grad": 12, "ha": [12, 57, 61, 62], "extens": [12, 61, 64], "appli": [12, 29], "And": 12, "finish": 12, "theta_grad": 12, "t": [12, 13, 14, 22, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "order": [12, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "match": [12, 13, 22, 57], "goal": 12, "maximis": [12, 20, 26, 29, 41, 42, 44, 45, 46, 48, 49, 50, 51, 57, 62], "common": 12, "minimis": [12, 29], "neg": 12, "ey": [12, 13, 19, 22], "ones": [12, 13, 19, 38, 40, 41, 42, 44, 46, 48, 49, 51, 53, 55, 58], "custom_model": 12, "wasserstein_ovo": [12, 43, 47, 50, 54, 57], "fit_predict": [12, 13, 14, 16, 17, 18, 19, 26, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "binari": [12, 59], "661": [12, 24, 63], "plot_custom_model": [12, 24, 63], "simplifi": [13, 37], "version": [13, 35, 36, 38, 39, 40, 41, 52, 55, 60, 62, 64], "latent": 13, "posit": [13, 19, 34], "procedur": 13, "mani": [13, 61], "determin": [13, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "distanc": [13, 18, 22, 35, 36, 37, 38, 39, 40, 44, 48, 51, 60, 62, 64], "associ": [13, 16, 19, 26], "note": [13, 18, 58, 64], "given": [13, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64], "ident": 13, "matrix": [13, 18, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "scipi": [13, 18, 61], "csgraph": [13, 18], "pairwise_dist": [13, 18, 64], "euclidean": [13, 18, 22, 40, 43, 44, 47, 48, 50, 51, 54, 57, 64], "edge_prob": 13, "adjacency_matrix": 13, "adjac": [13, 18], "symmetr": [13, 35, 36, 37, 38, 39, 40], "shortest": [13, 18], "floyd_warshal": [13, 18], "direct": [13, 18], "unweight": [13, 18], "replac": [13, 18, 22], "inf": [13, 18], "isinf": [13, 18], "specifi": [13, 22, 52, 53, 54, 55, 56, 60], "custom": [13, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60], "pass": [13, 18, 30, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "argument": [13, 38, 40, 41, 42, 44, 46, 48, 49, 51, 53, 55, 58, 60], "1789": [13, 19], "dummi": 13, "unnecessari": 13, "There": 13, "index": 13, "node_i": 13, "node_j": 13, "grai": 13, "linewidth": 13, "ari_scor": [13, 16, 19], "gemini_scor": [13, 16, 19], "3f": [13, 16, 19, 22], "977": 13, "141": 13, "379": [13, 24, 63], "plot_graph_node_clust": [13, 24, 63], "retak": [14, 18], "experi": [14, 18], "origin": [14, 18, 32, 61, 62, 64], "paper": [14, 18, 41, 45, 64], "want": [14, 18, 64], "incorpor": [14, 43, 47, 50, 54, 57], "freedom": [14, 33, 34], "seem": 14, "outlier": 14, "unlik": 14, "done": [14, 16, 60], "linearwasserstein": [14, 41, 42, 43, 45], "gstm": [14, 60], "far": 14, "df": [14, 33, 34], "zz": [14, 18, 20], "reds_r": 14, "xlim": 14, "591": [14, 24, 63], "plot_gstm": [14, 24, 63], "environ": [15, 20], "pleas": [15, 20, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62], "rerun": [15, 20], "cell": [15, 20], "html": [15, 20], "represent": [15, 20, 46, 47, 48, 55, 56], "trust": [15, 20], "On": [15, 20, 52, 54, 55, 56], "github": [15, 20, 61], "unabl": [15, 20], "render": [15, 20], "load": 15, "page": [15, 20], "nbviewer": [15, 20], "org": [15, 20], "nbsp": [15, 20], "mlpmmdifittedmlpmmd": 15, "640": [15, 24, 63], "plot_intro_mlp_mmd": [15, 24, 63], "sinc": 16, "mode": [16, 52, 53, 54, 55, 56, 60, 64], "directli": [16, 49, 50, 51, 64], "behav": 16, "categoricalmmd": [16, 19, 50, 51], "000": 16, "330": 16, "934": [16, 24, 63], "plot_kernel_kmean": [16, 24, 63], "kernelrim": [17, 60], "model_kernel": 17, "base_kernel": [17, 41], "laplacian": [17, 38, 41, 42, 46, 49, 53, 55, 58], "reg": [17, 20, 41, 45], "novel": [17, 62], "them": [17, 58], "new_x": 17, "new_i": 17, "new_pr": 17, "test": [17, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "959": [17, 24, 63], "plot_kernel_rim": [17, 24, 63], "face": 18, "trick": 18, "mlpwasserstein": [18, 46, 47], "abl": [18, 54], "make_moon": 18, "2023": [18, 62], "edg": 18, "than": [18, 52, 53, 54, 55, 56, 62], "quantil": 18, "399": [18, 24, 63], "plot_moon_clust": [18, 24, 63], "illustr": 19, "alwai": 19, "975": 19, "328": 19, "278": [19, 24, 63], "plot_nonparametric_clust": [19, 24, 63], "mutual": [20, 33, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62], "kraus": [20, 41, 45], "2010": [20, 41, 45], "under": [20, 52, 53, 54, 55, 56, 61], "ell_2": [20, 29, 41, 45], "rimifittedrim": 20, "u": [20, 61], "grad": 20, "grid_pr": 20, "isol": [20, 60], "4486538478231719": 20, "296": [20, 24, 63], "plot_rim": [20, 24, 63], "anoth": [22, 64], "preprocess": 22, "linear_model": [22, 27], "naive_bay": 22, "load_breast_canc": 22, "return_x_i": [22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 62], "robustscal": 22, "differ": [22, 26, 27, 52, 53, 54, 55, 56, 57, 58], "breast": 22, "cancer": 22, "l2": [22, 40, 44, 48, 51], "clf1": 22, "logisticregress": 22, "p_y_given_x_1": 22, "naiv": 22, "bay": [22, 62], "hypothes": [22, 61], "clf2": 22, "gaussiannb": 22, "p_y_given_x_2": 22, "both": [22, 60, 64], "wassersteingemini": [22, 60], "v": [22, 35, 36, 38, 39, 40, 62], "wasserstein_scor": 22, "affin": [22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "wasserstein": [22, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 60, 64], "compute_affin": [22, 35, 36, 37, 38, 39, 40], "clf1_score": 22, "clf2_score": 22, "878": 22, "005": 22, "By": [22, 64], "obtain": [22, 27], "share": 22, "y_one_hot": 22, "precomputed_dist": 22, "431": 22, "403": 22, "165": [22, 23, 63], "plot_gemini_scor": [22, 23, 63], "09": 24, "637": 24, "07": [24, 63], "few": [26, 52, 53, 54, 55, 56], "bin": [26, 57], "per": [26, 35, 36, 37, 38, 39, 40, 57, 60], "iri": [26, 27], "load_iri": [26, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 62], "target": [26, 27], "mmd_ova": [26, 43, 47, 50, 54, 56, 57, 62], "n_cut": [26, 57], "y_pred_linear": [26, 27], "4741506860502533": 26, "5681159420289855": 26, "559": [26, 28, 63], "plot_douglas_exampl": [26, 28, 63], "accompanni": 27, "gain": [27, 58], "deriv": [27, 35, 36, 37, 38, 39, 40, 54, 61, 62, 64], "squar": [27, 35], "print_kauri_tre": 27, "limit": [27, 58], "depth": [27, 58], "simplic": 27, "max_clust": [27, 58], "max_depth": [27, 58], "9459": 27, "167022308022": 27, "additive_chi2_model": 27, "additive_chi2": [27, 38, 41, 42, 46, 49, 53, 55, 58], "y_pred_additive_chi2": 27, "22": [27, 62], "43532371061057": 27, "7172759168337549": 27, "8680377279943841": 27, "feature_nam": [27, 59], "petal": 27, "length": [27, 52, 53, 54, 55, 56], "width": 27, "318": [27, 28, 63], "plot_kauri_exampl": [27, 28, 63], "877": 28, "tree": [28, 60, 63], "gemini_model": 29, "contraint": 29, "respect": [29, 30, 54, 60, 62], "fulli": 29, "mlp___": 29, "linear___": 29, "categorical___": 29, "involv": [29, 43, 47, 50, 54, 57, 62], "ndarrai": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "n_constraint": 29, "default": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64], "being": 29, "i1": 29, "j1": 29, "iN": 29, "jn": 29, "If": [29, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64], "float": [29, 30, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "hyperparamet": [29, 41, 45, 57], "tupl": [30, 31, 32], "compon": [30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "dimens": 30, "excess": 30, "taken": [30, 31], "section": [30, 31], "control": [30, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "randomst": [30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "instanc": [30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "creation": [30, 31, 32, 33, 34], "reproduc": [30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "across": [30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "multipl": [30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "gmm": [30, 31, 32, 33], "drawn": [30, 31, 32, 33, 34, 62], "refer": [30, 31, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "g": [30, 31], "martin": [30, 31], "magniett": [30, 31], "m": [30, 31, 33, 55, 56, 61, 62], "l": [30, 31, 33, 55, 56, 61, 62], "maugi": [30, 31], "rabusseau": [30, 31], "rafteri": [30, 31], "regular": [30, 31, 41, 45], "approach": [30, 31], "journal": [30, 31, 62], "de": [30, 31], "la": [30, 31], "societ": [30, 31], "francais": [30, 31], "statistiqu": [30, 31], "155": [30, 31], "57": [30, 31], "71": [30, 31], "2000": 31, "linearli": 31, "14": 31, "element": 32, "d": [32, 34, 57, 61, 62], "proport": 32, "articl": 33, "ohl": [33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62], "mattei": [33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62], "bouveyron": [33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62], "harchaoui": [33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62], "w": [33, 35, 36, 37, 38, 39, 40, 61, 62], "leclercq": [33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62], "droit": [33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62], "precioso": [33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62], "2022": [33, 61, 62], "octob": [33, 61], "generalis": [33, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62], "advanc": [33, 61, 62], "process": [33, 61, 62], "system": [33, 61, 62], "multivari": [34, 60], "semi": 34, "definit": [34, 60, 62], "spread": 34, "epsilon": [35, 36, 37, 38, 39, 40], "12": [35, 36, 37, 38, 39, 40], "helling": 35, "mathcal": [35, 36, 37, 38, 39, 40], "mathbb": [35, 36, 37, 38, 39, 40, 62], "_": [35, 36, 37, 38, 39, 40, 62], "sim": [35, 36, 37, 38, 39, 40, 62], "h": [35, 61, 62], "y_a": [35, 36, 38, 39, 40], "y_b": [35, 36, 38, 39, 40], "bool": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "precis": [35, 36, 37, 38, 39, 40], "clip": [35, 36, 37, 38, 39, 40], "avoid": [35, 36, 37, 38, 39, 40], "numer": [35, 36, 37, 38, 39, 40], "instabl": [35, 36, 37, 38, 39, 40], "unus": [35, 36, 37, 39], "diverg": [35, 36, 37, 39], "return_grad": [35, 36, 37, 38, 39, 40], "context": [35, 36, 37, 38, 39, 40], "either": [35, 36, 37, 38, 39, 40, 52, 53, 54, 55, 56, 58], "result": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62], "nabla_": [35, 36, 37, 38, 39, 40], "kl": [36, 37], "classic": [36, 37, 41, 45], "complet": [37, 61], "shortcut": 37, "klgemini": [37, 60], "kernel_param": [38, 41, 42, 46, 49, 53, 55, 58], "discrep": 38, "kappa": 38, "chi2": [38, 41, 42, 46, 49, 53, 55, 58], "poli": [38, 41, 42, 46, 49, 53, 55, 58], "polynomi": [38, 41, 42, 46, 49, 53, 55, 58], "dict": [38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "keyword": [38, 40, 41, 42, 44, 46, 48, 49, 51, 53], "ignor": [38, 40, 52, 53, 54, 55, 56], "callabl": [38, 40, 41], "case": [38, 40, 64], "variat": [39, 52, 54, 55, 56, 58], "tv": 39, "metric_param": [40, 44, 48, 51], "delta": [40, 57], "l1": [40, 44, 48, 51], "manhattan": [40, 44, 48, 51], "cityblock": [40, 44, 48, 51], "paired_dist": [40, 44, 48, 51], "base_kernel_param": 41, "kernelis": [41, 60], "form": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "neuron": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "epoch": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "singl": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "initi": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "rate": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "step": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "updat": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61], "sgd": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "stochast": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "kingma": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "diederik": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "jimmi": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "ba": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "batch": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "whole": [41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56], "messag": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "stdout": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "dictionari": [41, 42, 44, 46, 48, 49, 51, 53], "chosen": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "linearmodel": [41, 42, 44, 45, 60], "maxim": [41, 45, 52, 53, 54, 55, 56, 58], "ryan": [41, 45], "gome": [41, 45], "andrea": [41, 45], "pietro": [41, 45], "perona": [41, 45], "4390485754": [41, 45], "attribut": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "w_": [41, 42, 43, 44, 45, 52, 53, 54], "b_": [41, 42, 43, 44, 45, 52, 53, 54], "bias": [41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56], "optimiser_": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "adamoptim": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "sgdoptim": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "n_iter_": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "took": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "converg": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62], "present": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64], "convent": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62], "estim": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "get_gemini": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "get_metadata_rout": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "metadata": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "rout": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "check": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62], "user": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62], "mechan": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "metadatarequest": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "encapsul": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "get_param": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "deep": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "subobject": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "param": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "name": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "membership": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "after": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "closest": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "seen": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "set_param": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "nest": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "pipelin": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "latter": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "__": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "loui": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "pierr": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "alexandr": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "charl": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "warith": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "micka\u00ebl": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "arnaud": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "freder": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "7048160115": 42, "str": [43, 47, 50, 54, 57], "mmd_ovo": [43, 47, 50, 54, 57], "wasserstein_ova": [43, 47, 50, 54, 57], "available_gemini": [43, 47, 50, 54, 57], "also": [43, 47, 50, 54, 57, 61], "7550724287": 43, "7103992986": 44, "n_features_in": [44, 45], "n_hidden_dim": [46, 47, 48, 55, 56], "mlpmodel": [46, 48, 60, 62], "7592155845": 46, "w1_": [46, 47, 48, 55, 56], "b1_": [46, 47, 48, 55, 56], "w2_": [46, 47, 48, 55, 56], "b2_": [46, 47, 48, 55, 56], "h_": [46, 47, 48, 55, 56], "6325592616": 47, "7636482655": 48, "x_i": [49, 50, 51], "ki": [49, 50, 51], "contrarili": [49, 50, 51], "part": [49, 50, 51], "doe": [49, 50, 51], "support": [49, 50, 51, 60, 61], "categoricalmodel": [49, 51, 60], "tailor": [49, 50, 51], "2117267518": 49, "logits_": [49, 50, 51], "logit": [49, 50, 51, 57], "6577369504": 50, "3555482569": 51, "vanilla": [52, 54, 55, 56], "bring": [52, 54, 55, 56, 62], "via": [52, 54], "proxim": [52, 54, 55, 56, 60], "repres": [52, 53, 54, 55, 56], "typic": [52, 53, 54, 55, 56], "enter": [52, 53, 54, 55, 56], "alon": [52, 53, 54, 55, 56], "scheme": [52, 53, 54, 55, 56], "sparselinearmodel": [52, 53, 60, 64], "joint": [52, 53, 54, 55, 56, 62, 64], "youyong": 52, "yue": 52, "deng": 52, "qionghai": 52, "dai": 52, "5812412917": 52, "groups_": [52, 53, 54, 55, 56], "explicit": [52, 53, 54, 55, 56], "retriev": [52, 53, 54, 55, 56], "ind": [52, 53, 54, 55, 56], "alpha_multipli": [52, 53, 54, 55, 56], "min_featur": [52, 53, 54, 55, 56], "restore_best_weight": [52, 53, 54, 55, 56], "early_stopping_factor": [52, 53, 54, 55, 56], "99": [52, 53, 54, 55, 56], "max_pati": [52, 53, 54, 55, 56], "unfold": [52, 53, 54, 55, 56], "geometr": [52, 53, 54, 55, 56], "amount": [52, 53, 54, 55, 56], "histori": [52, 53, 54, 55, 56], "kept": [52, 53, 54, 55, 56], "certain": [52, 53, 54, 55, 56], "percentag": [52, 53, 54, 55, 56], "reduct": [52, 53, 54, 55, 56], "made": [52, 53, 54, 55, 56, 64], "incompat": [52, 53, 54, 55, 56], "dynam": [52, 53, 54, 55, 56, 60], "retrain": [52, 53, 54, 55, 56], "greater": [52, 53, 54, 55, 56], "stop": [52, 53, 54, 55, 56], "minim": [52, 53, 54, 55, 56], "deem": [52, 53, 54, 55, 56], "offer": [52, 53, 54, 55, 56], "good": [52, 53, 54, 55, 56, 62], "restor": [52, 53, 54, 55, 56], "incompar": [52, 53, 54, 55, 56], "natur": [52, 53, 54, 55, 56], "when": [52, 53, 54, 55, 56], "beyond": [52, 53, 54, 55, 56], "upgrad": [52, 53, 54, 55, 56], "too": [52, 53, 54, 55, 56], "earli": [52, 53, 54, 55, 56], "wait": [52, 53, 54, 55, 56], "without": [52, 53, 54, 55, 56, 61, 62], "befor": [52, 53, 54, 55, 56], "sequenti": [52, 53, 54, 55, 56], "group_penalti": [52, 53, 54, 55, 56], "7040618744": 53, "adapt": 54, "_compute_gemini": 54, "sparsemlpmodel": [54, 55, 60], "skip": [55, 56, 64], "connect": [55, 56, 64], "inspir": [55, 56, 62, 64], "lassonet": [55, 56, 62, 64], "lemhadri": [55, 56, 62], "2021": [55, 56, 62], "hierarchi": [55, 56], "coeffici": [55, 56], "rel": [55, 56, 57], "strength": [55, 56], "ruan": [55, 56, 62], "abraham": [55, 56, 62], "tibshirani": [55, 56, 62], "7664211836": 55, "w_skip_": [55, 56], "feature_mask": 57, "temperatur": 57, "dndt": 57, "leverag": 57, "appris": 57, "split": [57, 58], "learnabl": 57, "wise": 57, "soft": 57, "recombin": 57, "those": [57, 58], "cut": 57, "boolean": 57, "leaf": [57, 58], "high": 57, "smoothen": 57, "wherea": 57, "closer": 57, "dirac": [57, 58], "explor": [57, 58], "find_active_point": 57, "calcul": 57, "point": 57, "fall": 57, "within": 57, "bound": 57, "contribut": [57, 61], "active_point": 57, "integ": 57, "min_samples_split": 58, "min_samples_leaf": 58, "max_featur": 58, "max_leav": 58, "reward": 58, "ideal": 58, "new": [58, 60], "refurbish": 58, "alreadi": 58, "exist": 58, "leav": 58, "least": 58, "logic": 58, "randomli": 58, "upon": 58, "put": 58, "tree_": 58, "_tree": 58, "repeatedli": 58, "choos": 58, "reach": 58, "onc": 58, "special": [58, 61], "henc": [58, 62], "constant": 58, "kauri_tre": 59, "ad": [60, 64], "simpli": 60, "compat": [60, 61], "No": 60, "longer": 60, "hellingergemini": 60, "tvgemini": 60, "parametris": 60, "string": 60, "dedic": [60, 61], "fuse": [60, 64], "mmdova": 60, "mmdovo": 60, "mmdgemini": 60, "wassersteinova": 60, "wassersteinovo": 60, "fix": 60, "mistak": 60, "cart": 60, "experiment": 60, "minor": 60, "document": 60, "better": 60, "scikit": [60, 61, 62], "regard": 60, "abcmeta": 60, "valid": 60, "problem": 60, "retrocompat": 60, "1d": 60, "extern": 60, "usag": [60, 64], "etc": 60, "spar": 60, "multivariate_student_t": 60, "divis": 60, "thank": 61, "realli": 61, "pleasur": 61, "theori": [61, 62], "tool": 61, "http": 61, "io": 61, "main": 61, "com": 61, "instruct": 61, "pip": 61, "librari": [61, 64], "coupl": 61, "scientif": 61, "pot": 61, "repo": 61, "git": 61, "clone": 61, "cd": 61, "cite": 61, "neurip": 61, "inproceed": 61, "ohl2022generalis": 61, "author": 61, "micka": 61, "booktitl": 61, "editor": 61, "alic": 61, "oh": [61, 62], "alekh": 61, "agarw": [61, 62], "daniel": 61, "belgrav": [61, 62], "kyunghyun": 61, "cho": [61, 62], "year": 61, "url": 61, "openreview": 61, "net": 61, "forum": 61, "id": 61, "0oy3pia": 61, "adp": 61, "been": 61, "french": 61, "govern": 61, "3ia": 61, "c\u00f4te": 61, "azur": 61, "invest": 61, "futur": 61, "project": 61, "manag": 61, "nation": 61, "research": [61, 62], "agenc": 61, "anr": 61, "19": 61, "p3ia": 61, "0002": 61, "franc": 61, "canada": 61, "fund": 61, "ffcr": 61, "partli": 61, "eu": 61, "horizon": 61, "2020": 61, "ai4media": 61, "contract": 61, "951911": 61, "jhonatan": 61, "torr": 61, "hi": 61, "insight": 61, "develop": 61, "short": 62, "descript": 62, "hint": 62, "about": 62, "detail": 62, "public": 62, "stand": 62, "measur": 62, "custer": 62, "right": 62, "y_1": 62, "y_2": 62, "theorem": 62, "easili": 62, "tractabl": 62, "cane": 62, "valuat": 62, "assumpt": 62, "At": 62, "moment": 62, "report": 62, "fewer": 62, "practic": 62, "merg": 62, "loss": 62, "mainli": 62, "feel": 62, "interest": 62, "ed": 62, "machin": 62, "127": 62, "29": 62, "doi": 62, "48550": 62, "arxiv": 62, "2302": 62, "03391": 62, "38": 63, "523": 63, "constructor": 64, "achiev": 64, "manner": 64, "pairwise_kernel": 64, "forc": 64, "flexibl": 64, "yet": 64, "express": 64, "enough": 64, "term": 64, "simpler": 64, "induc": 64, "rewrit": 64, "includ": 64}, "objects": {"gemclus": [[29, 0, 1, "", "add_mlcl_constraint"]], "gemclus.data": [[30, 0, 1, "", "celeux_one"], [31, 0, 1, "", "celeux_two"], [32, 0, 1, "", "draw_gmm"], [33, 0, 1, "", "gstm"], [34, 0, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[35, 1, 1, "", "HellingerGEMINI"], [36, 1, 1, "", "KLGEMINI"], [37, 1, 1, "", "MI"], [38, 1, 1, "", "MMDGEMINI"], [39, 1, 1, "", "TVGEMINI"], [40, 1, 1, "", "WassersteinGEMINI"]], "gemclus.gemini.HellingerGEMINI": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "compute_affinity"], [35, 2, 1, "", "evaluate"]], "gemclus.gemini.KLGEMINI": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "compute_affinity"], [36, 2, 1, "", "evaluate"]], "gemclus.gemini.MI": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "compute_affinity"], [37, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDGEMINI": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "compute_affinity"], [38, 2, 1, "", "evaluate"]], "gemclus.gemini.TVGEMINI": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "compute_affinity"], [39, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinGEMINI": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "compute_affinity"], [40, 2, 1, "", "evaluate"]], "gemclus.linear": [[41, 1, 1, "", "KernelRIM"], [42, 1, 1, "", "LinearMMD"], [43, 1, 1, "", "LinearModel"], [44, 1, 1, "", "LinearWasserstein"], [45, 1, 1, "", "RIM"]], "gemclus.linear.KernelRIM": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "fit_predict"], [41, 2, 1, "", "get_gemini"], [41, 2, 1, "", "get_metadata_routing"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "predict"], [41, 2, 1, "", "predict_proba"], [41, 2, 1, "", "score"], [41, 2, 1, "", "set_params"]], "gemclus.linear.LinearMMD": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "fit_predict"], [42, 2, 1, "", "get_gemini"], [42, 2, 1, "", "get_metadata_routing"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "predict"], [42, 2, 1, "", "predict_proba"], [42, 2, 1, "", "score"], [42, 2, 1, "", "set_params"]], "gemclus.linear.LinearModel": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "fit_predict"], [43, 2, 1, "", "get_gemini"], [43, 2, 1, "", "get_metadata_routing"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "predict"], [43, 2, 1, "", "predict_proba"], [43, 2, 1, "", "score"], [43, 2, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "fit_predict"], [44, 2, 1, "", "get_gemini"], [44, 2, 1, "", "get_metadata_routing"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "predict_proba"], [44, 2, 1, "", "score"], [44, 2, 1, "", "set_params"]], "gemclus.linear.RIM": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "fit_predict"], [45, 2, 1, "", "get_gemini"], [45, 2, 1, "", "get_metadata_routing"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "predict"], [45, 2, 1, "", "predict_proba"], [45, 2, 1, "", "score"], [45, 2, 1, "", "set_params"]], "gemclus.mlp": [[46, 1, 1, "", "MLPMMD"], [47, 1, 1, "", "MLPModel"], [48, 1, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "fit_predict"], [46, 2, 1, "", "get_gemini"], [46, 2, 1, "", "get_metadata_routing"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "predict_proba"], [46, 2, 1, "", "score"], [46, 2, 1, "", "set_params"]], "gemclus.mlp.MLPModel": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "fit_predict"], [47, 2, 1, "", "get_gemini"], [47, 2, 1, "", "get_metadata_routing"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "predict_proba"], [47, 2, 1, "", "score"], [47, 2, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "fit_predict"], [48, 2, 1, "", "get_gemini"], [48, 2, 1, "", "get_metadata_routing"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "predict_proba"], [48, 2, 1, "", "score"], [48, 2, 1, "", "set_params"]], "gemclus.nonparametric": [[49, 1, 1, "", "CategoricalMMD"], [50, 1, 1, "", "CategoricalModel"], [51, 1, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "fit_predict"], [49, 2, 1, "", "get_gemini"], [49, 2, 1, "", "get_metadata_routing"], [49, 2, 1, "", "get_params"], [49, 2, 1, "", "predict"], [49, 2, 1, "", "predict_proba"], [49, 2, 1, "", "score"], [49, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalModel": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "fit_predict"], [50, 2, 1, "", "get_gemini"], [50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "predict"], [50, 2, 1, "", "predict_proba"], [50, 2, 1, "", "score"], [50, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "fit_predict"], [51, 2, 1, "", "get_gemini"], [51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "predict_proba"], [51, 2, 1, "", "score"], [51, 2, 1, "", "set_params"]], "gemclus.sparse": [[52, 1, 1, "", "SparseLinearMI"], [53, 1, 1, "", "SparseLinearMMD"], [54, 1, 1, "", "SparseLinearModel"], [55, 1, 1, "", "SparseMLPMMD"], [56, 1, 1, "", "SparseMLPModel"]], "gemclus.sparse.SparseLinearMI": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "fit_predict"], [52, 2, 1, "", "get_gemini"], [52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "get_selection"], [52, 2, 1, "", "path"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "predict_proba"], [52, 2, 1, "", "score"], [52, 2, 1, "", "set_params"]], "gemclus.sparse.SparseLinearMMD": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "fit_predict"], [53, 2, 1, "", "get_gemini"], [53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "get_selection"], [53, 2, 1, "", "path"], [53, 2, 1, "", "predict"], [53, 2, 1, "", "predict_proba"], [53, 2, 1, "", "score"], [53, 2, 1, "", "set_params"]], "gemclus.sparse.SparseLinearModel": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "fit_predict"], [54, 2, 1, "", "get_gemini"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "get_selection"], [54, 2, 1, "", "path"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_proba"], [54, 2, 1, "", "score"], [54, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "fit"], [55, 2, 1, "", "fit_predict"], [55, 2, 1, "", "get_gemini"], [55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "get_selection"], [55, 2, 1, "", "path"], [55, 2, 1, "", "predict"], [55, 2, 1, "", "predict_proba"], [55, 2, 1, "", "score"], [55, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPModel": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "fit"], [56, 2, 1, "", "fit_predict"], [56, 2, 1, "", "get_gemini"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "get_selection"], [56, 2, 1, "", "path"], [56, 2, 1, "", "predict"], [56, 2, 1, "", "predict_proba"], [56, 2, 1, "", "score"], [56, 2, 1, "", "set_params"]], "gemclus.tree": [[57, 1, 1, "", "Douglas"], [58, 1, 1, "", "Kauri"], [59, 0, 1, "", "print_kauri_tree"]], "gemclus.tree.Douglas": [[57, 2, 1, "", "__init__"], [57, 2, 1, "", "find_active_points"], [57, 2, 1, "", "fit"], [57, 2, 1, "", "fit_predict"], [57, 2, 1, "", "get_gemini"], [57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 2, 1, "", "predict"], [57, 2, 1, "", "predict_proba"], [57, 2, 1, "", "score"], [57, 2, 1, "", "set_params"]], "gemclus.tree.Kauri": [[58, 2, 1, "", "__init__"], [58, 2, 1, "", "fit"], [58, 2, 1, "", "fit_predict"], [58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 2, 1, "", "predict"], [58, 2, 1, "", "score"], [58, 2, 1, "", "set_params"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"gemclu": [0, 12, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62], "api": 0, "score": [0, 7, 21, 22], "gemini": [0, 7, 15, 16, 21, 22, 35, 36, 37, 38, 39, 40, 61, 62, 64], "cluster": [0, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 61, 62], "model": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27], "dens": 0, "nonparametr": [0, 13, 49, 50, 51], "spars": [0, 2, 3, 4, 52, 53, 54, 55, 56], "tree": [0, 7, 25, 26, 27, 57, 58, 59], "constraint": [0, 9], "dataset": [0, 2, 3, 4, 5, 9, 11, 16, 17, 20, 22, 26, 27], "gener": [0, 7, 14, 15, 18], "featur": [1, 2, 3, 4, 5, 7, 62], "select": [1, 2, 3, 4, 5, 7, 62], "us": [2, 3, 4, 27, 61], "mmd": [2, 4, 15], "ovo": 2, "logist": [2, 3, 20], "regress": [2, 3, 20], "load": [2, 3, 4, 5, 9, 20, 22, 26, 27], "simpl": [2, 3, 4, 5, 20, 22], "synthet": [2, 3, 4, 5, 20], "train": [2, 3, 4, 5, 11, 13, 14, 16, 17, 18, 19, 20, 22], "path": [2, 4, 5], "result": [2, 4, 5, 9, 12], "final": [2, 3, 4, 13, 14, 15, 16, 18, 19, 20], "linear": [3, 5, 27, 41, 42, 43, 44, 45], "mi": [3, 37], "ova": 4, "mlp": [4, 15, 46, 47, 48], "group": 5, "comput": [6, 10, 13, 18, 23, 24, 28, 63], "time": [6, 10, 23, 24, 28, 63], "exampl": [7, 14, 15, 64], "discrimin": [7, 12, 61, 62, 64], "consensu": [7, 8, 9], "link": 9, "sampl": [9, 11, 13, 16, 17, 18, 19], "pair": 9, "multipl": 9, "build": [9, 12, 26, 27], "matrix": 9, "creat": [9, 12, 13, 15, 26, 27], "optimis": 9, "add": 9, "must": 9, "cannot": 9, "plot": [9, 12, 15], "compar": [11, 17], "circl": [11, 17], "kernel": [11, 16, 17, 27], "chang": [11, 17, 60], "draw": [11, 13, 16, 17, 18, 19], "displai": 11, "predict": [11, 17], "decis": [11, 14, 18], "boundari": [11, 14, 18], "extend": 12, "your": 12, "own": 12, "custom": 12, "test": 12, "fit": [12, 15, 26], "procedur": 12, "graph": 13, "node": 13, "from": [13, 16, 19], "gmm": [13, 19], "edg": 13, "pre": [13, 18], "specif": [13, 18], "metric": [13, 18], "between": [13, 18], "map": 14, "mixtur": 14, "gaussian": 14, "low": 14, "degre": 14, "student": 14, "distribut": [14, 64], "data": [14, 15, 30, 31, 32, 33, 34], "an": [15, 27], "introduc": 15, "kmean": [16, 27], "circular": 16, "show": 17, "similar": 17, "two": [18, 22], "interlac": 18, "moon": 18, "non": 19, "parametr": 19, "rim": [20, 45], "ani": 22, "real": 22, "supervis": 22, "differenti": 26, "unsupervis": [26, 27], "dougla": [26, 57], "object": 27, "kauri": [27, 58], "first": 27, "second": 27, "addit": 27, "chi2": 27, "evalu": 27, "perform": 27, "visualis": 27, "structur": 27, "add_mlcl_constraint": 29, "celeux_on": 30, "celeux_two": 31, "draw_gmm": 32, "gstm": 33, "multivariate_student_t": 34, "hellingergemini": 35, "klgemini": 36, "mmdgemini": 38, "tvgemini": 39, "wassersteingemini": 40, "kernelrim": 41, "linearmmd": 42, "linearmodel": 43, "linearwasserstein": 44, "mlpmmd": 46, "mlpmodel": 47, "mlpwasserstein": 48, "categoricalmmd": 49, "categoricalmodel": 50, "categoricalwasserstein": 51, "sparselinearmi": 52, "sparselinearmmd": 53, "sparselinearmodel": 54, "sparsemlpmmd": 55, "sparsemlpmodel": 56, "print_kauri_tre": 59, "releas": 60, "histori": 60, "In": 60, "develop": 60, "0": 60, "2": 60, "latest": [60, 61], "1": 60, "welcom": 61, "document": 61, "content": [61, 64], "A": 61, "packag": [61, 64], "instal": 61, "offici": 61, "version": 61, "refer": [61, 62], "acknowledg": 61, "quick": 62, "start": 62, "what": [62, 64], "i": 62, "do": 62, "user": 64, "guid": 64, "which": 64, "ar": 64, "implement": 64, "avail": 64, "basic": 64}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"GEMCLUS API": [[0, "gemclus-api"]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [7, "scoring-with-gemini"], [21, "scoring-with-gemini"], [22, "scoring-with-gemini"]], "Clustering models": [[0, "clustering-models"]], "Dense models": [[0, "dense-models"]], "Nonparametric models": [[0, "nonparametric-models"]], "Sparse models": [[0, "sparse-models"]], "Tree models": [[0, "tree-models"]], "Constraints": [[0, "constraints"]], "Dataset generation": [[0, "dataset-generation"]], "Feature selection": [[1, "feature-selection"], [7, "feature-selection"]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[2, "feature-selection-using-the-sparse-mmd-ovo-logistic-regression"]], "Load a simple synthetic dataset": [[2, "load-a-simple-synthetic-dataset"], [3, "load-a-simple-synthetic-dataset"], [4, "load-a-simple-synthetic-dataset"], [5, "load-a-simple-synthetic-dataset"], [20, "load-a-simple-synthetic-dataset"]], "Train the model": [[2, "train-the-model"], [3, "train-the-model"], [4, "train-the-model"], [5, "train-the-model"], [13, "train-the-model"], [16, "train-the-model"], [18, "train-the-model"], [19, "train-the-model"], [20, "train-the-model"]], "Path results": [[2, "path-results"], [4, "path-results"], [5, "path-results"]], "Final Clustering": [[2, "final-clustering"], [3, "final-clustering"], [4, "final-clustering"], [13, "final-clustering"], [14, "final-clustering"], [16, "final-clustering"], [18, "final-clustering"], [19, "final-clustering"], [20, "final-clustering"]], "Feature selection using the Sparse Linear MI (Logistic regression)": [[3, "feature-selection-using-the-sparse-linear-mi-logistic-regression"]], "Feature selection using the Sparse MMD OvA (MLP)": [[4, "feature-selection-using-the-sparse-mmd-ova-mlp"]], "Grouped Feature selection with a linear model": [[5, "grouped-feature-selection-with-a-linear-model"]], "Computation times": [[6, "computation-times"], [10, "computation-times"], [23, "computation-times"], [24, "computation-times"], [28, "computation-times"], [63, "computation-times"]], "General examples": [[7, "general-examples"]], "Discriminative clustering": [[7, "discriminative-clustering"]], "Consensus clustering": [[7, "consensus-clustering"], [8, "consensus-clustering"]], "Trees": [[7, "trees"], [25, "trees"]], "Consensus clustering with linking constraints on sample pairs": [[9, "consensus-clustering-with-linking-constraints-on-sample-pairs"]], "Load the dataset": [[9, "load-the-dataset"], [26, "load-the-dataset"], [27, "load-the-dataset"]], "Multiple model clustering": [[9, "multiple-model-clustering"]], "Build the consensus matrix": [[9, "build-the-consensus-matrix"]], "Create the consensus clustering model": [[9, "create-the-consensus-clustering-model"]], "Optimise the results with linking constraints": [[9, "optimise-the-results-with-linking-constraints"]], "Add must-link / cannot-link constraint": [[9, "add-must-link-cannot-link-constraint"]], "Plotting the consensus matrix": [[9, "plotting-the-consensus-matrix"]], "Comparative clustering of circles dataset with kernel change": [[11, "comparative-clustering-of-circles-dataset-with-kernel-change"], [17, "comparative-clustering-of-circles-dataset-with-kernel-change"]], "Draw samples for the circle dataset": [[11, "draw-samples-for-the-circle-dataset"], [17, "draw-samples-for-the-circle-dataset"]], "Training clustering models": [[11, "training-clustering-models"]], "Display predictions and decision boundaries": [[11, "display-predictions-and-decision-boundaries"]], "Extending GemClus to build your own discriminative clustering model": [[12, "extending-gemclus-to-build-your-own-discriminative-clustering-model"]], "Create the custom model": [[12, "create-the-custom-model"]], "Test the fitting procedure and plot the clustering results": [[12, "test-the-fitting-procedure-and-plot-the-clustering-results"]], "Graph node clustering with a nonparametric model": [[13, "graph-node-clustering-with-a-nonparametric-model"]], "Draw samples from a GMM": [[13, "draw-samples-from-a-gmm"], [19, "draw-samples-from-a-gmm"]], "Create the graph edges": [[13, "create-the-graph-edges"]], "Pre-compute a specific metric between samples": [[13, "pre-compute-a-specific-metric-between-samples"], [18, "pre-compute-a-specific-metric-between-samples"]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[14, "example-of-decision-boundary-map-for-a-mixture-of-gaussian-and-low-degree-student-distributions"]], "Generate the data": [[14, "generate-the-data"]], "Train the model for clustering": [[14, "train-the-model-for-clustering"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[15, "an-introducing-example-to-clustering-with-an-mlp-and-the-mmd-gemini"]], "Generate data": [[15, "generate-data"]], "Create the MLP clustering model and fit it": [[15, "create-the-mlp-clustering-model-and-fit-it"]], "Plot the final clustering": [[15, "plot-the-final-clustering"]], "Kernel KMeans clustering with GEMINI": [[16, "kernel-kmeans-clustering-with-gemini"]], "Draw samples from a circular dataset": [[16, "draw-samples-from-a-circular-dataset"]], "Training clustering model": [[17, "training-clustering-model"]], "Show predictions on similar samples": [[17, "show-predictions-on-similar-samples"]], "Drawing a decision boundary between two interlacing moons": [[18, "drawing-a-decision-boundary-between-two-interlacing-moons"]], "Generate two interlacing moons": [[18, "generate-two-interlacing-moons"]], "Non parametric clustering": [[19, "non-parametric-clustering"]], "Simple logistic regression with RIM": [[20, "simple-logistic-regression-with-rim"]], "Scoring any model with GEMINI": [[22, "scoring-any-model-with-gemini"]], "Load a simple real dataset": [[22, "load-a-simple-real-dataset"]], "Train two supervised models": [[22, "train-two-supervised-models"]], "Supervised Scoring with GEMINI": [[22, "supervised-scoring-with-gemini"]], "Building a differentiable unsupervised tree: DOUGLAS": [[26, "building-a-differentiable-unsupervised-tree-douglas"]], "Create the douglas tree and fit it": [[26, "create-the-douglas-tree-and-fit-it"]], "Building an unsupervised tree with kernel-kmeans objective: KAURI": [[27, "building-an-unsupervised-tree-with-kernel-kmeans-objective-kauri"]], "Create a first tree using a linear kernel": [[27, "create-a-first-tree-using-a-linear-kernel"]], "Create a second tree using an additive chi2 kernel": [[27, "create-a-second-tree-using-an-additive-chi2-kernel"]], "Evaluate the performances of the model": [[27, "evaluate-the-performances-of-the-model"]], "Visualise the tree structure": [[27, "visualise-the-tree-structure"]], "gemclus.add_mlcl_constraint": [[29, "gemclus-add-mlcl-constraint"]], "gemclus.data.celeux_one": [[30, "gemclus-data-celeux-one"]], "gemclus.data.celeux_two": [[31, "gemclus-data-celeux-two"]], "gemclus.data.draw_gmm": [[32, "gemclus-data-draw-gmm"]], "gemclus.data.gstm": [[33, "gemclus-data-gstm"]], "gemclus.data.multivariate_student_t": [[34, "gemclus-data-multivariate-student-t"]], "gemclus.gemini.HellingerGEMINI": [[35, "gemclus-gemini-hellingergemini"]], "gemclus.gemini.KLGEMINI": [[36, "gemclus-gemini-klgemini"]], "gemclus.gemini.MI": [[37, "gemclus-gemini-mi"]], "gemclus.gemini.MMDGEMINI": [[38, "gemclus-gemini-mmdgemini"]], "gemclus.gemini.TVGEMINI": [[39, "gemclus-gemini-tvgemini"]], "gemclus.gemini.WassersteinGEMINI": [[40, "gemclus-gemini-wassersteingemini"]], "gemclus.linear.KernelRIM": [[41, "gemclus-linear-kernelrim"]], "gemclus.linear.LinearMMD": [[42, "gemclus-linear-linearmmd"]], "gemclus.linear.LinearModel": [[43, "gemclus-linear-linearmodel"]], "gemclus.linear.LinearWasserstein": [[44, "gemclus-linear-linearwasserstein"]], "gemclus.linear.RIM": [[45, "gemclus-linear-rim"]], "gemclus.mlp.MLPMMD": [[46, "gemclus-mlp-mlpmmd"]], "gemclus.mlp.MLPModel": [[47, "gemclus-mlp-mlpmodel"]], "gemclus.mlp.MLPWasserstein": [[48, "gemclus-mlp-mlpwasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[49, "gemclus-nonparametric-categoricalmmd"]], "gemclus.nonparametric.CategoricalModel": [[50, "gemclus-nonparametric-categoricalmodel"]], "gemclus.nonparametric.CategoricalWasserstein": [[51, "gemclus-nonparametric-categoricalwasserstein"]], "gemclus.sparse.SparseLinearMI": [[52, "gemclus-sparse-sparselinearmi"]], "gemclus.sparse.SparseLinearMMD": [[53, "gemclus-sparse-sparselinearmmd"]], "gemclus.sparse.SparseLinearModel": [[54, "gemclus-sparse-sparselinearmodel"]], "gemclus.sparse.SparseMLPMMD": [[55, "gemclus-sparse-sparsemlpmmd"]], "gemclus.sparse.SparseMLPModel": [[56, "gemclus-sparse-sparsemlpmodel"]], "gemclus.tree.Douglas": [[57, "gemclus-tree-douglas"]], "gemclus.tree.Kauri": [[58, "gemclus-tree-kauri"]], "gemclus.tree.print_kauri_tree": [[59, "gemclus-tree-print-kauri-tree"]], "RELEASES": [[60, "releases"]], "History of changes": [[60, "history-of-changes"]], "In development": [[60, "in-development"]], "0.2.0 (Latest)": [[60, "latest"]], "0.1.1": [[60, "id1"]], "0.1.0": [[60, "id2"]], "0.0.2": [[60, "id3"]], "Welcome to GemClus documentation!": [[61, "welcome-to-gemclus-documentation"]], "Contents": [[61, "contents"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[61, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "Installation": [[61, "installation"]], "Official package": [[61, "official-package"]], "Latest version": [[61, "latest-version"]], "Reference": [[61, "reference"]], "Acknowledgements": [[61, "acknowledgements"]], "Quick start on gemclus": [[62, "quick-start-on-gemclus"]], "What is GEMINI": [[62, "what-is-gemini"]], "Doing discriminative clustering": [[62, "doing-discriminative-clustering"]], "Selecting features in clustering": [[62, "selecting-features-in-clustering"]], "References": [[62, "references"]], "User Guide": [[64, "user-guide"]], "Content of the package": [[64, "content-of-the-package"]], "Which GEMINIs are implemented": [[64, "which-geminis-are-implemented"]], "What discriminative distributions are available": [[64, "what-discriminative-distributions-are-available"]], "Basic examples": [[64, "basic-examples"]]}, "indexentries": {"add_mlcl_constraint() (in module gemclus)": [[29, "gemclus.add_mlcl_constraint"]], "celeux_one() (in module gemclus.data)": [[30, "gemclus.data.celeux_one"]], "celeux_two() (in module gemclus.data)": [[31, "gemclus.data.celeux_two"]], "draw_gmm() (in module gemclus.data)": [[32, "gemclus.data.draw_gmm"]], "gstm() (in module gemclus.data)": [[33, "gemclus.data.gstm"]], "multivariate_student_t() (in module gemclus.data)": [[34, "gemclus.data.multivariate_student_t"]], "hellingergemini (class in gemclus.gemini)": [[35, "gemclus.gemini.HellingerGEMINI"]], "__init__() (gemclus.gemini.hellingergemini method)": [[35, "gemclus.gemini.HellingerGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.hellingergemini method)": [[35, "gemclus.gemini.HellingerGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.hellingergemini method)": [[35, "gemclus.gemini.HellingerGEMINI.evaluate"]], "klgemini (class in gemclus.gemini)": [[36, "gemclus.gemini.KLGEMINI"]], "__init__() (gemclus.gemini.klgemini method)": [[36, "gemclus.gemini.KLGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.klgemini method)": [[36, "gemclus.gemini.KLGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.klgemini method)": [[36, "gemclus.gemini.KLGEMINI.evaluate"]], "mi (class in gemclus.gemini)": [[37, "gemclus.gemini.MI"]], "__init__() (gemclus.gemini.mi method)": [[37, "gemclus.gemini.MI.__init__"]], "compute_affinity() (gemclus.gemini.mi method)": [[37, "gemclus.gemini.MI.compute_affinity"]], "evaluate() (gemclus.gemini.mi method)": [[37, "gemclus.gemini.MI.evaluate"]], "mmdgemini (class in gemclus.gemini)": [[38, "gemclus.gemini.MMDGEMINI"]], "__init__() (gemclus.gemini.mmdgemini method)": [[38, "gemclus.gemini.MMDGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.mmdgemini method)": [[38, "gemclus.gemini.MMDGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.mmdgemini method)": [[38, "gemclus.gemini.MMDGEMINI.evaluate"]], "tvgemini (class in gemclus.gemini)": [[39, "gemclus.gemini.TVGEMINI"]], "__init__() (gemclus.gemini.tvgemini method)": [[39, "gemclus.gemini.TVGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.tvgemini method)": [[39, "gemclus.gemini.TVGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.tvgemini method)": [[39, "gemclus.gemini.TVGEMINI.evaluate"]], "wassersteingemini (class in gemclus.gemini)": [[40, "gemclus.gemini.WassersteinGEMINI"]], "__init__() (gemclus.gemini.wassersteingemini method)": [[40, "gemclus.gemini.WassersteinGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.wassersteingemini method)": [[40, "gemclus.gemini.WassersteinGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteingemini method)": [[40, "gemclus.gemini.WassersteinGEMINI.evaluate"]], "kernelrim (class in gemclus.linear)": [[41, "gemclus.linear.KernelRIM"]], "__init__() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.__init__"]], "fit() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.fit"]], "fit_predict() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.fit_predict"]], "get_gemini() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.get_gemini"]], "get_metadata_routing() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.get_metadata_routing"]], "get_params() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.get_params"]], "predict() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.predict"]], "predict_proba() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.predict_proba"]], "score() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.score"]], "set_params() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.set_params"]], "linearmmd (class in gemclus.linear)": [[42, "gemclus.linear.LinearMMD"]], "__init__() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.__init__"]], "fit() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.fit"]], "fit_predict() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.fit_predict"]], "get_gemini() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.get_gemini"]], "get_metadata_routing() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.get_metadata_routing"]], "get_params() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.get_params"]], "predict() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.predict"]], "predict_proba() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.predict_proba"]], "score() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.score"]], "set_params() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.set_params"]], "linearmodel (class in gemclus.linear)": [[43, "gemclus.linear.LinearModel"]], "__init__() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.__init__"]], "fit() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.fit"]], "fit_predict() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.fit_predict"]], "get_gemini() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.get_gemini"]], "get_metadata_routing() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.get_metadata_routing"]], "get_params() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.get_params"]], "predict() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.predict"]], "predict_proba() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.predict_proba"]], "score() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.score"]], "set_params() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.set_params"]], "linearwasserstein (class in gemclus.linear)": [[44, "gemclus.linear.LinearWasserstein"]], "__init__() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.__init__"]], "fit() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.fit"]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.fit_predict"]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.get_gemini"]], "get_metadata_routing() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.get_metadata_routing"]], "get_params() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.get_params"]], "predict() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.predict"]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.predict_proba"]], "score() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.score"]], "set_params() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.set_params"]], "rim (class in gemclus.linear)": [[45, "gemclus.linear.RIM"]], "__init__() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.__init__"]], "fit() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.fit"]], "fit_predict() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.fit_predict"]], "get_gemini() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.get_gemini"]], "get_metadata_routing() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.get_metadata_routing"]], "get_params() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.get_params"]], "predict() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.predict"]], "predict_proba() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.predict_proba"]], "score() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.score"]], "set_params() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.set_params"]], "mlpmmd (class in gemclus.mlp)": [[46, "gemclus.mlp.MLPMMD"]], "__init__() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.__init__"]], "fit() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.fit"]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.get_gemini"]], "get_metadata_routing() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.get_metadata_routing"]], "get_params() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.get_params"]], "predict() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.predict"]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.predict_proba"]], "score() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.score"]], "set_params() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.set_params"]], "mlpmodel (class in gemclus.mlp)": [[47, "gemclus.mlp.MLPModel"]], "__init__() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.__init__"]], "fit() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.fit"]], "fit_predict() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.get_gemini"]], "get_metadata_routing() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.get_metadata_routing"]], "get_params() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.get_params"]], "predict() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.predict"]], "predict_proba() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.predict_proba"]], "score() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.score"]], "set_params() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.set_params"]], "mlpwasserstein (class in gemclus.mlp)": [[48, "gemclus.mlp.MLPWasserstein"]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.__init__"]], "fit() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.fit"]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.fit_predict"]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.get_gemini"]], "get_metadata_routing() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.get_metadata_routing"]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.get_params"]], "predict() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.predict"]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.predict_proba"]], "score() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.score"]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.set_params"]], "categoricalmmd (class in gemclus.nonparametric)": [[49, "gemclus.nonparametric.CategoricalMMD"]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.__init__"]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.get_gemini"]], "get_metadata_routing() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.get_metadata_routing"]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.get_params"]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.predict_proba"]], "score() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.score"]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.set_params"]], "categoricalmodel (class in gemclus.nonparametric)": [[50, "gemclus.nonparametric.CategoricalModel"]], "__init__() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.__init__"]], "fit() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.get_gemini"]], "get_metadata_routing() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.get_metadata_routing"]], "get_params() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.get_params"]], "predict() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.predict_proba"]], "score() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.score"]], "set_params() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.set_params"]], "categoricalwasserstein (class in gemclus.nonparametric)": [[51, "gemclus.nonparametric.CategoricalWasserstein"]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.__init__"]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.fit"]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.get_gemini"]], "get_metadata_routing() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.get_metadata_routing"]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.get_params"]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.predict"]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.predict_proba"]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.score"]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.set_params"]], "sparselinearmi (class in gemclus.sparse)": [[52, "gemclus.sparse.SparseLinearMI"]], "__init__() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.__init__"]], "fit() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.fit"]], "fit_predict() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.get_gemini"]], "get_metadata_routing() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.get_metadata_routing"]], "get_params() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.get_params"]], "get_selection() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.get_selection"]], "path() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.path"]], "predict() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.predict"]], "predict_proba() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.predict_proba"]], "score() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.score"]], "set_params() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.set_params"]], "sparselinearmmd (class in gemclus.sparse)": [[53, "gemclus.sparse.SparseLinearMMD"]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.__init__"]], "fit() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.fit"]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.get_gemini"]], "get_metadata_routing() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.get_metadata_routing"]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.get_params"]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.get_selection"]], "path() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.path"]], "predict() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.predict"]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.predict_proba"]], "score() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.score"]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.set_params"]], "sparselinearmodel (class in gemclus.sparse)": [[54, "gemclus.sparse.SparseLinearModel"]], "__init__() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.__init__"]], "fit() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.fit"]], "fit_predict() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.get_gemini"]], "get_metadata_routing() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.get_metadata_routing"]], "get_params() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.get_params"]], "get_selection() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.get_selection"]], "path() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.path"]], "predict() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.predict"]], "predict_proba() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.predict_proba"]], "score() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.score"]], "set_params() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.set_params"]], "sparsemlpmmd (class in gemclus.sparse)": [[55, "gemclus.sparse.SparseMLPMMD"]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.__init__"]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.get_gemini"]], "get_metadata_routing() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.get_metadata_routing"]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.get_selection"]], "path() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.path"]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.predict_proba"]], "score() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.score"]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.set_params"]], "sparsemlpmodel (class in gemclus.sparse)": [[56, "gemclus.sparse.SparseMLPModel"]], "__init__() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.__init__"]], "fit() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.get_gemini"]], "get_metadata_routing() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.get_metadata_routing"]], "get_params() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.get_selection"]], "path() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.path"]], "predict() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.predict_proba"]], "score() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.score"]], "set_params() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.set_params"]], "douglas (class in gemclus.tree)": [[57, "gemclus.tree.Douglas"]], "__init__() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.__init__"]], "find_active_points() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.find_active_points"]], "fit() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.fit"]], "fit_predict() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.fit_predict"]], "get_gemini() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.get_gemini"]], "get_metadata_routing() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.get_metadata_routing"]], "get_params() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.get_params"]], "predict() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.predict"]], "predict_proba() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.predict_proba"]], "score() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.score"]], "set_params() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.set_params"]], "kauri (class in gemclus.tree)": [[58, "gemclus.tree.Kauri"]], "__init__() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.__init__"]], "fit() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.fit"]], "fit_predict() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.fit_predict"]], "get_metadata_routing() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.get_metadata_routing"]], "get_params() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.get_params"]], "predict() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.predict"]], "score() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.score"]], "set_params() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.set_params"]], "print_kauri_tree() (in module gemclus.tree)": [[59, "gemclus.tree.print_kauri_tree"]]}})