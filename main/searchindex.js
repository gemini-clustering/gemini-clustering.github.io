Search.setIndex({"alltitles": {"0.0.2": [[59, "id4"]], "0.1.0": [[59, "id3"]], "0.1.1": [[59, "id2"]], "0.2.0": [[59, "id1"]], "1.0.0 (Latest)": [[59, "latest"]], "A summary of what is implemented": [[63, "a-summary-of-what-is-implemented"]], "About the package": [[60, "about-the-package"]], "Acknowledgements": [[60, "acknowledgements"]], "Add must-link / cannot-link constraint": [[18, "add-must-link-cannot-link-constraint"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[5, null]], "Basic examples": [[63, "basic-examples"]], "Build the consensus matrix": [[18, "build-the-consensus-matrix"]], "Building a differentiable unsupervised tree: DOUGLAS": [[23, null]], "Building an unsupervised tree with kernel-kmeans objective: KAURI": [[24, null]], "Choosing a model": [[63, "choosing-a-model"]], "Clustering circles with kernel RIM": [[7, null]], "Clustering models": [[0, "clustering-models"]], "Comparative clustering of circles dataset with kernel change": [[1, null]], "Computation times": [[11, null], [16, null], [19, null], [21, null], [22, null], [25, null], [62, null]], "Consensus clustering": [[17, "consensus-clustering"]], "Consensus clustering with linking constraints on sample pairs": [[18, null]], "Constraints": [[0, "constraints"]], "Content of the package": [[63, "content-of-the-package"]], "Contents": [[60, "contents"]], "Contributing": [[60, "contributing"]], "Create a first tree using a linear kernel": [[24, "create-a-first-tree-using-a-linear-kernel"]], "Create a second tree using an additive chi2 kernel": [[24, "create-a-second-tree-using-an-additive-chi2-kernel"]], "Create the MLP clustering model and fit it": [[5, "create-the-mlp-clustering-model-and-fit-it"]], "Create the consensus clustering model": [[18, "create-the-consensus-clustering-model"]], "Create the custom model": [[2, "create-the-custom-model"]], "Create the douglas tree and fit it": [[23, "create-the-douglas-tree-and-fit-it"]], "Create the graph edges": [[3, "create-the-graph-edges"]], "Dataset": [[63, "id33"]], "Dataset generation": [[0, "dataset-generation"]], "Definition": [[63, "definition"]], "Dense models": [[0, "dense-models"]], "Discriminative clustering": [[63, "discriminative-clustering"]], "Display predictions and decision boundaries": [[1, "display-predictions-and-decision-boundaries"]], "Draw samples for the circle dataset": [[1, "draw-samples-for-the-circle-dataset"], [7, "draw-samples-for-the-circle-dataset"]], "Draw samples from a GMM": [[3, "draw-samples-from-a-gmm"], [9, "draw-samples-from-a-gmm"]], "Draw samples from a circular dataset": [[6, "draw-samples-from-a-circular-dataset"]], "Drawing a decision boundary between two interlacing moons": [[8, null]], "Evaluate the performances of the model": [[24, "evaluate-the-performances-of-the-model"]], "Example gallery": [[17, null]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[4, null]], "Examples using gemclus.DiscriminativeModel": [[26, "examples-using-gemclus-discriminativemodel"]], "Examples using gemclus.add_mlcl_constraint": [[27, "examples-using-gemclus-add-mlcl-constraint"]], "Examples using gemclus.data.celeux_one": [[28, "examples-using-gemclus-data-celeux-one"]], "Examples using gemclus.data.draw_gmm": [[30, "examples-using-gemclus-data-draw-gmm"]], "Examples using gemclus.data.gstm": [[31, "examples-using-gemclus-data-gstm"]], "Examples using gemclus.gemini.WassersteinGEMINI": [[39, "examples-using-gemclus-gemini-wassersteingemini"]], "Examples using gemclus.linear.KernelRIM": [[40, "examples-using-gemclus-linear-kernelrim"]], "Examples using gemclus.linear.LinearMMD": [[41, "examples-using-gemclus-linear-linearmmd"]], "Examples using gemclus.linear.LinearModel": [[42, "examples-using-gemclus-linear-linearmodel"]], "Examples using gemclus.linear.LinearWasserstein": [[43, "examples-using-gemclus-linear-linearwasserstein"]], "Examples using gemclus.linear.RIM": [[44, "examples-using-gemclus-linear-rim"]], "Examples using gemclus.mlp.MLPMMD": [[45, "examples-using-gemclus-mlp-mlpmmd"]], "Examples using gemclus.mlp.MLPModel": [[46, "examples-using-gemclus-mlp-mlpmodel"]], "Examples using gemclus.mlp.MLPWasserstein": [[47, "examples-using-gemclus-mlp-mlpwasserstein"]], "Examples using gemclus.nonparametric.CategoricalMMD": [[48, "examples-using-gemclus-nonparametric-categoricalmmd"]], "Examples using gemclus.nonparametric.CategoricalModel": [[49, "examples-using-gemclus-nonparametric-categoricalmodel"]], "Examples using gemclus.nonparametric.CategoricalWasserstein": [[50, "examples-using-gemclus-nonparametric-categoricalwasserstein"]], "Examples using gemclus.sparse.SparseLinearMI": [[51, "examples-using-gemclus-sparse-sparselinearmi"]], "Examples using gemclus.sparse.SparseLinearMMD": [[52, "examples-using-gemclus-sparse-sparselinearmmd"]], "Examples using gemclus.sparse.SparseLinearModel": [[53, "examples-using-gemclus-sparse-sparselinearmodel"]], "Examples using gemclus.sparse.SparseMLPMMD": [[54, "examples-using-gemclus-sparse-sparsemlpmmd"]], "Examples using gemclus.sparse.SparseMLPModel": [[55, "examples-using-gemclus-sparse-sparsemlpmodel"]], "Examples using gemclus.tree.Douglas": [[56, "examples-using-gemclus-tree-douglas"]], "Examples using gemclus.tree.Kauri": [[57, "examples-using-gemclus-tree-kauri"]], "Examples using gemclus.tree.print_kauri_tree": [[58, "examples-using-gemclus-tree-print-kauri-tree"]], "Extending / Regularising models": [[63, "extending-regularising-models"]], "Extending GemClus to build your own discriminative clustering model": [[2, null]], "Feature selection": [[17, "feature-selection"]], "Feature selection using the Sparse Linear MI (Logistic regression)": [[13, null]], "Feature selection using the Sparse MMD OvA (MLP)": [[14, null]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[12, null]], "Final Clustering": [[3, "final-clustering"], [4, "final-clustering"], [6, "final-clustering"], [8, "final-clustering"], [9, "final-clustering"], [10, "final-clustering"], [12, "final-clustering"], [13, "final-clustering"], [14, "final-clustering"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[60, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "GemClus API": [[0, null]], "General examples": [[17, "general-examples"]], "Generate data": [[5, "generate-data"]], "Generate the data": [[4, "generate-the-data"]], "Generate two interlacing moons": [[8, "generate-two-interlacing-moons"]], "Generic models": [[0, "generic-models"]], "Graph node clustering with a nonparametric model": [[3, null]], "Grouped Feature selection with a linear model": [[15, null]], "History of changes": [[59, "history-of-changes"]], "In development (1.1.0)": [[59, "in-development-1-1-0"]], "Installation": [[60, "installation"]], "Kernel KMeans clustering with GEMINI": [[6, null]], "Latest version": [[60, "latest-version"]], "Load a simple real dataset": [[20, "load-a-simple-real-dataset"]], "Load a simple synthetic dataset": [[10, "load-a-simple-synthetic-dataset"], [12, "load-a-simple-synthetic-dataset"], [13, "load-a-simple-synthetic-dataset"], [14, "load-a-simple-synthetic-dataset"], [15, "load-a-simple-synthetic-dataset"]], "Load the dataset": [[18, "load-the-dataset"], [23, "load-the-dataset"], [24, "load-the-dataset"]], "Models": [[63, "id31"]], "Multiple model clustering": [[18, "multiple-model-clustering"]], "Non parametric clustering": [[9, null]], "Nonparametric models": [[0, "nonparametric-models"]], "Objective functions": [[63, "id32"]], "Official package": [[60, "official-package"]], "Optimise the results with linking constraints": [[18, "optimise-the-results-with-linking-constraints"]], "Path results": [[12, "path-results"], [14, "path-results"], [15, "path-results"]], "Plot the final clustering": [[5, "plot-the-final-clustering"]], "Plotting the consensus matrix": [[18, "plotting-the-consensus-matrix"]], "Pre-compute a specific metric between samples": [[3, "pre-compute-a-specific-metric-between-samples"], [8, "pre-compute-a-specific-metric-between-samples"]], "Quick start on GemClus": [[61, null]], "RELEASES": [[59, null]], "References": [[60, "references"], [63, "references"]], "Related paper": [[60, "related-paper"]], "Scope of GemClus": [[60, "scope-of-gemclus"]], "Scoring any model with GEMINI": [[20, null]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [17, "scoring-with-gemini"], [20, "scoring-with-gemini"]], "Show predictions on similar samples": [[7, "show-predictions-on-similar-samples"]], "Simple logistic regression with RIM": [[10, null]], "Sparse models": [[0, "sparse-models"]], "Supervised Scoring with GEMINI": [[20, "supervised-scoring-with-gemini"]], "Test the fitting procedure and plot the clustering results": [[2, "test-the-fitting-procedure-and-plot-the-clustering-results"]], "The GEMINI approach": [[63, "the-gemini-approach"]], "Train the model": [[3, "train-the-model"], [6, "train-the-model"], [8, "train-the-model"], [9, "train-the-model"], [10, "train-the-model"], [12, "train-the-model"], [13, "train-the-model"], [14, "train-the-model"], [15, "train-the-model"]], "Train the model for clustering": [[4, "train-the-model-for-clustering"]], "Train two supervised models": [[20, "train-two-supervised-models"]], "Training clustering model": [[7, "training-clustering-model"]], "Training clustering models": [[1, "training-clustering-models"]], "Tree models": [[0, "tree-models"]], "Trees": [[17, "trees"]], "User Guide": [[63, null]], "Visualise the tree structure": [[24, "visualise-the-tree-structure"]], "Welcome to GemClus documentation!": [[60, null]], "What discriminative distributions are available": [[63, "what-discriminative-distributions-are-available"]], "What is GemClus?": [[60, "what-is-gemclus"]], "Which GEMINIs are implemented": [[63, "which-geminis-are-implemented"]], "Why GemClus?": [[60, "why-gemclus"]], "gemclus.DiscriminativeModel": [[26, null]], "gemclus.add_mlcl_constraint": [[27, null]], "gemclus.data.celeux_one": [[28, null]], "gemclus.data.celeux_two": [[29, null]], "gemclus.data.draw_gmm": [[30, null]], "gemclus.data.gstm": [[31, null]], "gemclus.data.multivariate_student_t": [[32, null]], "gemclus.gemini.ChiSquareGEMINI": [[33, null]], "gemclus.gemini.HellingerGEMINI": [[34, null]], "gemclus.gemini.KLGEMINI": [[35, null]], "gemclus.gemini.MI": [[36, null]], "gemclus.gemini.MMDGEMINI": [[37, null]], "gemclus.gemini.TVGEMINI": [[38, null]], "gemclus.gemini.WassersteinGEMINI": [[39, null]], "gemclus.linear.KernelRIM": [[40, null]], "gemclus.linear.LinearMMD": [[41, null]], "gemclus.linear.LinearModel": [[42, null]], "gemclus.linear.LinearWasserstein": [[43, null]], "gemclus.linear.RIM": [[44, null]], "gemclus.mlp.MLPMMD": [[45, null]], "gemclus.mlp.MLPModel": [[46, null]], "gemclus.mlp.MLPWasserstein": [[47, null]], "gemclus.nonparametric.CategoricalMMD": [[48, null]], "gemclus.nonparametric.CategoricalModel": [[49, null]], "gemclus.nonparametric.CategoricalWasserstein": [[50, null]], "gemclus.sparse.SparseLinearMI": [[51, null]], "gemclus.sparse.SparseLinearMMD": [[52, null]], "gemclus.sparse.SparseLinearModel": [[53, null]], "gemclus.sparse.SparseMLPMMD": [[54, null]], "gemclus.sparse.SparseMLPModel": [[55, null]], "gemclus.tree.Douglas": [[56, null]], "gemclus.tree.Kauri": [[57, null]], "gemclus.tree.print_kauri_tree": [[58, null]]}, "docnames": ["api", "auto_examples/_general/plot_circles", "auto_examples/_general/plot_custom_model", "auto_examples/_general/plot_graph_node_clustering", "auto_examples/_general/plot_gstm", "auto_examples/_general/plot_intro_mlp_mmd", "auto_examples/_general/plot_kernel_kmeans", "auto_examples/_general/plot_kernel_rim", "auto_examples/_general/plot_moon_clustering", "auto_examples/_general/plot_nonparametric_clustering", "auto_examples/_general/plot_rim", "auto_examples/_general/sg_execution_times", "auto_examples/feature_selection/plot_feature_selection_linear", "auto_examples/feature_selection/plot_feature_selection_logreg_mi", "auto_examples/feature_selection/plot_feature_selection_mlp", "auto_examples/feature_selection/plot_grouped_selection", "auto_examples/feature_selection/sg_execution_times", "auto_examples/index", "auto_examples/mlcl/plot_semi_supervised_consensus", "auto_examples/mlcl/sg_execution_times", "auto_examples/scoring/plot_gemini_scoring", "auto_examples/scoring/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/trees/plot_douglas_example", "auto_examples/trees/plot_kauri_example", "auto_examples/trees/sg_execution_times", "generated/gemclus.DiscriminativeModel", "generated/gemclus.add_mlcl_constraint", "generated/gemclus.data.celeux_one", "generated/gemclus.data.celeux_two", "generated/gemclus.data.draw_gmm", "generated/gemclus.data.gstm", "generated/gemclus.data.multivariate_student_t", "generated/gemclus.gemini.ChiSquareGEMINI", "generated/gemclus.gemini.HellingerGEMINI", "generated/gemclus.gemini.KLGEMINI", "generated/gemclus.gemini.MI", "generated/gemclus.gemini.MMDGEMINI", "generated/gemclus.gemini.TVGEMINI", "generated/gemclus.gemini.WassersteinGEMINI", "generated/gemclus.linear.KernelRIM", "generated/gemclus.linear.LinearMMD", "generated/gemclus.linear.LinearModel", "generated/gemclus.linear.LinearWasserstein", "generated/gemclus.linear.RIM", "generated/gemclus.mlp.MLPMMD", "generated/gemclus.mlp.MLPModel", "generated/gemclus.mlp.MLPWasserstein", "generated/gemclus.nonparametric.CategoricalMMD", "generated/gemclus.nonparametric.CategoricalModel", "generated/gemclus.nonparametric.CategoricalWasserstein", "generated/gemclus.sparse.SparseLinearMI", "generated/gemclus.sparse.SparseLinearMMD", "generated/gemclus.sparse.SparseLinearModel", "generated/gemclus.sparse.SparseMLPMMD", "generated/gemclus.sparse.SparseMLPModel", "generated/gemclus.tree.Douglas", "generated/gemclus.tree.Kauri", "generated/gemclus.tree.print_kauri_tree", "history", "index", "quick_start", "sg_execution_times", "user_guide"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["api.rst", "auto_examples/_general/plot_circles.rst", "auto_examples/_general/plot_custom_model.rst", "auto_examples/_general/plot_graph_node_clustering.rst", "auto_examples/_general/plot_gstm.rst", "auto_examples/_general/plot_intro_mlp_mmd.rst", "auto_examples/_general/plot_kernel_kmeans.rst", "auto_examples/_general/plot_kernel_rim.rst", "auto_examples/_general/plot_moon_clustering.rst", "auto_examples/_general/plot_nonparametric_clustering.rst", "auto_examples/_general/plot_rim.rst", "auto_examples/_general/sg_execution_times.rst", "auto_examples/feature_selection/plot_feature_selection_linear.rst", "auto_examples/feature_selection/plot_feature_selection_logreg_mi.rst", "auto_examples/feature_selection/plot_feature_selection_mlp.rst", "auto_examples/feature_selection/plot_grouped_selection.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/mlcl/plot_semi_supervised_consensus.rst", "auto_examples/mlcl/sg_execution_times.rst", "auto_examples/scoring/plot_gemini_scoring.rst", "auto_examples/scoring/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/trees/plot_douglas_example.rst", "auto_examples/trees/plot_kauri_example.rst", "auto_examples/trees/sg_execution_times.rst", "generated/gemclus.DiscriminativeModel.rst", "generated/gemclus.add_mlcl_constraint.rst", "generated/gemclus.data.celeux_one.rst", "generated/gemclus.data.celeux_two.rst", "generated/gemclus.data.draw_gmm.rst", "generated/gemclus.data.gstm.rst", "generated/gemclus.data.multivariate_student_t.rst", "generated/gemclus.gemini.ChiSquareGEMINI.rst", "generated/gemclus.gemini.HellingerGEMINI.rst", "generated/gemclus.gemini.KLGEMINI.rst", "generated/gemclus.gemini.MI.rst", "generated/gemclus.gemini.MMDGEMINI.rst", "generated/gemclus.gemini.TVGEMINI.rst", "generated/gemclus.gemini.WassersteinGEMINI.rst", "generated/gemclus.linear.KernelRIM.rst", "generated/gemclus.linear.LinearMMD.rst", "generated/gemclus.linear.LinearModel.rst", "generated/gemclus.linear.LinearWasserstein.rst", "generated/gemclus.linear.RIM.rst", "generated/gemclus.mlp.MLPMMD.rst", "generated/gemclus.mlp.MLPModel.rst", "generated/gemclus.mlp.MLPWasserstein.rst", "generated/gemclus.nonparametric.CategoricalMMD.rst", "generated/gemclus.nonparametric.CategoricalModel.rst", "generated/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/gemclus.sparse.SparseLinearMI.rst", "generated/gemclus.sparse.SparseLinearMMD.rst", "generated/gemclus.sparse.SparseLinearModel.rst", "generated/gemclus.sparse.SparseMLPMMD.rst", "generated/gemclus.sparse.SparseMLPModel.rst", "generated/gemclus.tree.Douglas.rst", "generated/gemclus.tree.Kauri.rst", "generated/gemclus.tree.print_kauri_tree.rst", "history.rst", "index.rst", "quick_start.rst", "sg_execution_times.rst", "user_guide.rst"], "indexentries": {"__init__() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.__init__", false]], "__init__() (gemclus.gemini.chisquaregemini method)": [[33, "gemclus.gemini.ChiSquareGEMINI.__init__", false]], "__init__() (gemclus.gemini.hellingergemini method)": [[34, "gemclus.gemini.HellingerGEMINI.__init__", false]], "__init__() (gemclus.gemini.klgemini method)": [[35, "gemclus.gemini.KLGEMINI.__init__", false]], "__init__() (gemclus.gemini.mi method)": [[36, "gemclus.gemini.MI.__init__", false]], "__init__() (gemclus.gemini.mmdgemini method)": [[37, "gemclus.gemini.MMDGEMINI.__init__", false]], "__init__() (gemclus.gemini.tvgemini method)": [[38, "gemclus.gemini.TVGEMINI.__init__", false]], "__init__() (gemclus.gemini.wassersteingemini method)": [[39, "gemclus.gemini.WassersteinGEMINI.__init__", false]], "__init__() (gemclus.linear.kernelrim method)": [[40, "gemclus.linear.KernelRIM.__init__", false]], "__init__() (gemclus.linear.linearmmd method)": [[41, "gemclus.linear.LinearMMD.__init__", false]], "__init__() (gemclus.linear.linearmodel method)": [[42, "gemclus.linear.LinearModel.__init__", false]], "__init__() (gemclus.linear.linearwasserstein method)": [[43, "gemclus.linear.LinearWasserstein.__init__", false]], "__init__() (gemclus.linear.rim method)": [[44, "gemclus.linear.RIM.__init__", false]], "__init__() (gemclus.mlp.mlpmmd method)": [[45, "gemclus.mlp.MLPMMD.__init__", false]], "__init__() (gemclus.mlp.mlpmodel method)": [[46, "gemclus.mlp.MLPModel.__init__", false]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[47, "gemclus.mlp.MLPWasserstein.__init__", false]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[48, "gemclus.nonparametric.CategoricalMMD.__init__", false]], "__init__() (gemclus.nonparametric.categoricalmodel method)": [[49, "gemclus.nonparametric.CategoricalModel.__init__", false]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[50, "gemclus.nonparametric.CategoricalWasserstein.__init__", false]], "__init__() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.__init__", false]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.__init__", false]], "__init__() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.__init__", false]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.__init__", false]], "__init__() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.__init__", false]], "__init__() (gemclus.tree.douglas method)": [[56, "gemclus.tree.Douglas.__init__", false]], "__init__() (gemclus.tree.kauri method)": [[57, "gemclus.tree.Kauri.__init__", false]], "add_mlcl_constraint() (in module gemclus)": [[27, "gemclus.add_mlcl_constraint", false]], "categoricalmmd (class in gemclus.nonparametric)": [[48, "gemclus.nonparametric.CategoricalMMD", false]], "categoricalmodel (class in gemclus.nonparametric)": [[49, "gemclus.nonparametric.CategoricalModel", false]], "categoricalwasserstein (class in gemclus.nonparametric)": [[50, "gemclus.nonparametric.CategoricalWasserstein", false]], "celeux_one() (in module gemclus.data)": [[28, "gemclus.data.celeux_one", false]], "celeux_two() (in module gemclus.data)": [[29, "gemclus.data.celeux_two", false]], "chisquaregemini (class in gemclus.gemini)": [[33, "gemclus.gemini.ChiSquareGEMINI", false]], "compute_affinity() (gemclus.gemini.chisquaregemini method)": [[33, "gemclus.gemini.ChiSquareGEMINI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.hellingergemini method)": [[34, "gemclus.gemini.HellingerGEMINI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.klgemini method)": [[35, "gemclus.gemini.KLGEMINI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.mi method)": [[36, "gemclus.gemini.MI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.mmdgemini method)": [[37, "gemclus.gemini.MMDGEMINI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.tvgemini method)": [[38, "gemclus.gemini.TVGEMINI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.wassersteingemini method)": [[39, "gemclus.gemini.WassersteinGEMINI.compute_affinity", false]], "discriminativemodel (class in gemclus)": [[26, "gemclus.DiscriminativeModel", false]], "douglas (class in gemclus.tree)": [[56, "gemclus.tree.Douglas", false]], "draw_gmm() (in module gemclus.data)": [[30, "gemclus.data.draw_gmm", false]], "evaluate() (gemclus.gemini.chisquaregemini method)": [[33, "gemclus.gemini.ChiSquareGEMINI.evaluate", false]], "evaluate() (gemclus.gemini.hellingergemini method)": [[34, "gemclus.gemini.HellingerGEMINI.evaluate", false]], "evaluate() (gemclus.gemini.klgemini method)": [[35, "gemclus.gemini.KLGEMINI.evaluate", false]], "evaluate() (gemclus.gemini.mi method)": [[36, "gemclus.gemini.MI.evaluate", false]], "evaluate() (gemclus.gemini.mmdgemini method)": [[37, "gemclus.gemini.MMDGEMINI.evaluate", false]], "evaluate() (gemclus.gemini.tvgemini method)": [[38, "gemclus.gemini.TVGEMINI.evaluate", false]], "evaluate() (gemclus.gemini.wassersteingemini method)": [[39, "gemclus.gemini.WassersteinGEMINI.evaluate", false]], "find_active_points() (gemclus.tree.douglas method)": [[56, "gemclus.tree.Douglas.find_active_points", false]], "fit() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.fit", false]], "fit() (gemclus.linear.kernelrim method)": [[40, "gemclus.linear.KernelRIM.fit", false]], "fit() (gemclus.linear.linearmmd method)": [[41, "gemclus.linear.LinearMMD.fit", false]], "fit() (gemclus.linear.linearmodel method)": [[42, "gemclus.linear.LinearModel.fit", false]], "fit() (gemclus.linear.linearwasserstein method)": [[43, "gemclus.linear.LinearWasserstein.fit", false]], "fit() (gemclus.linear.rim method)": [[44, "gemclus.linear.RIM.fit", false]], "fit() (gemclus.mlp.mlpmmd method)": [[45, "gemclus.mlp.MLPMMD.fit", false]], "fit() (gemclus.mlp.mlpmodel method)": [[46, "gemclus.mlp.MLPModel.fit", false]], "fit() (gemclus.mlp.mlpwasserstein method)": [[47, "gemclus.mlp.MLPWasserstein.fit", false]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[48, "gemclus.nonparametric.CategoricalMMD.fit", false]], "fit() (gemclus.nonparametric.categoricalmodel method)": [[49, "gemclus.nonparametric.CategoricalModel.fit", false]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[50, "gemclus.nonparametric.CategoricalWasserstein.fit", false]], "fit() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.fit", false]], "fit() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.fit", false]], "fit() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.fit", false]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.fit", false]], "fit() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.fit", false]], "fit() (gemclus.tree.douglas method)": [[56, "gemclus.tree.Douglas.fit", false]], "fit() (gemclus.tree.kauri method)": [[57, "gemclus.tree.Kauri.fit", false]], "fit_predict() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.fit_predict", false]], "fit_predict() (gemclus.linear.kernelrim method)": [[40, "gemclus.linear.KernelRIM.fit_predict", false]], "fit_predict() (gemclus.linear.linearmmd method)": [[41, "gemclus.linear.LinearMMD.fit_predict", false]], "fit_predict() (gemclus.linear.linearmodel method)": [[42, "gemclus.linear.LinearModel.fit_predict", false]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[43, "gemclus.linear.LinearWasserstein.fit_predict", false]], "fit_predict() (gemclus.linear.rim method)": [[44, "gemclus.linear.RIM.fit_predict", false]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[45, "gemclus.mlp.MLPMMD.fit_predict", false]], "fit_predict() (gemclus.mlp.mlpmodel method)": [[46, "gemclus.mlp.MLPModel.fit_predict", false]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[47, "gemclus.mlp.MLPWasserstein.fit_predict", false]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[48, "gemclus.nonparametric.CategoricalMMD.fit_predict", false]], "fit_predict() (gemclus.nonparametric.categoricalmodel method)": [[49, "gemclus.nonparametric.CategoricalModel.fit_predict", false]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[50, "gemclus.nonparametric.CategoricalWasserstein.fit_predict", false]], "fit_predict() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.fit_predict", false]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.fit_predict", false]], "fit_predict() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.fit_predict", false]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.fit_predict", false]], "fit_predict() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.fit_predict", false]], "fit_predict() (gemclus.tree.douglas method)": [[56, "gemclus.tree.Douglas.fit_predict", false]], "fit_predict() (gemclus.tree.kauri method)": [[57, "gemclus.tree.Kauri.fit_predict", false]], "get_gemini() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.get_gemini", false]], "get_gemini() (gemclus.linear.kernelrim method)": [[40, "gemclus.linear.KernelRIM.get_gemini", false]], "get_gemini() (gemclus.linear.linearmmd method)": [[41, "gemclus.linear.LinearMMD.get_gemini", false]], "get_gemini() (gemclus.linear.linearmodel method)": [[42, "gemclus.linear.LinearModel.get_gemini", false]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[43, "gemclus.linear.LinearWasserstein.get_gemini", false]], "get_gemini() (gemclus.linear.rim method)": [[44, "gemclus.linear.RIM.get_gemini", false]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[45, "gemclus.mlp.MLPMMD.get_gemini", false]], "get_gemini() (gemclus.mlp.mlpmodel method)": [[46, "gemclus.mlp.MLPModel.get_gemini", false]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[47, "gemclus.mlp.MLPWasserstein.get_gemini", false]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[48, "gemclus.nonparametric.CategoricalMMD.get_gemini", false]], "get_gemini() (gemclus.nonparametric.categoricalmodel method)": [[49, "gemclus.nonparametric.CategoricalModel.get_gemini", false]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[50, "gemclus.nonparametric.CategoricalWasserstein.get_gemini", false]], "get_gemini() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.get_gemini", false]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.get_gemini", false]], "get_gemini() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.get_gemini", false]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.get_gemini", false]], "get_gemini() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.get_gemini", false]], "get_gemini() (gemclus.tree.douglas method)": [[56, "gemclus.tree.Douglas.get_gemini", false]], "get_metadata_routing() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.linear.kernelrim method)": [[40, "gemclus.linear.KernelRIM.get_metadata_routing", false]], "get_metadata_routing() (gemclus.linear.linearmmd method)": [[41, "gemclus.linear.LinearMMD.get_metadata_routing", false]], "get_metadata_routing() (gemclus.linear.linearmodel method)": [[42, "gemclus.linear.LinearModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.linear.linearwasserstein method)": [[43, "gemclus.linear.LinearWasserstein.get_metadata_routing", false]], "get_metadata_routing() (gemclus.linear.rim method)": [[44, "gemclus.linear.RIM.get_metadata_routing", false]], "get_metadata_routing() (gemclus.mlp.mlpmmd method)": [[45, "gemclus.mlp.MLPMMD.get_metadata_routing", false]], "get_metadata_routing() (gemclus.mlp.mlpmodel method)": [[46, "gemclus.mlp.MLPModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.mlp.mlpwasserstein method)": [[47, "gemclus.mlp.MLPWasserstein.get_metadata_routing", false]], "get_metadata_routing() (gemclus.nonparametric.categoricalmmd method)": [[48, "gemclus.nonparametric.CategoricalMMD.get_metadata_routing", false]], "get_metadata_routing() (gemclus.nonparametric.categoricalmodel method)": [[49, "gemclus.nonparametric.CategoricalModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.nonparametric.categoricalwasserstein method)": [[50, "gemclus.nonparametric.CategoricalWasserstein.get_metadata_routing", false]], "get_metadata_routing() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.get_metadata_routing", false]], "get_metadata_routing() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.get_metadata_routing", false]], "get_metadata_routing() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.get_metadata_routing", false]], "get_metadata_routing() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.tree.douglas method)": [[56, "gemclus.tree.Douglas.get_metadata_routing", false]], "get_metadata_routing() (gemclus.tree.kauri method)": [[57, "gemclus.tree.Kauri.get_metadata_routing", false]], "get_params() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.get_params", false]], "get_params() (gemclus.linear.kernelrim method)": [[40, "gemclus.linear.KernelRIM.get_params", false]], "get_params() (gemclus.linear.linearmmd method)": [[41, "gemclus.linear.LinearMMD.get_params", false]], "get_params() (gemclus.linear.linearmodel method)": [[42, "gemclus.linear.LinearModel.get_params", false]], "get_params() (gemclus.linear.linearwasserstein method)": [[43, "gemclus.linear.LinearWasserstein.get_params", false]], "get_params() (gemclus.linear.rim method)": [[44, "gemclus.linear.RIM.get_params", false]], "get_params() (gemclus.mlp.mlpmmd method)": [[45, "gemclus.mlp.MLPMMD.get_params", false]], "get_params() (gemclus.mlp.mlpmodel method)": [[46, "gemclus.mlp.MLPModel.get_params", false]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[47, "gemclus.mlp.MLPWasserstein.get_params", false]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[48, "gemclus.nonparametric.CategoricalMMD.get_params", false]], "get_params() (gemclus.nonparametric.categoricalmodel method)": [[49, "gemclus.nonparametric.CategoricalModel.get_params", false]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[50, "gemclus.nonparametric.CategoricalWasserstein.get_params", false]], "get_params() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.get_params", false]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.get_params", false]], "get_params() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.get_params", false]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.get_params", false]], "get_params() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.get_params", false]], "get_params() (gemclus.tree.douglas method)": [[56, "gemclus.tree.Douglas.get_params", false]], "get_params() (gemclus.tree.kauri method)": [[57, "gemclus.tree.Kauri.get_params", false]], "get_selection() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.get_selection", false]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.get_selection", false]], "get_selection() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.get_selection", false]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.get_selection", false]], "get_selection() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.get_selection", false]], "gstm() (in module gemclus.data)": [[31, "gemclus.data.gstm", false]], "hellingergemini (class in gemclus.gemini)": [[34, "gemclus.gemini.HellingerGEMINI", false]], "kauri (class in gemclus.tree)": [[57, "gemclus.tree.Kauri", false]], "kernelrim (class in gemclus.linear)": [[40, "gemclus.linear.KernelRIM", false]], "klgemini (class in gemclus.gemini)": [[35, "gemclus.gemini.KLGEMINI", false]], "linearmmd (class in gemclus.linear)": [[41, "gemclus.linear.LinearMMD", false]], "linearmodel (class in gemclus.linear)": [[42, "gemclus.linear.LinearModel", false]], "linearwasserstein (class in gemclus.linear)": [[43, "gemclus.linear.LinearWasserstein", false]], "mi (class in gemclus.gemini)": [[36, "gemclus.gemini.MI", false]], "mlpmmd (class in gemclus.mlp)": [[45, "gemclus.mlp.MLPMMD", false]], "mlpmodel (class in gemclus.mlp)": [[46, "gemclus.mlp.MLPModel", false]], "mlpwasserstein (class in gemclus.mlp)": [[47, "gemclus.mlp.MLPWasserstein", false]], "mmdgemini (class in gemclus.gemini)": [[37, "gemclus.gemini.MMDGEMINI", false]], "multivariate_student_t() (in module gemclus.data)": [[32, "gemclus.data.multivariate_student_t", false]], "path() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.path", false]], "path() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.path", false]], "path() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.path", false]], "path() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.path", false]], "path() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.path", false]], "predict() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.predict", false]], "predict() (gemclus.linear.kernelrim method)": [[40, "gemclus.linear.KernelRIM.predict", false]], "predict() (gemclus.linear.linearmmd method)": [[41, "gemclus.linear.LinearMMD.predict", false]], "predict() (gemclus.linear.linearmodel method)": [[42, "gemclus.linear.LinearModel.predict", false]], "predict() (gemclus.linear.linearwasserstein method)": [[43, "gemclus.linear.LinearWasserstein.predict", false]], "predict() (gemclus.linear.rim method)": [[44, "gemclus.linear.RIM.predict", false]], "predict() (gemclus.mlp.mlpmmd method)": [[45, "gemclus.mlp.MLPMMD.predict", false]], "predict() (gemclus.mlp.mlpmodel method)": [[46, "gemclus.mlp.MLPModel.predict", false]], "predict() (gemclus.mlp.mlpwasserstein method)": [[47, "gemclus.mlp.MLPWasserstein.predict", false]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[48, "gemclus.nonparametric.CategoricalMMD.predict", false]], "predict() (gemclus.nonparametric.categoricalmodel method)": [[49, "gemclus.nonparametric.CategoricalModel.predict", false]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[50, "gemclus.nonparametric.CategoricalWasserstein.predict", false]], "predict() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.predict", false]], "predict() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.predict", false]], "predict() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.predict", false]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.predict", false]], "predict() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.predict", false]], "predict() (gemclus.tree.douglas method)": [[56, "gemclus.tree.Douglas.predict", false]], "predict() (gemclus.tree.kauri method)": [[57, "gemclus.tree.Kauri.predict", false]], "predict_proba() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.predict_proba", false]], "predict_proba() (gemclus.linear.kernelrim method)": [[40, "gemclus.linear.KernelRIM.predict_proba", false]], "predict_proba() (gemclus.linear.linearmmd method)": [[41, "gemclus.linear.LinearMMD.predict_proba", false]], "predict_proba() (gemclus.linear.linearmodel method)": [[42, "gemclus.linear.LinearModel.predict_proba", false]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[43, "gemclus.linear.LinearWasserstein.predict_proba", false]], "predict_proba() (gemclus.linear.rim method)": [[44, "gemclus.linear.RIM.predict_proba", false]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[45, "gemclus.mlp.MLPMMD.predict_proba", false]], "predict_proba() (gemclus.mlp.mlpmodel method)": [[46, "gemclus.mlp.MLPModel.predict_proba", false]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[47, "gemclus.mlp.MLPWasserstein.predict_proba", false]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[48, "gemclus.nonparametric.CategoricalMMD.predict_proba", false]], "predict_proba() (gemclus.nonparametric.categoricalmodel method)": [[49, "gemclus.nonparametric.CategoricalModel.predict_proba", false]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[50, "gemclus.nonparametric.CategoricalWasserstein.predict_proba", false]], "predict_proba() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.predict_proba", false]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.predict_proba", false]], "predict_proba() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.predict_proba", false]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.predict_proba", false]], "predict_proba() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.predict_proba", false]], "predict_proba() (gemclus.tree.douglas method)": [[56, "gemclus.tree.Douglas.predict_proba", false]], "print_kauri_tree() (in module gemclus.tree)": [[58, "gemclus.tree.print_kauri_tree", false]], "rim (class in gemclus.linear)": [[44, "gemclus.linear.RIM", false]], "score() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.score", false]], "score() (gemclus.linear.kernelrim method)": [[40, "gemclus.linear.KernelRIM.score", false]], "score() (gemclus.linear.linearmmd method)": [[41, "gemclus.linear.LinearMMD.score", false]], "score() (gemclus.linear.linearmodel method)": [[42, "gemclus.linear.LinearModel.score", false]], "score() (gemclus.linear.linearwasserstein method)": [[43, "gemclus.linear.LinearWasserstein.score", false]], "score() (gemclus.linear.rim method)": [[44, "gemclus.linear.RIM.score", false]], "score() (gemclus.mlp.mlpmmd method)": [[45, "gemclus.mlp.MLPMMD.score", false]], "score() (gemclus.mlp.mlpmodel method)": [[46, "gemclus.mlp.MLPModel.score", false]], "score() (gemclus.mlp.mlpwasserstein method)": [[47, "gemclus.mlp.MLPWasserstein.score", false]], "score() (gemclus.nonparametric.categoricalmmd method)": [[48, "gemclus.nonparametric.CategoricalMMD.score", false]], "score() (gemclus.nonparametric.categoricalmodel method)": [[49, "gemclus.nonparametric.CategoricalModel.score", false]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[50, "gemclus.nonparametric.CategoricalWasserstein.score", false]], "score() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.score", false]], "score() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.score", false]], "score() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.score", false]], "score() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.score", false]], "score() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.score", false]], "score() (gemclus.tree.douglas method)": [[56, "gemclus.tree.Douglas.score", false]], "score() (gemclus.tree.kauri method)": [[57, "gemclus.tree.Kauri.score", false]], "set_params() (gemclus.discriminativemodel method)": [[26, "gemclus.DiscriminativeModel.set_params", false]], "set_params() (gemclus.linear.kernelrim method)": [[40, "gemclus.linear.KernelRIM.set_params", false]], "set_params() (gemclus.linear.linearmmd method)": [[41, "gemclus.linear.LinearMMD.set_params", false]], "set_params() (gemclus.linear.linearmodel method)": [[42, "gemclus.linear.LinearModel.set_params", false]], "set_params() (gemclus.linear.linearwasserstein method)": [[43, "gemclus.linear.LinearWasserstein.set_params", false]], "set_params() (gemclus.linear.rim method)": [[44, "gemclus.linear.RIM.set_params", false]], "set_params() (gemclus.mlp.mlpmmd method)": [[45, "gemclus.mlp.MLPMMD.set_params", false]], "set_params() (gemclus.mlp.mlpmodel method)": [[46, "gemclus.mlp.MLPModel.set_params", false]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[47, "gemclus.mlp.MLPWasserstein.set_params", false]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[48, "gemclus.nonparametric.CategoricalMMD.set_params", false]], "set_params() (gemclus.nonparametric.categoricalmodel method)": [[49, "gemclus.nonparametric.CategoricalModel.set_params", false]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[50, "gemclus.nonparametric.CategoricalWasserstein.set_params", false]], "set_params() (gemclus.sparse.sparselinearmi method)": [[51, "gemclus.sparse.SparseLinearMI.set_params", false]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[52, "gemclus.sparse.SparseLinearMMD.set_params", false]], "set_params() (gemclus.sparse.sparselinearmodel method)": [[53, "gemclus.sparse.SparseLinearModel.set_params", false]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[54, "gemclus.sparse.SparseMLPMMD.set_params", false]], "set_params() (gemclus.sparse.sparsemlpmodel method)": [[55, "gemclus.sparse.SparseMLPModel.set_params", false]], "set_params() (gemclus.tree.douglas method)": [[56, "gemclus.tree.Douglas.set_params", false]], "set_params() (gemclus.tree.kauri method)": [[57, "gemclus.tree.Kauri.set_params", false]], "sparselinearmi (class in gemclus.sparse)": [[51, "gemclus.sparse.SparseLinearMI", false]], "sparselinearmmd (class in gemclus.sparse)": [[52, "gemclus.sparse.SparseLinearMMD", false]], "sparselinearmodel (class in gemclus.sparse)": [[53, "gemclus.sparse.SparseLinearModel", false]], "sparsemlpmmd (class in gemclus.sparse)": [[54, "gemclus.sparse.SparseMLPMMD", false]], "sparsemlpmodel (class in gemclus.sparse)": [[55, "gemclus.sparse.SparseMLPModel", false]], "tvgemini (class in gemclus.gemini)": [[38, "gemclus.gemini.TVGEMINI", false]], "wassersteingemini (class in gemclus.gemini)": [[39, "gemclus.gemini.WassersteinGEMINI", false]]}, "objects": {"gemclus": [[26, 0, 1, "", "DiscriminativeModel"], [27, 2, 1, "", "add_mlcl_constraint"]], "gemclus.DiscriminativeModel": [[26, 1, 1, "", "__init__"], [26, 1, 1, "", "fit"], [26, 1, 1, "", "fit_predict"], [26, 1, 1, "", "get_gemini"], [26, 1, 1, "", "get_metadata_routing"], [26, 1, 1, "", "get_params"], [26, 1, 1, "", "predict"], [26, 1, 1, "", "predict_proba"], [26, 1, 1, "", "score"], [26, 1, 1, "", "set_params"]], "gemclus.data": [[28, 2, 1, "", "celeux_one"], [29, 2, 1, "", "celeux_two"], [30, 2, 1, "", "draw_gmm"], [31, 2, 1, "", "gstm"], [32, 2, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[33, 0, 1, "", "ChiSquareGEMINI"], [34, 0, 1, "", "HellingerGEMINI"], [35, 0, 1, "", "KLGEMINI"], [36, 0, 1, "", "MI"], [37, 0, 1, "", "MMDGEMINI"], [38, 0, 1, "", "TVGEMINI"], [39, 0, 1, "", "WassersteinGEMINI"]], "gemclus.gemini.ChiSquareGEMINI": [[33, 1, 1, "", "__init__"], [33, 1, 1, "", "compute_affinity"], [33, 1, 1, "", "evaluate"]], "gemclus.gemini.HellingerGEMINI": [[34, 1, 1, "", "__init__"], [34, 1, 1, "", "compute_affinity"], [34, 1, 1, "", "evaluate"]], "gemclus.gemini.KLGEMINI": [[35, 1, 1, "", "__init__"], [35, 1, 1, "", "compute_affinity"], [35, 1, 1, "", "evaluate"]], "gemclus.gemini.MI": [[36, 1, 1, "", "__init__"], [36, 1, 1, "", "compute_affinity"], [36, 1, 1, "", "evaluate"]], "gemclus.gemini.MMDGEMINI": [[37, 1, 1, "", "__init__"], [37, 1, 1, "", "compute_affinity"], [37, 1, 1, "", "evaluate"]], "gemclus.gemini.TVGEMINI": [[38, 1, 1, "", "__init__"], [38, 1, 1, "", "compute_affinity"], [38, 1, 1, "", "evaluate"]], "gemclus.gemini.WassersteinGEMINI": [[39, 1, 1, "", "__init__"], [39, 1, 1, "", "compute_affinity"], [39, 1, 1, "", "evaluate"]], "gemclus.linear": [[40, 0, 1, "", "KernelRIM"], [41, 0, 1, "", "LinearMMD"], [42, 0, 1, "", "LinearModel"], [43, 0, 1, "", "LinearWasserstein"], [44, 0, 1, "", "RIM"]], "gemclus.linear.KernelRIM": [[40, 1, 1, "", "__init__"], [40, 1, 1, "", "fit"], [40, 1, 1, "", "fit_predict"], [40, 1, 1, "", "get_gemini"], [40, 1, 1, "", "get_metadata_routing"], [40, 1, 1, "", "get_params"], [40, 1, 1, "", "predict"], [40, 1, 1, "", "predict_proba"], [40, 1, 1, "", "score"], [40, 1, 1, "", "set_params"]], "gemclus.linear.LinearMMD": [[41, 1, 1, "", "__init__"], [41, 1, 1, "", "fit"], [41, 1, 1, "", "fit_predict"], [41, 1, 1, "", "get_gemini"], [41, 1, 1, "", "get_metadata_routing"], [41, 1, 1, "", "get_params"], [41, 1, 1, "", "predict"], [41, 1, 1, "", "predict_proba"], [41, 1, 1, "", "score"], [41, 1, 1, "", "set_params"]], "gemclus.linear.LinearModel": [[42, 1, 1, "", "__init__"], [42, 1, 1, "", "fit"], [42, 1, 1, "", "fit_predict"], [42, 1, 1, "", "get_gemini"], [42, 1, 1, "", "get_metadata_routing"], [42, 1, 1, "", "get_params"], [42, 1, 1, "", "predict"], [42, 1, 1, "", "predict_proba"], [42, 1, 1, "", "score"], [42, 1, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[43, 1, 1, "", "__init__"], [43, 1, 1, "", "fit"], [43, 1, 1, "", "fit_predict"], [43, 1, 1, "", "get_gemini"], [43, 1, 1, "", "get_metadata_routing"], [43, 1, 1, "", "get_params"], [43, 1, 1, "", "predict"], [43, 1, 1, "", "predict_proba"], [43, 1, 1, "", "score"], [43, 1, 1, "", "set_params"]], "gemclus.linear.RIM": [[44, 1, 1, "", "__init__"], [44, 1, 1, "", "fit"], [44, 1, 1, "", "fit_predict"], [44, 1, 1, "", "get_gemini"], [44, 1, 1, "", "get_metadata_routing"], [44, 1, 1, "", "get_params"], [44, 1, 1, "", "predict"], [44, 1, 1, "", "predict_proba"], [44, 1, 1, "", "score"], [44, 1, 1, "", "set_params"]], "gemclus.mlp": [[45, 0, 1, "", "MLPMMD"], [46, 0, 1, "", "MLPModel"], [47, 0, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[45, 1, 1, "", "__init__"], [45, 1, 1, "", "fit"], [45, 1, 1, "", "fit_predict"], [45, 1, 1, "", "get_gemini"], [45, 1, 1, "", "get_metadata_routing"], [45, 1, 1, "", "get_params"], [45, 1, 1, "", "predict"], [45, 1, 1, "", "predict_proba"], [45, 1, 1, "", "score"], [45, 1, 1, "", "set_params"]], "gemclus.mlp.MLPModel": [[46, 1, 1, "", "__init__"], [46, 1, 1, "", "fit"], [46, 1, 1, "", "fit_predict"], [46, 1, 1, "", "get_gemini"], [46, 1, 1, "", "get_metadata_routing"], [46, 1, 1, "", "get_params"], [46, 1, 1, "", "predict"], [46, 1, 1, "", "predict_proba"], [46, 1, 1, "", "score"], [46, 1, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[47, 1, 1, "", "__init__"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_predict"], [47, 1, 1, "", "get_gemini"], [47, 1, 1, "", "get_metadata_routing"], [47, 1, 1, "", "get_params"], [47, 1, 1, "", "predict"], [47, 1, 1, "", "predict_proba"], [47, 1, 1, "", "score"], [47, 1, 1, "", "set_params"]], "gemclus.nonparametric": [[48, 0, 1, "", "CategoricalMMD"], [49, 0, 1, "", "CategoricalModel"], [50, 0, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[48, 1, 1, "", "__init__"], [48, 1, 1, "", "fit"], [48, 1, 1, "", "fit_predict"], [48, 1, 1, "", "get_gemini"], [48, 1, 1, "", "get_metadata_routing"], [48, 1, 1, "", "get_params"], [48, 1, 1, "", "predict"], [48, 1, 1, "", "predict_proba"], [48, 1, 1, "", "score"], [48, 1, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalModel": [[49, 1, 1, "", "__init__"], [49, 1, 1, "", "fit"], [49, 1, 1, "", "fit_predict"], [49, 1, 1, "", "get_gemini"], [49, 1, 1, "", "get_metadata_routing"], [49, 1, 1, "", "get_params"], [49, 1, 1, "", "predict"], [49, 1, 1, "", "predict_proba"], [49, 1, 1, "", "score"], [49, 1, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[50, 1, 1, "", "__init__"], [50, 1, 1, "", "fit"], [50, 1, 1, "", "fit_predict"], [50, 1, 1, "", "get_gemini"], [50, 1, 1, "", "get_metadata_routing"], [50, 1, 1, "", "get_params"], [50, 1, 1, "", "predict"], [50, 1, 1, "", "predict_proba"], [50, 1, 1, "", "score"], [50, 1, 1, "", "set_params"]], "gemclus.sparse": [[51, 0, 1, "", "SparseLinearMI"], [52, 0, 1, "", "SparseLinearMMD"], [53, 0, 1, "", "SparseLinearModel"], [54, 0, 1, "", "SparseMLPMMD"], [55, 0, 1, "", "SparseMLPModel"]], "gemclus.sparse.SparseLinearMI": [[51, 1, 1, "", "__init__"], [51, 1, 1, "", "fit"], [51, 1, 1, "", "fit_predict"], [51, 1, 1, "", "get_gemini"], [51, 1, 1, "", "get_metadata_routing"], [51, 1, 1, "", "get_params"], [51, 1, 1, "", "get_selection"], [51, 1, 1, "", "path"], [51, 1, 1, "", "predict"], [51, 1, 1, "", "predict_proba"], [51, 1, 1, "", "score"], [51, 1, 1, "", "set_params"]], "gemclus.sparse.SparseLinearMMD": [[52, 1, 1, "", "__init__"], [52, 1, 1, "", "fit"], [52, 1, 1, "", "fit_predict"], [52, 1, 1, "", "get_gemini"], [52, 1, 1, "", "get_metadata_routing"], [52, 1, 1, "", "get_params"], [52, 1, 1, "", "get_selection"], [52, 1, 1, "", "path"], [52, 1, 1, "", "predict"], [52, 1, 1, "", "predict_proba"], [52, 1, 1, "", "score"], [52, 1, 1, "", "set_params"]], "gemclus.sparse.SparseLinearModel": [[53, 1, 1, "", "__init__"], [53, 1, 1, "", "fit"], [53, 1, 1, "", "fit_predict"], [53, 1, 1, "", "get_gemini"], [53, 1, 1, "", "get_metadata_routing"], [53, 1, 1, "", "get_params"], [53, 1, 1, "", "get_selection"], [53, 1, 1, "", "path"], [53, 1, 1, "", "predict"], [53, 1, 1, "", "predict_proba"], [53, 1, 1, "", "score"], [53, 1, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[54, 1, 1, "", "__init__"], [54, 1, 1, "", "fit"], [54, 1, 1, "", "fit_predict"], [54, 1, 1, "", "get_gemini"], [54, 1, 1, "", "get_metadata_routing"], [54, 1, 1, "", "get_params"], [54, 1, 1, "", "get_selection"], [54, 1, 1, "", "path"], [54, 1, 1, "", "predict"], [54, 1, 1, "", "predict_proba"], [54, 1, 1, "", "score"], [54, 1, 1, "", "set_params"]], "gemclus.sparse.SparseMLPModel": [[55, 1, 1, "", "__init__"], [55, 1, 1, "", "fit"], [55, 1, 1, "", "fit_predict"], [55, 1, 1, "", "get_gemini"], [55, 1, 1, "", "get_metadata_routing"], [55, 1, 1, "", "get_params"], [55, 1, 1, "", "get_selection"], [55, 1, 1, "", "path"], [55, 1, 1, "", "predict"], [55, 1, 1, "", "predict_proba"], [55, 1, 1, "", "score"], [55, 1, 1, "", "set_params"]], "gemclus.tree": [[56, 0, 1, "", "Douglas"], [57, 0, 1, "", "Kauri"], [58, 2, 1, "", "print_kauri_tree"]], "gemclus.tree.Douglas": [[56, 1, 1, "", "__init__"], [56, 1, 1, "", "find_active_points"], [56, 1, 1, "", "fit"], [56, 1, 1, "", "fit_predict"], [56, 1, 1, "", "get_gemini"], [56, 1, 1, "", "get_metadata_routing"], [56, 1, 1, "", "get_params"], [56, 1, 1, "", "predict"], [56, 1, 1, "", "predict_proba"], [56, 1, 1, "", "score"], [56, 1, 1, "", "set_params"]], "gemclus.tree.Kauri": [[57, 1, 1, "", "__init__"], [57, 1, 1, "", "fit"], [57, 1, 1, "", "fit_predict"], [57, 1, 1, "", "get_metadata_routing"], [57, 1, 1, "", "get_params"], [57, 1, 1, "", "predict"], [57, 1, 1, "", "score"], [57, 1, 1, "", "set_params"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function"}, "terms": {"": [3, 5, 10, 13, 14, 20, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63], "0": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62], "00": [11, 16, 19, 21, 22, 25, 62], "000": [6, 22], "0002": 60, "001": [14, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "005": 20, "01": [11, 15, 16, 25, 51, 52, 53, 54, 55, 56, 62], "013": [24, 25, 62], "02": [16, 62], "024991249149671": 12, "04": [16, 62], "05": [1, 6, 7, 8, 11, 15, 16, 51, 52, 53, 54, 55, 62], "07": [11, 19, 62], "08": [11, 62], "080": [3, 11, 62], "0oy3pia": 60, "1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 23, 24, 27, 28, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63], "10": [4, 10, 11, 14, 18, 32, 51, 52, 53, 54, 55, 62, 63], "100": [2, 3, 9, 15, 18, 23, 56], "1000": [1, 2, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "10728640074310927": 18, "11": [13, 33, 63], "11176053892324672": 18, "11421905413971052": 18, "11914066061963555": 18, "12": [33, 34, 35, 36, 37, 38, 39, 63], "12232": 63, "127": 63, "132": [8, 11, 62], "14": [16, 29], "141": 3, "144": [60, 63], "15": [1, 11, 15, 62], "155": [28, 29, 63], "167022308022": 24, "16976700304809886": 18, "174": [23, 25, 62], "1789": [3, 9], "18": [14, 62], "187": 25, "19": 60, "1991": 63, "1d": 59, "1e": [2, 3, 8, 9, 10, 15, 18, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "2": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 24, 25, 27, 28, 29, 31, 33, 34, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 61, 63], "20": [12, 13, 28, 45, 46, 47, 54, 55], "200": [1, 4, 5, 6, 7, 8, 10, 14], "2000": 29, "2005": [60, 63], "2010": [10, 40, 44, 63], "2011": [33, 63], "2014": [13, 28, 29, 63], "2020": [60, 63], "2021": [54, 55, 63], "2022": [31, 60, 63], "2023": 8, "2024": 63, "2117267518": 48, "22": [24, 63], "22472124150185058": 18, "23": 63, "231": [6, 11, 62], "2402": 63, "25": 14, "276": [9, 11, 62], "28th": [33, 63], "29": 63, "2d": [14, 29], "3": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 28, 29, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 63], "300": [10, 11, 12, 13, 28, 62], "322": [20, 21, 62], "328": 9, "330": 6, "3377": 63, "3390": 63, "34": 63, "35": 63, "3555482569": 50, "367": [7, 11, 62], "378": [4, 11, 62], "3f": [3, 6, 9, 20], "3ia": 60, "4": [1, 3, 4, 9, 12, 13, 14, 15, 16, 24, 29, 63], "403": 20, "4242049318552605": 14, "43": 63, "431": 20, "43532371061057": 24, "4390485754": 44, "4411": 63, "4425": 63, "44865384782317197": 10, "45": 15, "458336976163333": 13, "4596486286280357": 14, "46": 11, "4741506860502334": 23, "48": 14, "4935152433868386": 15, "5": [1, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 18, 24, 28, 51, 52, 53, 54, 55, 63], "50": [1, 3, 4, 5, 8, 10, 13, 14, 15], "500": 31, "513": [14, 16, 62], "533": [12, 16, 62], "5681159420289855": 23, "57": [28, 29, 63], "573": 63, "577": 63, "5812412917": 51, "5824499242836227": 14, "585": [2, 11, 62], "5d": [12, 13], "6": [13, 15, 18, 24, 63], "6325592616": 46, "646750269106263": 15, "647": [5, 11, 62], "65": [33, 63], "6577369504": 49, "663": 11, "667": [1, 11, 62], "7": [3, 8, 12, 13, 15, 18, 24, 28, 63], "7040618744": 52, "7048160115": 41, "71": [28, 29, 63], "7103992986": 43, "7172759168337549": 24, "72": [33, 63], "722492124234704": 12, "723": 16, "7550724287": 42, "7592155845": 45, "7636482655": 47, "7664211836": 54, "790": 62, "8": [4, 15, 59, 63], "80": 15, "8084378363828287": 15, "825972824049516": 12, "832": [13, 16, 62], "83290627605772": 12, "846": [15, 16, 62], "8680377279943841": 24, "878": 20, "894": [18, 19, 62], "9": [12, 14, 51, 52, 53, 54, 55, 63], "90": [12, 13, 14], "9459": 24, "951911": 60, "975": 9, "977": 3, "99": [51, 52, 53, 54, 55], "A": [13, 18, 22, 26, 27, 28, 29, 30, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "And": 2, "As": 2, "By": [20, 63], "For": [2, 51, 52, 53, 54, 55, 61, 63], "If": [26, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63], "In": [2, 3, 5, 10, 12, 13, 14, 15, 31, 33, 60, 61, 63], "It": [2, 26, 27, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 63], "No": 59, "On": [5, 10, 33, 51, 53, 54, 55, 63], "That": 13, "The": [0, 2, 5, 6, 9, 12, 13, 14, 15, 18, 20, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "Then": [1, 18, 63], "There": 3, "These": [0, 60, 61, 63], "To": [2, 3, 8, 26, 42, 46, 49, 53, 56, 61], "_": [33, 34, 35, 36, 37, 38, 39, 63], "__": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "__init__": [2, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "_compute_gemini": 53, "_compute_grad": [2, 63], "_gener": [11, 62], "_get_weight": [2, 63], "_infer": [2, 63], "_init_param": [2, 63], "_tree": 57, "_y_sigmoid": 2, "abcmeta": 59, "abl": [8, 53], "abov": [0, 61], "abraham": [54, 55, 63], "absenc": 63, "accept": [13, 51, 52, 53, 54, 55], "access": 61, "accompanni": 24, "accord": [0, 3, 10, 57], "achiev": 63, "across": [26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "activ": [2, 56, 59, 63], "active_point": 56, "actual": [1, 57], "ad": [59, 63], "adam": [2, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "adamoptim": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "adapt": 53, "add": [2, 14, 27, 63], "add_mlcl_constraint": [18, 59], "addit": [12, 13, 28, 29, 37, 39, 59], "additive_chi2": [24, 37, 40, 41, 45, 48, 52, 54, 57], "additive_chi2_model": 24, "adequ": [1, 3], "adjac": [3, 8], "adjacency_matrix": 3, "adjusted_rand_scor": [3, 6, 7, 9, 12, 13, 18, 23, 24], "adp": 60, "advanc": [31, 60, 63], "advantag": 18, "affin": [20, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "after": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "agarw": 60, "agenc": 60, "agreeanc": 18, "ai4media": 60, "aim": [0, 2, 60], "al": [10, 13, 28, 29, 40, 44, 54, 55, 63], "alekh": 60, "alexandr": [41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "algorithm": [1, 6, 7, 8, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59], "alic": 60, "all": [2, 3, 8, 12, 13, 14, 15, 17, 18, 20, 26, 27, 30, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63], "all_model": 18, "allow": [2, 60], "alon": [51, 52, 53, 54, 55], "along": [8, 12, 14, 63], "alpha": [1, 3, 4, 8, 10, 12, 13, 14, 15, 31, 51, 52, 53, 54, 55], "alpha_multipli": [51, 52, 53, 54, 55], "alreadi": 57, "also": [26, 42, 46, 49, 53, 56, 60, 63], "although": 18, "altogeth": 15, "alwai": 9, "among": [2, 56, 61], "amount": [51, 52, 53, 54, 55], "an": [3, 4, 8, 11, 12, 14, 15, 17, 18, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63], "analysi": 63, "analyt": [33, 63], "andrea": [40, 44], "ani": [0, 17, 21, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63], "anoth": [20, 61, 63], "anr": 60, "apart": [2, 4, 18], "api": [18, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "appli": [2, 27], "appris": 56, "approach": [28, 29, 61], "ar": [0, 2, 3, 4, 8, 9, 10, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 31, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61], "arang": 15, "architectur": [0, 5, 54, 55, 63], "argmax": [10, 15, 18], "argsort": 18, "argument": [3, 37, 39, 40, 41, 43, 45, 47, 48, 50, 52, 54, 57, 59, 61], "ari": [3, 6, 7, 9, 12, 13, 18, 23, 24], "ari_scor": [3, 6, 9], "arnaud": [41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "arrai": [2, 3, 9, 12, 13, 14, 15, 26, 28, 29, 30, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "art": 63, "articl": 31, "arxiv": 63, "ask": [12, 13, 14, 15], "assign": [0, 3, 6, 9, 15, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "associ": [3, 6, 9, 23], "assumpt": 63, "attribut": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "author": 60, "auto_exampl": [11, 16, 19, 21, 22, 25], "auto_examples_jupyt": 17, "auto_examples_python": 17, "avail": [2, 26, 42, 46, 49, 53, 56, 61], "available_gemini": [26, 42, 46, 49, 53, 56, 61], "avoid": [33, 34, 35, 36, 37, 38, 39], "awar": 63, "ax0": [5, 10, 14], "ax1": [5, 10, 14], "ax2": [5, 10, 14], "axi": [1, 2, 6, 8, 12, 13, 14, 15], "azur": 60, "b1_": [45, 46, 47, 54, 55], "b2_": [45, 46, 47, 54, 55], "b_": [40, 41, 42, 43, 44, 51, 52, 53], "b_k": 63, "ba": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "backpropag": 2, "base": [0, 18, 26, 28, 29, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63], "base_kernel": [7, 40], "base_kernel_param": 40, "base_model": 18, "basegemini": 26, "basic": 0, "batch": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "batch_siz": [2, 4, 14, 15, 26, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56], "bay": [20, 63], "becaus": [1, 3, 8, 51, 52, 53, 54, 55, 61, 63], "been": 60, "befor": [51, 52, 53, 54, 55], "behav": 6, "being": 27, "belgrav": 60, "believ": 63, "best": [12, 13, 14, 18, 51, 52, 53, 54, 55, 57], "best_weight": [12, 13, 14, 15, 51, 52, 53, 54, 55], "better": 59, "between": [11, 17, 26, 27, 33, 34, 35, 36, 37, 38, 39, 46, 47, 54, 55, 62, 63], "beyond": [51, 52, 53, 54, 55], "bia": [2, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "bias": [40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55], "bin": [23, 56], "binari": [2, 58], "binaryregress": 2, "binomi": [3, 15], "bit": 61, "blue": [4, 15], "booktitl": 60, "bool": [26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "boolean": 56, "both": [20, 59, 63], "bound": 56, "boundari": [0, 10, 11, 17, 26, 31, 42, 43, 46, 47, 62, 63], "bouveyron": [31, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63], "brain": [13, 51, 63], "breast": 20, "bridg": 60, "bridl": 63, "bring": [51, 53, 54, 55], "build": [11, 17, 25, 26, 30, 56, 57, 58, 62], "c": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 28, 29, 31, 60, 63], "c_": [1, 4, 8, 10], "calcul": [56, 63], "call": [3, 6, 9, 12, 13, 14, 15, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63], "callabl": [37, 39, 40], "can": [0, 1, 2, 6, 7, 9, 13, 18, 20, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63], "canada": 60, "cancer": 20, "cane": 63, "cannot": [0, 1, 9, 27, 59, 61], "cannot_link": [18, 27], "cart": 59, "case": [7, 37, 39, 63], "categor": [15, 48, 49, 50], "categorical___": 27, "categoricalmmd": [6, 9, 49, 50], "categoricalmodel": [48, 50, 59], "categoricalwasserstein": [3, 18, 48, 49], "cd": 60, "celeux": [13, 28, 29, 63], "celeux_on": [12, 13, 18, 63], "celeux_two": 63, "cell": [5, 10], "center": [5, 10, 14], "centr": [1, 7], "certain": [51, 52, 53, 54, 55], "challeng": [1, 7, 18, 63], "chang": [11, 17, 26, 45, 46, 51, 52, 53, 54, 55, 62], "charl": [41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "check": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "chi": [33, 59], "chi2": [37, 40, 41, 45, 48, 52, 54, 57], "chisquaregemini": [59, 63], "cho": 60, "choic": [2, 57, 63], "choos": 57, "chosen": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "circl": [6, 11, 17, 26, 40, 42, 45, 46, 62], "cite": 60, "cityblock": [39, 43, 47, 50], "class": [0, 2, 18, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 63], "class_indic": 13, "classic": [35, 36, 40, 44], "classif": 63, "classifi": 63, "clf": [4, 5, 10, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54], "clf1": 20, "clf1_score": 20, "clf2": 20, "clf2_score": 20, "clip": [33, 34, 35, 36, 37, 38, 39], "clone": 60, "close": [1, 12, 13, 14, 18, 28, 31], "closer": 56, "closest": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "cluster": [11, 15, 19, 20, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62], "cluster_std": [5, 10, 14], "cm": [1, 8, 24], "cmap": [1, 4, 8, 18], "code": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24, 60, 61], "coeffici": [54, 55], "column": 2, "com": 60, "combin": [3, 18, 37, 39, 40, 41, 43, 45, 47, 48, 50, 52, 54, 57, 59], "combinations_with_replac": 18, "come": [61, 63], "common": 2, "commun": 60, "compar": [11, 17, 26, 28, 29, 33, 34, 35, 37, 38, 39, 45, 46, 62, 63], "comparison": 63, "compat": [59, 60, 63], "complet": [36, 60], "complex": 63, "compon": [26, 28, 29, 30, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63], "comput": [1, 2, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63], "compute_affin": [20, 33, 34, 35, 36, 37, 38, 39], "concaten": [2, 14, 15, 28], "condit": [0, 33, 34, 35, 36, 37, 38, 39, 48, 49, 50, 53], "confer": [33, 63], "confid": 18, "connect": [54, 55, 63], "consensu": [19, 26, 27, 28, 41, 42, 49, 50, 62], "consensus_matrix": 18, "consensus_model": 18, "consensus_ord": 18, "consequ": [0, 4, 9, 48, 49, 50], "consid": [15, 26, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57], "consider": 63, "consist": [1, 7, 10, 12, 13, 14, 15, 18, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "constant": 57, "constrain": [15, 18, 59], "constraint": [17, 19, 26, 27, 28, 41, 42, 49, 50, 51, 53, 54, 55, 57, 59, 62, 63], "construct": [0, 23, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "constructor": [61, 63], "contain": [0, 26, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59], "context": [33, 34, 35, 36, 37, 38, 39, 63], "contourf": [1, 4, 8, 10], "contract": 60, "contraint": 27, "contrari": [2, 13], "contrarili": [48, 49, 50], "contribut": 56, "control": [26, 28, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "convent": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "converg": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "correct": [2, 12, 13, 14, 15], "correspond": [1, 37, 39, 40, 41, 43, 45, 47, 48, 50, 52, 54, 57], "cosin": [18, 37, 39, 40, 41, 43, 45, 47, 48, 50, 52, 54, 57], "could": 60, "coupl": [26, 60], "covari": [1, 3, 9, 30], "covariance_typ": 1, "creat": [0, 6, 7, 8, 9, 10, 12, 13, 14, 15, 26, 61], "creation": [28, 29, 30, 31, 32], "crimson": [5, 10, 14], "csgraph": [3, 8], "culotta": 63, "current": [37, 39, 40, 41, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 57], "custom": [3, 26, 37, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 59, 61, 63], "custom_model": 2, "cut": 56, "c\u00f4te": 60, "d": [30, 32, 56, 60, 63], "d_": [33, 63], "dai": [51, 63], "daniel": 60, "darkgreen": [5, 10, 14], "data": [0, 1, 2, 3, 6, 9, 10, 12, 13, 15, 18, 20, 23, 24, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 63], "dataset": [5, 8, 11, 17, 26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 59, 60, 62], "ddof": [1, 6], "de": [28, 29, 63], "decis": [0, 9, 10, 11, 17, 24, 26, 31, 42, 43, 46, 47, 60, 62, 63], "decomposit": 13, "decor": [0, 18, 27], "decoupl": 63, "decreas": [12, 14], "dedic": [59, 60], "deem": [51, 52, 53, 54, 55], "deep": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "deepskyblu": [5, 10, 14], "def": [2, 15], "default": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63], "defin": [2, 8, 37, 39, 61], "definit": [32, 59, 61], "degre": [11, 17, 26, 31, 32, 42, 43, 62], "delta": [39, 56], "deng": [51, 63], "depend": [0, 3, 9, 12, 14, 15, 26, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63], "depth": [24, 57], "deriv": [7, 24, 26, 33, 34, 35, 36, 37, 38, 39, 53, 60, 63], "descent": [6, 12, 13, 14, 15, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "describ": [18, 27, 40, 44, 51, 52, 53, 54, 55, 58], "design": [26, 63], "desir": [0, 8, 61], "determin": [3, 26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "develop": 60, "df": [4, 31, 32], "dict": [26, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "dictionari": [40, 41, 43, 45, 47, 48, 50, 52], "diederik": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "differ": [17, 20, 23, 24, 51, 52, 53, 54, 55, 56, 57, 60, 61, 63], "differenti": [17, 25, 26, 56, 59, 62, 63], "dimens": 28, "dirac": [56, 57], "direct": [3, 8], "directli": [6, 48, 49, 50, 59, 61, 63], "discard": [12, 13, 14, 15], "discrep": 37, "discrimin": [11, 13, 17, 26, 27, 30, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62], "discriminativemodel": [2, 61, 63], "distanc": [3, 8, 20, 33, 34, 35, 36, 37, 38, 39, 43, 47, 50, 59, 61, 63], "distinguish": [13, 61], "distribut": [0, 1, 2, 5, 6, 7, 11, 12, 13, 14, 15, 17, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 53, 55, 56, 57, 59, 60, 62], "diverg": [33, 34, 35, 36, 38, 59, 63], "divis": 59, "dndt": 56, "do": [0, 3, 8, 10, 18, 20, 48, 49, 50, 60, 61, 63], "document": 59, "doe": [48, 49, 50], "done": [4, 6, 59], "dougla": [17, 25, 26, 59, 62], "download": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24, 60], "draw": [4, 11, 17, 26, 28, 29, 30, 31, 32, 46, 47, 62], "draw_gmm": [2, 3, 9, 59], "drawn": [28, 29, 30, 31, 32, 63], "droit": [31, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63], "dummi": 3, "duplic": 2, "dure": [12, 13, 14, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "dynam": [51, 52, 53, 54, 55, 59], "e": [18, 28, 29, 33, 34, 35, 36, 37, 38, 39, 60, 61, 63], "each": [2, 3, 6, 26, 28, 29, 30, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "earli": [51, 52, 53, 54, 55], "early_stopping_factor": [51, 52, 53, 54, 55], "eas": 1, "easili": [61, 63], "ed": 63, "edg": 8, "edge_prob": 3, "editor": 60, "either": [33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 55, 57], "element": 30, "elimin": [12, 13, 14, 15, 54, 55], "ell_2": [10, 27, 40, 44, 63], "emphas": 18, "encapsul": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "encod": [15, 51, 52, 53, 54, 55], "encount": [12, 13, 14], "end": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 59, 61, 63], "enforc": 18, "enhanc": 0, "ensembl": 18, "ensur": [2, 18, 27, 51, 52, 53, 54, 55], "enter": [51, 52, 53, 54, 55], "environ": [5, 10], "epoch": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "epsilon": [33, 34, 35, 36, 37, 38, 39], "equival": [5, 6, 18, 24, 37], "especi": 60, "essenti": 63, "estim": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "et": [10, 13, 28, 29, 40, 44, 54, 55, 63], "etc": 59, "eu": 60, "euclidean": [3, 8, 20, 26, 39, 42, 43, 46, 47, 49, 50, 53, 56, 63], "euclidean_gemini": 1, "evalu": [0, 12, 13, 20, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "even": 60, "exampl": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 59, 60, 61, 62], "excess": 28, "execut": [11, 16, 19, 21, 22, 25, 62], "exist": 57, "exp": [2, 3], "expect": [2, 4, 12, 13], "experi": [4, 8], "experiment": 59, "expert": 18, "explicit": [51, 52, 53, 54, 55], "explor": [56, 57], "extend": [11, 17, 26, 30, 62], "extens": [2, 60, 63], "extern": 59, "extra": 14, "extrapol": 18, "ey": [2, 3, 9, 20], "f": [3, 6, 7, 9, 12, 13, 14, 15, 20, 31, 33, 34, 35, 36, 38, 54, 55, 60, 63], "face": 8, "factor": [1, 6, 7, 27, 51, 52, 53, 54, 55, 57], "fall": 56, "fals": [2, 3, 8, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "fancybox": [5, 10, 14], "far": 4, "featur": [0, 4, 5, 10, 16, 23, 26, 28, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63], "feature_mask": 56, "feature_nam": [24, 58], "feature_select": [16, 62], "few": [23, 51, 52, 53, 54, 55], "ffcr": 60, "field": [18, 60], "figsiz": 14, "figur": 14, "file": [11, 16, 19, 21, 22, 25, 62], "final": [15, 18], "find": [4, 8, 12, 13, 14, 15, 18, 56, 60], "find_active_point": 56, "finish": [2, 63], "first": [2, 12, 13, 20, 45, 46, 47, 54, 55, 63], "fit": [1, 3, 6, 7, 8, 9, 10, 18, 20, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61], "fit_predict": [2, 3, 4, 6, 7, 8, 9, 23, 24, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "fit_transform": [13, 20], "fix": 59, "flag": 2, "float": [26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "floyd_warshal": [3, 8], "follow": [0, 2, 3, 40, 44, 60], "form": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63], "forum": 60, "found": [13, 57, 60], "framework": [2, 40, 44, 61], "franc": 60, "francais": [28, 29, 63], "fran\u00e7a": 63, "freder": [41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "freedom": [4, 31, 32], "french": 60, "from": [1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63], "full": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 59], "fulli": 27, "function": [0, 2, 3, 8, 26, 27, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61], "fund": 60, "further": [0, 61], "fuse": 59, "futur": 60, "g": [28, 29, 61, 63], "gain": [24, 57], "galleri": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 62, 63], "gamma": 61, "gap": 60, "gaussian": [1, 2, 3, 5, 10, 11, 12, 13, 14, 17, 20, 26, 28, 29, 30, 31, 42, 43, 59, 62], "gaussianmixtur": 1, "gaussiannb": 20, "gemclu": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 23, 24, 59, 62, 63], "gemini": [1, 2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 21, 23, 24, 26, 27, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62], "gemini_model": 27, "gemini_scor": [3, 6, 9], "gener": [1, 2, 3, 6, 7, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61], "generalis": [31, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 63], "geometr": [51, 52, 53, 54, 55, 63], "geometri": 63, "get": [12, 13, 14, 15, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63], "get_fram": [5, 10, 14], "get_gemini": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "get_metadata_rout": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "get_param": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "get_select": [14, 15, 51, 52, 53, 54, 55, 59], "git": 60, "github": [5, 10, 60], "give": [0, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "given": [3, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 63], "gm": 1, "gmm": [28, 29, 30, 31], "go": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 60], "goal": 2, "gome": [40, 44, 63], "good": [51, 52, 53, 54, 55], "govern": 60, "grad": 10, "gradient": [2, 6, 12, 13, 14, 15, 26, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "grai": 3, "graph": [8, 9, 11, 17, 26, 30, 49, 50, 59, 62], "greater": [51, 52, 53, 54, 55], "grid": [1, 4], "grid_input": [1, 4, 8, 10], "grid_pr": 10, "group": [14, 16, 17, 26, 42, 51, 52, 53, 54, 55, 59, 62, 63], "group_penalti": [51, 52, 53, 54, 55], "groups_": [51, 52, 53, 54, 55], "grow": 63, "gstm": [4, 59, 63], "guid": [8, 13, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "guidanc": [0, 18], "h": [33, 34, 60, 63], "h_": [45, 46, 47, 54, 55], "ha": [2, 56, 60, 63], "hachiya": [33, 63], "harchaoui": [31, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63], "hartigan": 63, "have": [0, 1, 2, 6, 18, 20, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61], "head": 63, "helling": [34, 63], "hellingergemini": [59, 63], "help": [0, 4, 57, 60, 63], "henc": [57, 63], "here": [1, 2, 3, 4, 5, 7, 17, 18, 20, 24, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 63], "hi": 60, "hidden": [0, 45, 46, 47, 54, 55, 63], "hierarchi": [54, 55], "high": 56, "highlight": [12, 14], "histori": [51, 52, 53, 54, 55], "hope": 63, "horizon": 60, "hot": [15, 51, 52, 53, 54, 55], "how": [5, 9, 10, 12, 14, 15, 17, 18, 20, 23, 24, 26, 28, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63], "howev": [0, 6], "html": [5, 10], "http": 60, "hyper": 0, "hyperparamet": [27, 40, 44, 56], "hypothes": [20, 60, 63], "hypothesi": 63, "i": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61], "i1": 27, "iN": 27, "icml": [33, 63], "id": 60, "idea": 18, "ideal": 57, "ident": 3, "identifi": 63, "ieee": 63, "ignor": [37, 39, 51, 52, 53, 54, 55], "illustr": 9, "implement": [0, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 57, 59, 60], "import": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 61], "improv": [18, 51, 52, 53, 54, 55], "imshow": 18, "in_threshold": 2, "incap": 1, "includ": [60, 63], "incompar": [51, 52, 53, 54, 55], "incompat": [51, 52, 53, 54, 55], "incorpor": [4, 26, 42, 46, 49, 53, 56, 61, 63], "increas": [12, 13, 14, 15, 51, 52, 53, 54, 55, 57], "ind": [51, 52, 53, 54, 55], "independ": [12, 13, 28, 63], "index": 3, "indic": [0, 3, 27, 51, 52, 53, 54, 55, 56], "individu": 63, "inf": [3, 8], "inform": [2, 10, 15, 20, 26, 29, 31, 33, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 63], "inherit": 61, "initi": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63], "initialis": [1, 2, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "inner": 0, "inproceed": 60, "input": [4, 9, 10, 18, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63], "insid": [2, 61], "insight": 60, "inspir": [54, 55, 63], "instabl": [33, 34, 35, 36, 37, 38, 39], "instanc": [26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "instanci": 61, "instead": [3, 4, 13, 20, 52, 53, 54, 55, 59], "instruct": 60, "int": [18, 26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "integ": 56, "integr": 63, "intellig": 63, "intend": [0, 60], "interest": [60, 63], "interlac": [11, 17, 26, 46, 47, 62], "intermedi": 2, "intern": [33, 63], "interpret": [0, 63], "introduc": [11, 17, 26, 45, 46, 59, 62], "introduct": 59, "invest": 60, "involv": [26, 27, 42, 46, 49, 53, 56, 63], "io": 60, "ipynb": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24], "iri": [23, 24], "isinf": [3, 8], "isol": [10, 59], "isotrop": [2, 12, 13, 14, 28], "iter": [12, 13, 14, 15, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "itertool": [3, 18], "its": [6, 18, 56, 59, 63], "j": [3, 18, 63], "j1": 27, "jhonatan": 60, "jimmi": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "jn": 27, "job": 1, "joint": [51, 52, 53, 54, 55, 63], "journal": [28, 29, 63], "jupyt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24], "just": [10, 12, 13, 14, 15], "k": [13, 30, 48, 49, 50, 63], "kappa": 37, "kauri": [17, 25, 58, 59, 62, 63], "kauri_tre": 58, "keep": [12, 13, 14, 63], "keep_threshold": [13, 15, 51, 52, 53, 54, 55], "kei": 18, "kept": [51, 52, 53, 54, 55], "kernel": [5, 11, 13, 17, 18, 25, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 48, 49, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63], "kernel_param": [37, 40, 41, 45, 48, 52, 54, 57, 61], "kernelis": [40, 59], "kernelrim": [7, 59, 63], "keyword": [37, 39, 40, 41, 43, 45, 47, 48, 50, 52], "ki": [48, 49, 50], "kimura": [33, 63], "kingma": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "kl": [35, 36, 63], "klgemini": [36, 59], "kmean": [5, 11, 17, 25, 26, 37, 48, 49, 57, 58, 62, 63], "knowledg": 18, "kong": [13, 51, 63], "kraus": [10, 40, 44, 63], "kullback": 63, "kyunghyun": 60, "l": [28, 29, 31, 54, 55, 60, 63], "l1": [39, 43, 47, 50], "l2": [20, 39, 43, 47, 50], "la": [28, 29, 63], "label": [7, 13, 20, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "labels_": [1, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "lack": 60, "lafferti": 63, "lambda": 18, "langl": 63, "laplacian": [37, 40, 41, 45, 48, 52, 54, 57], "lasso": [13, 14, 51, 52, 53, 54, 55, 63], "lassonet": [54, 55, 63], "latent": 3, "latter": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "layer": [0, 1, 5, 45, 46, 47, 53, 54, 55, 61, 63], "leaf": [56, 57], "learn": [18, 26, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63], "learnabl": 56, "learning_r": [2, 3, 8, 9, 14, 15, 18, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "learnt": [0, 23], "least": 57, "leav": 57, "leclercq": [31, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63], "led": 60, "left": [5, 10, 14, 63], "leg": [5, 10, 14], "legend": [5, 7, 10, 14], "leibler": 63, "lemhadri": [54, 55, 63], "len": [15, 18], "length": [24, 51, 52, 53, 54, 55], "less": [2, 8], "let": [10, 13, 20, 61], "letter": 63, "level": [10, 18], "leverag": 56, "librari": [17, 60], "life": 18, "lighten": 1, "like": [0, 4, 13, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61], "likelihood": 63, "limit": [24, 57], "linalg": [12, 13], "line": 18, "linear": [1, 4, 7, 8, 10, 16, 17, 18, 20, 26, 28, 37, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63], "linear___": 27, "linear_model": [20, 24], "linearli": [29, 63], "linearmmd": [18, 40, 42, 43, 44, 61], "linearmodel": [40, 41, 43, 44, 59, 61], "linearwasserstein": [4, 40, 41, 42, 44], "linewidth": 3, "link": [17, 19, 26, 27, 28, 41, 42, 49, 50, 59, 62], "linspac": [1, 4, 8, 10], "list": [2, 27, 30, 51, 52, 53, 54, 55, 56, 61], "load": 5, "load_breast_canc": 20, "load_iri": [23, 24, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54], "loc": [2, 5, 10, 14, 30, 32], "locat": [0, 31, 63], "logic": 57, "logist": [0, 2, 7, 11, 14, 15, 16, 17, 20, 26, 28, 40, 41, 42, 43, 44, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63], "logisticregress": 20, "logit": [48, 49, 50, 56], "logits_": [48, 49, 50], "longer": 59, "look": [1, 6, 10, 12, 14, 15], "loos": 18, "loss": 63, "loui": [41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "low": [11, 17, 18, 26, 31, 42, 43, 56, 62], "lower": [13, 15], "m": [28, 29, 31, 33, 54, 55, 60, 63], "machin": [33, 63], "mackai": 63, "made": [51, 52, 53, 54, 55], "magniett": [28, 29, 63], "mai": [0, 4, 18, 57, 60], "main": 60, "maintain": [12, 13, 14], "make": [3, 13], "make_blob": [5, 10, 14], "make_circl": [1, 6, 7], "make_moon": 8, "manag": 60, "manhattan": [39, 43, 47, 50, 61], "mani": [3, 60], "manner": 63, "map": [11, 17, 26, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62], "marker": [7, 13], "martin": [28, 29, 63], "match": [2, 3, 20, 56], "mathbb": [33, 34, 35, 36, 37, 38, 39, 63], "mathcal": [33, 34, 35, 36, 37, 38, 39, 63], "matmul": [2, 20], "matplotlib": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18], "matrix": [3, 7, 8, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "mattei": [31, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63], "maugi": [28, 29, 63], "max": [1, 8, 10, 12, 14, 15, 18], "max_clust": [24, 57], "max_depth": [24, 57], "max_featur": 57, "max_it": [1, 2, 14, 15, 23, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "max_leav": 57, "max_pati": [51, 52, 53, 54, 55], "maxim": [33, 40, 44, 51, 52, 53, 54, 55, 57, 63], "maximis": [2, 10, 23, 27, 40, 41, 43, 44, 45, 47, 48, 49, 50, 56, 63], "maximum": [3, 12, 13, 14, 26, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57], "mb": [11, 16, 19, 21, 22, 25, 62], "mean": [1, 2, 3, 4, 6, 7, 9, 18, 28, 30, 31, 37, 63], "means_init": 1, "mechan": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "mem": [11, 16, 19, 21, 22, 25, 62], "membership": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "meshgrid": [1, 4, 8, 10], "messag": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "metadata": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "metadatarequest": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "method": [0, 3, 6, 9, 12, 13, 14, 15, 18, 24, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63], "metric": [1, 6, 7, 9, 12, 13, 18, 20, 23, 24, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63], "metric_param": [39, 43, 47, 50], "mi": [2, 16, 17, 26, 28, 42, 46, 49, 51, 53, 56, 59, 62, 63], "micka": 60, "micka\u00ebl": [41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "microsoft": [60, 63], "mid": 63, "min": [1, 8, 10], "min_featur": [51, 52, 53, 54, 55], "min_samples_leaf": 57, "min_samples_split": 57, "minim": [51, 52, 53, 54, 55], "minimis": [2, 27], "minimum": [12, 13, 14, 51, 52, 53, 54, 55, 57], "minka": [60, 63], "minor": 59, "minut": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24], "miss": 60, "mistak": 59, "mixtur": [1, 3, 5, 10, 11, 17, 26, 28, 29, 30, 31, 42, 43, 59, 62], "mlcl": [19, 62], "mlcl_consensus_model": 18, "mlp": [1, 4, 8, 11, 16, 17, 26, 54, 55, 59, 61, 62, 63], "mlp___": 27, "mlpmmd": [1, 5, 46, 47], "mlpmmdifittedmlpmmd": 5, "mlpmodel": [45, 47, 59, 61], "mlpwasserstein": [8, 45, 46, 61], "mmd": [1, 6, 11, 13, 16, 17, 24, 26, 28, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63], "mmd_ova": [23, 26, 42, 46, 49, 53, 55, 56], "mmd_ovo": [26, 42, 46, 49, 53, 56], "mmdgemini": [59, 61, 63], "mmdova": 59, "mmdovo": 59, "mode": [6, 51, 52, 53, 54, 55, 59, 61, 63], "model": [11, 16, 17, 21, 23, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62], "model_kernel": 7, "modul": 63, "moon": [11, 17, 26, 46, 47, 62], "more": [18, 61, 63], "moreov": 15, "most": [18, 63], "mri": [13, 51, 63], "msr": [60, 63], "mu": [12, 13, 18, 28], "multi": [1, 61, 63], "multinomi": 15, "multipl": [26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "multivari": [32, 59], "multivariate_student_t": 59, "must": [0, 2, 27, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 57, 59, 61, 63], "must_link": [18, 27], "mutual": [10, 31, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 63], "n": [2, 3, 4, 9, 12, 13, 15, 18, 22, 28, 29, 30, 31, 32], "n_cluster": [1, 2, 3, 4, 6, 7, 8, 9, 10, 18, 23, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "n_compon": [1, 13], "n_constraint": 27, "n_cut": [23, 56], "n_featur": [12, 13, 14, 15, 26, 28, 29, 31, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "n_features_in": [43, 44], "n_hidden_dim": [45, 46, 47, 54, 55], "n_iter_": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "n_sampl": [1, 2, 5, 6, 7, 8, 10, 14, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "nabla_": [33, 34, 35, 36, 37, 38, 39], "naiv": 20, "naive_bay": 20, "name": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63], "nation": 60, "natur": [51, 52, 53, 54, 55, 60], "nbsp": [5, 10], "nbviewer": [5, 10], "ndarrai": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "need": [2, 20, 37, 39, 59], "neg": 2, "nest": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "net": 60, "network": [0, 5, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63], "neural": [0, 5, 26, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63], "neurip": 60, "neuron": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "new": [57, 59], "new_i": 7, "new_pr": 7, "new_x": 7, "next": 18, "node": [6, 9, 11, 17, 24, 26, 30, 49, 50, 57, 59, 62], "node_i": 3, "node_j": 3, "nois": [1, 6, 7, 8], "noisi": [12, 13, 14, 15, 28, 29], "non": [3, 6, 11, 17, 26, 29, 30, 48, 49, 62], "none": [2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "nonparametr": [6, 9, 11, 17, 18, 26, 30, 59, 62, 63], "norm": [12, 13, 27], "normal": [14, 15], "normalis": [1, 6], "note": [3, 8, 57, 63], "notebook": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24], "notic": [18, 24], "novel": [7, 60], "now": [4, 10, 12, 13, 14, 20, 59], "np": [1, 2, 3, 4, 6, 8, 9, 10, 12, 13, 14, 15, 18, 20], "num": [1, 4, 8, 10], "number": [1, 3, 9, 12, 13, 14, 18, 26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "numer": [33, 34, 35, 36, 37, 38, 39], "numpi": [1, 2, 3, 4, 6, 8, 9, 10, 12, 13, 14, 15, 18, 20, 59, 60], "o": [7, 13], "object": [2, 5, 6, 17, 25, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62], "obtain": [20, 24], "octob": [31, 60], "off": [1, 6, 8, 13], "offer": [51, 52, 53, 54, 55, 60], "oh": 60, "ohl": [31, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63], "ohl2022generalis": 60, "onc": 57, "one": [0, 13, 15, 20, 33, 34, 35, 37, 38, 39, 40, 41, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 57, 61, 63], "ones": [2, 3, 9, 37, 39, 40, 41, 43, 45, 47, 48, 50, 52, 54, 57], "onli": [3, 4, 9, 12, 13, 14, 15, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63], "open": 60, "openreview": 60, "opposit": 2, "optim": [1, 8, 12, 13, 14, 15], "optimis": [2, 3, 6, 9, 24, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63], "optimiser_": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "optimum": [12, 14, 15], "option": [8, 15, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "ord": [12, 13], "order": [2, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "org": [5, 10], "origin": [4, 8, 30, 60], "other": [13, 26, 28, 42, 46, 48, 49, 50, 53, 56, 60, 63], "otherwis": [2, 20, 26, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61], "our": [2, 3, 8, 14, 15, 18, 60, 63], "out": [15, 60], "outcom": 15, "outlier": 4, "output": [2, 26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 63], "ova": [16, 17, 20, 26, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 61, 62, 63], "over": [18, 28], "overal": [0, 6], "overrid": 26, "ovo": [3, 5, 6, 9, 16, 17, 18, 26, 28, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 47, 48, 50, 52, 53, 54, 61, 62, 63], "ow": 63, "own": [11, 17, 26, 30, 62, 63], "p": [3, 12, 13, 18, 26, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 63], "p3ia": 60, "p_": [2, 50, 63], "p_y_given_x": 61, "p_y_given_x_1": 20, "p_y_given_x_2": 20, "packag": [0, 59], "page": [5, 10], "pair": [3, 8, 17, 19, 26, 27, 28, 41, 42, 49, 50, 61, 62], "paired_dist": [39, 43, 47, 50], "pairwise_dist": [3, 8, 63], "pairwise_kernel": 63, "paper": [4, 8, 40, 44, 63], "param": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "paramet": [0, 1, 2, 3, 9, 15, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63], "parametr": [3, 6, 11, 17, 26, 30, 48, 49, 62, 63], "parametris": 59, "parent": 2, "part": [48, 49, 50], "partit": [15, 51, 52, 53, 54, 55, 59], "partli": 60, "pass": [3, 8, 26, 28, 29, 30, 31, 32, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63], "path": [3, 8, 13, 51, 52, 53, 54, 55, 59], "pattern": 63, "pca": 13, "penalti": [10, 12, 13, 14, 15, 20, 40, 44, 51, 52, 53, 54, 55, 63], "per": [23, 33, 34, 35, 36, 37, 38, 39, 56, 59], "percentag": [51, 52, 53, 54, 55], "perceptron": [1, 61, 63], "perform": [3, 12, 13, 14, 15, 18, 20, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63], "perona": [40, 44, 63], "petal": 24, "phantom": 63, "pick": 61, "pierr": [41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "pietro": [40, 44], "pip": 60, "pipelin": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "pleas": [5, 10, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "pleasur": 60, "plot": [1, 3, 4, 12, 14], "plot_circl": [1, 11, 62], "plot_custom_model": [2, 11, 62], "plot_douglas_exampl": [23, 25, 62], "plot_feature_selection_linear": [12, 16, 62], "plot_feature_selection_logreg_mi": [13, 16, 62], "plot_feature_selection_mlp": [14, 16, 62], "plot_gemini_scor": [20, 21, 62], "plot_graph_node_clust": [3, 11, 62], "plot_grouped_select": [15, 16, 62], "plot_gstm": [4, 11, 62], "plot_intro_mlp_mmd": [5, 11, 62], "plot_kauri_exampl": [24, 25, 62], "plot_kernel_kmean": [6, 11, 62], "plot_kernel_rim": [7, 11, 62], "plot_moon_clust": [8, 11, 62], "plot_nonparametric_clust": [9, 11, 62], "plot_rim": [10, 11, 62], "plot_semi_supervised_consensu": [18, 19, 62], "plt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18], "point": 56, "poli": [37, 40, 41, 45, 48, 52, 54, 57], "polynomi": [37, 40, 41, 45, 48, 52, 54, 57], "posit": [3, 9, 32], "possibl": [2, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63], "pot": 60, "pp": [33, 63], "pre": 61, "precioso": [31, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63], "precis": [33, 34, 35, 36, 37, 38, 39], "precomput": [3, 8, 18, 20, 26, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63], "precomputed_dist": 20, "precomputed_kernel": 61, "predict": [0, 2, 4, 5, 8, 9, 10, 12, 13, 14, 18, 20, 26, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "predict_proba": [10, 18, 20, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "preprint": 63, "preprocess": 20, "present": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63], "prevent": 63, "print": [0, 3, 6, 7, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "print_kauri_tre": 24, "probabl": [2, 3, 10, 26, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63], "problem": 59, "procedur": 3, "proceed": [33, 63], "process": [31, 60, 63], "produc": [15, 56], "progress": [0, 12, 13, 14, 15, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "project": 60, "proport": 30, "propos": [0, 1, 10, 13, 18, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 63], "propto": 63, "provid": [0, 17, 18, 60, 63], "proxim": [51, 53, 54, 55, 59], "purpos": [13, 63], "put": 57, "pval": [2, 15, 30], "py": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 62], "pyplot": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18], "python": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24, 59, 60], "q": 63, "qionghai": 51, "quantil": 8, "r": [18, 33, 34, 35, 36, 37, 38, 39, 54, 55, 63], "rabusseau": [28, 29, 63], "rafteri": [28, 29, 63], "rand_jitt": 15, "randn": 15, "random": [2, 3, 14, 15, 18, 26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "random_st": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "randomli": 57, "randomst": [26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "rang": [3, 13, 15, 18], "rangl": 63, "rate": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "rather": [18, 20], "ratio": 18, "ravel": [1, 4, 8, 10], "rbf": [1, 6, 7, 18, 37, 40, 41, 45, 48, 52, 54, 57, 61], "rbf_gemini": 1, "reach": 57, "readili": 63, "real": 18, "realis": 60, "realli": 60, "recombin": 56, "red": 15, "reds_r": 4, "reduct": [51, 52, 53, 54, 55], "refer": [26, 28, 29, 31, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "refurbish": 57, "reg": [7, 10, 40, 44], "regard": 59, "regress": [0, 2, 7, 11, 14, 15, 16, 17, 20, 26, 28, 40, 41, 42, 43, 44, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63], "regular": [28, 29, 40, 44, 63], "regularis": [10, 12, 13, 14, 15, 40, 41, 42, 43, 44], "rel": [54, 55, 56], "relev": [12, 13, 14, 15, 60, 63], "relu": 63, "remain": [18, 51, 52, 53, 54, 55, 59], "remov": 0, "render": [5, 10], "repeat": 15, "repeatedli": 57, "replac": [3, 8, 20, 61, 63], "repo": 60, "report": [60, 63], "repres": [51, 52, 53, 54, 55], "represent": [5, 10, 45, 46, 47, 54, 55], "reproduc": [26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "requir": [18, 59, 60, 61, 63], "rerun": [5, 10], "research": [60, 63], "reshap": [1, 2, 4, 8, 10], "resp": 61, "respect": [27, 28, 53, 59], "restor": [51, 52, 53, 54, 55], "restore_best_weight": [51, 52, 53, 54, 55], "result": [26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "retain": 2, "retak": [4, 8], "retrain": [51, 52, 53, 54, 55], "retriev": [51, 52, 53, 54, 55], "retrocompat": 59, "return": [2, 9, 15, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63], "return_grad": [33, 34, 35, 36, 37, 38, 39], "return_x_i": [20, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54], "revers": 18, "reward": 57, "rewrit": 63, "right": 63, "rim": [11, 17, 26, 40, 41, 42, 43, 59, 62, 63], "rimifittedrim": 10, "rizzo": 63, "robustscal": 20, "rout": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "row": 2, "ruan": [54, 55, 63], "rule": [0, 56], "run": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "ryan": [40, 44], "same": [2, 9, 18, 20, 27, 60, 63], "sampl": [0, 4, 10, 12, 13, 14, 17, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 63], "satisfi": [18, 27, 57], "sc": 1, "scale": [2, 14, 28, 30, 32, 60, 61], "scatter": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15], "scatterpoint": [5, 10, 14], "scheme": [51, 52, 53, 54, 55], "scientif": 60, "scikit": [59, 60, 61], "scipi": [3, 8, 60], "score": [3, 6, 9, 10, 12, 13, 14, 15, 21, 23, 24, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62], "script": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24], "search": [12, 13, 14, 15], "second": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 63], "section": [28, 29], "seed": [3, 14, 15, 18], "seek": [18, 20, 63], "seem": 4, "seen": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "segment": [13, 51, 63], "seismic": 18, "select": [0, 16, 26, 28, 29, 33, 42, 46, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63], "self": [2, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "semi": 32, "sens": [60, 63], "separ": [3, 9, 10, 12, 13, 14, 59, 63], "sequenti": [51, 52, 53, 54, 55], "set": [1, 7, 26, 27, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63], "set_alpha": [5, 10, 14], "set_param": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "settl": [12, 14, 15], "sever": [18, 63], "sgd": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "sgdoptim": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "shape": [2, 3, 8, 15, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "share": [20, 60], "shaw": 63, "shortcut": 36, "shortest": [3, 8], "should": [12, 13, 14, 15, 18, 33, 34, 35, 36, 37, 38, 39, 53, 56, 63], "show": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24], "sigmoid": [2, 18, 37, 40, 41, 45, 48, 52, 54, 57], "signal": 63, "sim": [33, 34, 35, 36, 37, 38, 39, 63], "similar": [1, 13], "simpl": [0, 1, 2, 3, 5, 7, 9, 11, 17, 18, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63], "simplex": 63, "simpli": 59, "simplic": 24, "simplifi": [3, 36, 61], "simul": 18, "simultan": [0, 51, 52, 53, 54, 55, 60], "sinc": 6, "singl": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "situat": 18, "size": [2, 3, 8, 14, 15, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59], "skeleton": 0, "skip": [54, 55, 63], "sklearn": [1, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 18, 20, 23, 24, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 63], "small": [13, 18, 51, 52, 53, 54, 55, 60], "smoothen": 56, "so": [4, 8, 12, 13, 14, 20, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61], "societ": [28, 29, 63], "soft": 56, "softmax": 63, "solut": [8, 12, 13, 14, 15, 18, 33, 51, 52, 53, 54, 55, 63], "solv": 7, "solver": [2, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "some": [1, 7, 15, 18, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63], "sort": 18, "sorted_confidence_sampl": 18, "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63], "space": [13, 37, 39, 63], "spar": 59, "spars": [3, 8, 15, 16, 17, 26, 28, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 59, 62, 63], "sparselinearmi": [13, 52, 59, 63], "sparselinearmmd": [12, 15, 51, 54], "sparselinearmodel": [51, 52, 59, 63], "sparsemlpmmd": [14, 53, 55], "sparsemlpmodel": [53, 54, 59, 63], "sparsiti": [54, 55, 63], "special": [57, 60, 61, 63], "specif": [9, 13, 26, 60, 61, 63], "specifi": [3, 20, 51, 52, 53, 54, 55, 59], "spectral": [1, 8], "spectralclust": 1, "spectrum": 60, "spheric": 1, "sphinx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24], "spirit": 60, "split": [56, 57, 63], "spread": 32, "sqrt": 2, "squar": [24, 33, 34, 59, 63], "stai": 63, "standard": 0, "start": [1, 2, 6, 7, 18, 20, 51, 52, 53, 54, 55, 60], "state": 2, "statist": 63, "statistiqu": [28, 29, 63], "std": [1, 6, 7], "stdout": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "step": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "still": 2, "stochast": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "stop": [51, 52, 53, 54, 55], "store": 2, "str": [26, 42, 46, 49, 53, 56], "strength": [54, 55], "string": 59, "structur": [0, 57, 58], "student": [11, 17, 26, 31, 32, 42, 43, 59, 62], "sub": 18, "subobject": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "subplot": [1, 14], "subset": [0, 52, 53, 54, 55], "suffici": [12, 13, 14, 15], "suggest": 60, "sugiyama": [33, 63], "super": 2, "superflu": 18, "supervis": 18, "support": [48, 49, 50, 59, 60], "symmetr": [3, 33, 34, 35, 36, 37, 38, 39], "symmetri": 1, "synthet": [0, 60], "system": [31, 60, 63], "t": [2, 3, 4, 20, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 63], "tailor": [48, 49, 50], "take": [1, 4, 10, 12, 14, 15, 18, 63], "taken": [28, 29, 63], "target": [23, 24, 63], "taylor": 63, "technic": [60, 63], "tell": 2, "temperatur": 56, "test": [7, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59], "text": [2, 34, 35, 36, 37, 38, 63], "than": [8, 51, 52, 53, 54, 55], "thank": 60, "thei": [0, 18, 20, 61, 63], "them": [7, 57], "theorem": 63, "theori": 60, "theta": [2, 63], "theta_": [2, 48, 49, 50], "theta_grad": 2, "thi": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 26, 28, 29, 31, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63], "those": [56, 57, 61], "threshold": [8, 13, 15, 23], "through": [12, 13, 14, 15, 54, 55, 57, 59, 60], "thu": [0, 6, 12, 13, 14, 15, 27], "tibshirani": [54, 55, 63], "tight_layout": [1, 14], "time": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24], "titl": [1, 2, 12, 13, 14, 60], "togeth": [18, 27], "too": [51, 52, 53, 54, 55], "took": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "tool": 60, "top": [2, 4, 12, 14, 15, 51, 53, 54, 55], "torr": 60, "total": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 38, 61, 62, 63], "tr": [60, 63], "tractabl": 63, "train": [0, 2, 5, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63], "transact": 63, "tree": [25, 26, 59, 60, 62, 63], "tree_": 57, "tri": 60, "trick": 8, "true": [2, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 18, 20, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63], "trust": [5, 10], "try": [5, 10, 18, 60], "tune": [33, 63], "tupl": [28, 29, 30], "tv": 38, "tv_ovo": 61, "tvgemini": [59, 61, 63], "two": [1, 2, 5, 6, 7, 11, 17, 24, 26, 33, 34, 35, 37, 38, 39, 45, 46, 47, 53, 54, 57, 62, 63], "type": [1, 59, 63], "typic": [51, 52, 53, 54, 55], "u": [10, 60, 61, 63], "unabl": [5, 10], "under": [10, 51, 52, 53, 54, 55, 60], "underli": [0, 57], "understand": 0, "unfold": [51, 52, 53, 54, 55], "uniform": 2, "unimpl": 60, "unless": 1, "unlik": 4, "unnecessari": 3, "unseen": [0, 9], "unsupervis": [2, 17, 18, 25, 26, 56, 57, 58, 59, 61, 62, 63], "unsure_sample_pair": 18, "until": [12, 13, 14, 15, 51, 52, 53, 54, 55, 57], "unus": [33, 34, 35, 36, 38], "unweight": [3, 8], "up": [2, 57], "updat": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "upgrad": [51, 52, 53, 54, 55], "upon": 57, "upper": [5, 10, 14], "url": 60, "us": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 20, 23, 33, 34, 35, 37, 38, 61, 62, 63], "usag": 59, "user": [26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "v": [20, 33, 34, 35, 37, 38, 39, 61, 63], "valid": 59, "valu": [1, 3, 12, 13, 14, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61], "valuat": 63, "vanilla": [51, 53, 54, 55], "variabl": [3, 12, 13, 14, 15, 17, 28, 29, 51, 52, 53, 54, 55, 59, 63], "variat": [38, 51, 53, 54, 55, 57, 61, 63], "variou": [18, 51, 52, 53, 54, 55], "vector": [2, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63], "verbos": [2, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "veri": 13, "version": [3, 33, 34, 35, 37, 38, 39, 40, 51, 54, 59, 63], "via": [51, 53, 63], "visualis": [13, 15], "vogelstein": 63, "vol": 63, "w": [31, 33, 34, 35, 36, 37, 38, 39, 60, 63], "w1_": [45, 46, 47, 54, 55], "w2_": [45, 46, 47, 54, 55], "w_": [40, 41, 42, 43, 44, 51, 52, 53], "w_k": 63, "w_skip_": [54, 55], "wa": [12, 14, 15, 26, 28, 29, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "wait": [51, 52, 53, 54, 55], "want": [4, 8, 63], "warith": [41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "wasserstein": [20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 59, 61, 63], "wasserstein_ova": [26, 42, 46, 49, 53, 56], "wasserstein_ovo": [2, 26, 42, 46, 49, 53, 56], "wasserstein_scor": 20, "wassersteingemini": [20, 59, 61, 63], "wassersteinova": 59, "wassersteinovo": 59, "we": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 24, 60, 61, 63], "weight": [12, 13, 14, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "well": [1, 4, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63], "were": [18, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "what": 18, "when": [26, 51, 52, 53, 54, 55, 61], "where": [4, 8, 12, 13, 14, 15, 18, 20, 26, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63], "wherea": 56, "whether": [18, 26, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "which": [0, 2, 3, 8, 10, 12, 14, 15, 24, 27, 28, 29, 30, 31, 37, 39, 51, 52, 53, 54, 55, 56, 57, 60], "while": 18, "whole": [26, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55], "why": 13, "width": 24, "william": 63, "wise": 56, "wish": 2, "within": 56, "without": [51, 52, 53, 54, 55, 60, 63], "word": [61, 63], "work": [2, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 63], "would": [6, 8, 18, 60, 61], "write": 15, "written": [2, 60], "x": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63], "x1_class_1": 15, "x1_class_2": 15, "x2_class_1": 15, "x2_class_2": 15, "x_0": [5, 10, 14], "x_1": [5, 10, 14], "x_2": [5, 10, 14], "x_class_1": 15, "x_class_2": 15, "x_i": [48, 49, 50], "x_inform": 15, "x_nois": 15, "x_pca": 13, "x_val": [1, 4, 8, 10], "xlabel": [4, 5, 10, 12, 14], "xlim": 4, "xx": [1, 4, 8, 10], "y": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 23, 24, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63], "y_1": 63, "y_2": 63, "y_a": [33, 34, 35, 37, 38, 39], "y_b": [33, 34, 35, 37, 38, 39], "y_one_hot": 20, "y_pred": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 18, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "y_pred_additive_chi2": 24, "y_pred_consensu": 18, "y_pred_linear": [23, 24], "y_pred_logit": 2, "y_pred_mlcl_consensu": 18, "y_val": [1, 4, 8, 10], "yamada": [33, 63], "year": 60, "ylabel": [4, 5, 10, 12, 14], "ylim": [1, 4, 6, 12, 14], "you": [2, 60, 63], "your": [11, 17, 26, 30, 62, 63], "youyong": 51, "yue": 51, "yy": [1, 4, 8, 10], "zemel": 63, "zero": [1, 18, 59], "zip": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 23, 24], "zz": [4, 8, 10]}, "titles": ["GemClus API", "Comparative clustering of circles dataset with kernel change", "Extending GemClus to build your own discriminative clustering model", "Graph node clustering with a nonparametric model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Kernel KMeans clustering with GEMINI", "Clustering circles with kernel RIM", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Computation times", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse Linear MI (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Grouped Feature selection with a linear model", "Computation times", "Example gallery", "Consensus clustering with linking constraints on sample pairs", "Computation times", "Scoring any model with GEMINI", "Computation times", "Computation times", "Building a differentiable unsupervised tree: DOUGLAS", "Building an unsupervised tree with kernel-kmeans objective: KAURI", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.DiscriminativeModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.add_mlcl_constraint", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.ChiSquareGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.HellingerGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.KLGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.TVGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.KernelRIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Douglas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Kauri", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.print_kauri_tree", "RELEASES", "Welcome to GemClus documentation!", "Quick start on GemClus", "Computation times", "User guide : contents"], "titleterms": {"0": 59, "1": 59, "2": 59, "A": [60, 63], "In": 59, "The": 63, "about": 60, "acknowledg": 60, "add": 18, "add_mlcl_constraint": 27, "addit": 24, "an": [5, 24], "ani": 20, "api": 0, "approach": 63, "ar": 63, "avail": 63, "basic": 63, "between": [3, 8], "boundari": [1, 4, 8], "build": [2, 18, 23, 24], "cannot": 18, "categoricalmmd": 48, "categoricalmodel": 49, "categoricalwasserstein": 50, "celeux_on": 28, "celeux_two": 29, "chang": [1, 59], "chi2": 24, "chisquaregemini": 33, "choos": 63, "circl": [1, 7], "circular": 6, "cluster": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 60, 63], "compar": 1, "comput": [3, 8, 11, 16, 19, 21, 22, 25, 62], "consensu": [17, 18], "constraint": [0, 18], "content": [60, 63], "contribut": 60, "creat": [2, 3, 5, 18, 23, 24], "custom": 2, "data": [4, 5, 28, 29, 30, 31, 32], "dataset": [0, 1, 6, 7, 10, 12, 13, 14, 15, 18, 20, 23, 24, 63], "decis": [1, 4, 8], "definit": 63, "degre": 4, "dens": 0, "develop": 59, "differenti": 23, "discrimin": [2, 60, 63], "discriminativemodel": 26, "displai": 1, "distribut": [4, 63], "document": 60, "dougla": [23, 56], "draw": [1, 3, 6, 7, 8, 9], "draw_gmm": 30, "edg": 3, "evalu": 24, "exampl": [4, 5, 17, 26, 27, 28, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63], "extend": [2, 63], "featur": [12, 13, 14, 15, 17], "final": [3, 4, 5, 6, 8, 9, 10, 12, 13, 14], "first": 24, "fit": [2, 5, 23], "from": [3, 6, 9], "function": 63, "galleri": 17, "gaussian": 4, "gemclu": [0, 2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61], "gemini": [0, 5, 6, 17, 20, 33, 34, 35, 36, 37, 38, 39, 60, 63], "gener": [0, 4, 5, 8, 17], "gmm": [3, 9], "graph": 3, "group": 15, "gstm": 31, "guid": 63, "hellingergemini": 34, "histori": 59, "i": [60, 63], "implement": 63, "instal": 60, "interlac": 8, "introduc": 5, "kauri": [24, 57], "kernel": [1, 6, 7, 24], "kernelrim": 40, "klgemini": 35, "kmean": [6, 24], "latest": [59, 60], "linear": [13, 15, 24, 40, 41, 42, 43, 44], "linearmmd": 41, "linearmodel": 42, "linearwasserstein": 43, "link": 18, "load": [10, 12, 13, 14, 15, 18, 20, 23, 24], "logist": [10, 12, 13], "low": 4, "map": 4, "matrix": 18, "metric": [3, 8], "mi": [13, 36], "mixtur": 4, "mlp": [5, 14, 45, 46, 47], "mlpmmd": 45, "mlpmodel": 46, "mlpwasserstein": 47, "mmd": [5, 12, 14], "mmdgemini": 37, "model": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 20, 24, 63], "moon": 8, "multipl": 18, "multivariate_student_t": 32, "must": 18, "node": 3, "non": 9, "nonparametr": [0, 3, 48, 49, 50], "object": [24, 63], "offici": 60, "optimis": 18, "ova": 14, "ovo": 12, "own": 2, "packag": [60, 63], "pair": 18, "paper": 60, "parametr": 9, "path": [12, 14, 15], "perform": 24, "plot": [2, 5, 18], "pre": [3, 8], "predict": [1, 7], "print_kauri_tre": 58, "procedur": 2, "quick": 61, "real": 20, "refer": [60, 63], "regress": [10, 12, 13], "regularis": 63, "relat": 60, "releas": 59, "result": [2, 12, 14, 15, 18], "rim": [7, 10, 44], "sampl": [1, 3, 6, 7, 8, 9, 18], "scope": 60, "score": [0, 17, 20], "second": 24, "select": [12, 13, 14, 15, 17], "show": 7, "similar": 7, "simpl": [10, 12, 13, 14, 15, 20], "spars": [0, 12, 13, 14, 51, 52, 53, 54, 55], "sparselinearmi": 51, "sparselinearmmd": 52, "sparselinearmodel": 53, "sparsemlpmmd": 54, "sparsemlpmodel": 55, "specif": [3, 8], "start": 61, "structur": 24, "student": 4, "summari": 63, "supervis": 20, "synthet": [10, 12, 13, 14, 15], "test": 2, "time": [11, 16, 19, 21, 22, 25, 62], "train": [1, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 20], "tree": [0, 17, 23, 24, 56, 57, 58], "tvgemini": 38, "two": [8, 20], "unsupervis": [23, 24], "us": [12, 13, 14, 24, 26, 27, 28, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "user": 63, "version": 60, "visualis": 24, "wassersteingemini": 39, "welcom": 60, "what": [60, 63], "which": 63, "why": 60, "your": 2}})