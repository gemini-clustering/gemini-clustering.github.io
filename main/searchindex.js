Search.setIndex({"docnames": ["api", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_feature_selection_linear", "auto_examples/feature_selection/plot_feature_selection_logreg_mi", "auto_examples/feature_selection/plot_feature_selection_mlp", "auto_examples/feature_selection/plot_grouped_selection", "auto_examples/feature_selection/sg_execution_times", "auto_examples/index", "auto_examples/mlcl/index", "auto_examples/mlcl/plot_semi_supervised_consensus", "auto_examples/mlcl/sg_execution_times", "auto_examples/plot_circles", "auto_examples/plot_custom_model", "auto_examples/plot_graph_node_clustering", "auto_examples/plot_gstm", "auto_examples/plot_intro_mlp_mmd", "auto_examples/plot_kernel_kmeans", "auto_examples/plot_moon_clustering", "auto_examples/plot_nonparametric_clustering", "auto_examples/plot_rim", "auto_examples/scoring/index", "auto_examples/scoring/plot_gemini_scoring", "auto_examples/scoring/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/trees/index", "auto_examples/trees/plot_douglas_example", "auto_examples/trees/plot_kauri_example", "auto_examples/trees/sg_execution_times", "generated/constraints/gemclus.add_mlcl_constraint", "generated/data/gemclus.data.celeux_one", "generated/data/gemclus.data.celeux_two", "generated/data/gemclus.data.draw_gmm", "generated/data/gemclus.data.gstm", "generated/data/gemclus.data.multivariate_student_t", "generated/gemini/gemclus.gemini.HellingerGEMINI", "generated/gemini/gemclus.gemini.KLGEMINI", "generated/gemini/gemclus.gemini.MI", "generated/gemini/gemclus.gemini.MMDGEMINI", "generated/gemini/gemclus.gemini.TVGEMINI", "generated/gemini/gemclus.gemini.WassersteinGEMINI", "generated/models/gemclus.linear.LinearMMD", "generated/models/gemclus.linear.LinearModel", "generated/models/gemclus.linear.LinearWasserstein", "generated/models/gemclus.linear.RIM", "generated/models/gemclus.mlp.MLPMMD", "generated/models/gemclus.mlp.MLPModel", "generated/models/gemclus.mlp.MLPWasserstein", "generated/models/gemclus.nonparametric.CategoricalMMD", "generated/models/gemclus.nonparametric.CategoricalModel", "generated/models/gemclus.nonparametric.CategoricalWasserstein", "generated/models/gemclus.sparse.SparseLinearMI", "generated/models/gemclus.sparse.SparseLinearMMD", "generated/models/gemclus.sparse.SparseLinearModel", "generated/models/gemclus.sparse.SparseMLPMMD", "generated/models/gemclus.sparse.SparseMLPModel", "generated/models/gemclus.tree.Douglas", "generated/models/gemclus.tree.Kauri", "generated/models/gemclus.tree.print_kauri_tree", "history", "index", "quick_start", "sg_execution_times", "user_guide"], "filenames": ["api.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_feature_selection_linear.rst", "auto_examples/feature_selection/plot_feature_selection_logreg_mi.rst", "auto_examples/feature_selection/plot_feature_selection_mlp.rst", "auto_examples/feature_selection/plot_grouped_selection.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/mlcl/index.rst", "auto_examples/mlcl/plot_semi_supervised_consensus.rst", "auto_examples/mlcl/sg_execution_times.rst", "auto_examples/plot_circles.rst", "auto_examples/plot_custom_model.rst", "auto_examples/plot_graph_node_clustering.rst", "auto_examples/plot_gstm.rst", "auto_examples/plot_intro_mlp_mmd.rst", "auto_examples/plot_kernel_kmeans.rst", "auto_examples/plot_moon_clustering.rst", "auto_examples/plot_nonparametric_clustering.rst", "auto_examples/plot_rim.rst", "auto_examples/scoring/index.rst", "auto_examples/scoring/plot_gemini_scoring.rst", "auto_examples/scoring/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/trees/index.rst", "auto_examples/trees/plot_douglas_example.rst", "auto_examples/trees/plot_kauri_example.rst", "auto_examples/trees/sg_execution_times.rst", "generated/constraints/gemclus.add_mlcl_constraint.rst", "generated/data/gemclus.data.celeux_one.rst", "generated/data/gemclus.data.celeux_two.rst", "generated/data/gemclus.data.draw_gmm.rst", "generated/data/gemclus.data.gstm.rst", "generated/data/gemclus.data.multivariate_student_t.rst", "generated/gemini/gemclus.gemini.HellingerGEMINI.rst", "generated/gemini/gemclus.gemini.KLGEMINI.rst", "generated/gemini/gemclus.gemini.MI.rst", "generated/gemini/gemclus.gemini.MMDGEMINI.rst", "generated/gemini/gemclus.gemini.TVGEMINI.rst", "generated/gemini/gemclus.gemini.WassersteinGEMINI.rst", "generated/models/gemclus.linear.LinearMMD.rst", "generated/models/gemclus.linear.LinearModel.rst", "generated/models/gemclus.linear.LinearWasserstein.rst", "generated/models/gemclus.linear.RIM.rst", "generated/models/gemclus.mlp.MLPMMD.rst", "generated/models/gemclus.mlp.MLPModel.rst", "generated/models/gemclus.mlp.MLPWasserstein.rst", "generated/models/gemclus.nonparametric.CategoricalMMD.rst", "generated/models/gemclus.nonparametric.CategoricalModel.rst", "generated/models/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/models/gemclus.sparse.SparseLinearMI.rst", "generated/models/gemclus.sparse.SparseLinearMMD.rst", "generated/models/gemclus.sparse.SparseLinearModel.rst", "generated/models/gemclus.sparse.SparseMLPMMD.rst", "generated/models/gemclus.sparse.SparseMLPModel.rst", "generated/models/gemclus.tree.Douglas.rst", "generated/models/gemclus.tree.Kauri.rst", "generated/models/gemclus.tree.print_kauri_tree.rst", "history.rst", "index.rst", "quick_start.rst", "sg_execution_times.rst", "user_guide.rst"], "titles": ["GEMCLUS API", "Feature selection", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse Linear MI (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Grouped Feature selection with a linear model", "Computation times", "General examples", "Consensus clustering", "Consensus clustering with linking constraints on sample pairs", "Computation times", "Comparative clustering of circles dataset with kernel change", "Extending GemClus to build your own discriminative clustering model", "Graph node clustering with a nonparametric model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Kernel KMeans clustering with GEMINI", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Scoring with GEMINI", "Scoring any model with GEMINI", "Computation times", "Computation times", "Trees", "Building a differentiable unsupervised tree: DOUGLAS", "Building an unsupervised tree with kernel-kmeans objective: KAURI", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.add_mlcl_constraint", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.HellingerGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.KLGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.TVGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Douglas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Kauri", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.print_kauri_tree", "RELEASES", "Welcome to GemClus documentation!", "Quick start on gemclus", "Computation times", "User guide : contents"], "terms": {"The": [0, 2, 3, 4, 5, 9, 12, 15, 16, 18, 21, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62], "packag": [0, 58, 60], "current": [0, 37, 39, 40, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 56, 62], "contain": [0, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "simpl": [0, 7, 9, 11, 12, 13, 15, 18, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62], "mlp": [0, 1, 6, 7, 11, 14, 17, 23, 53, 54, 58, 60, 61], "logist": [0, 1, 4, 5, 6, 7, 12, 21, 23, 40, 41, 42, 43, 50, 51, 53, 54, 58, 61, 62], "regress": [0, 1, 4, 5, 6, 7, 12, 21, 23, 40, 41, 42, 43, 50, 51, 53, 54, 58, 61, 62], "all": [0, 2, 3, 4, 5, 7, 9, 12, 13, 17, 21, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62], "featur": [0, 6, 14, 15, 19, 25, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62], "well": [0, 11, 14, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 62], "sparsiti": [0, 53, 54, 60, 62], "constrain": [0, 5, 9, 58, 62], "variant": 0, "follow": [0, 12, 13, 43, 59], "class": [0, 9, 12, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62], "implement": [0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 56, 59], "basic": 0, "evalu": [0, 2, 3, 21, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "ani": [0, 7, 20, 22, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62], "condit": [0, 34, 35, 36, 37, 38, 39, 47, 48, 49, 52], "distribut": [0, 2, 3, 4, 5, 7, 11, 12, 15, 16, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 61], "These": 0, "ar": [0, 2, 3, 4, 5, 9, 12, 13, 14, 17, 18, 19, 25, 26, 28, 29, 32, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60], "base": [0, 7, 9, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62], "standard": 0, "like": [0, 3, 14, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "one": [0, 3, 5, 21, 34, 35, 37, 38, 39, 40, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 56, 60], "hidden": [0, 44, 45, 46, 53, 54, 62], "layer": [0, 11, 15, 44, 45, 46, 52, 53, 54, 62], "neural": [0, 15, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60], "network": [0, 15, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "have": [0, 9, 11, 12, 16, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "paramet": [0, 5, 9, 11, 12, 13, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "assign": [0, 5, 13, 16, 18, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "data": [0, 2, 3, 5, 9, 11, 12, 13, 16, 18, 19, 21, 25, 26, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62], "sampl": [0, 2, 3, 4, 7, 8, 10, 14, 19, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62], "accord": [0, 13, 19, 56], "indic": [0, 13, 28, 50, 51, 52, 53, 54, 55], "consequ": [0, 14, 18, 47, 48, 49], "do": [0, 9, 13, 17, 19, 21, 47, 48, 49, 59], "depend": [0, 2, 4, 5, 13, 18, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "locat": [0, 32], "overal": [0, 16, 59], "can": [0, 3, 9, 11, 12, 16, 18, 21, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62], "us": [0, 1, 5, 6, 7, 9, 11, 12, 13, 15, 16, 17, 18, 19, 21, 25, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62], "decis": [0, 7, 18, 19, 23, 26, 61, 62], "boundari": [0, 7, 19, 23, 61, 62], "hyper": 0, "howev": [0, 16], "underli": [0, 56], "cannot": [0, 11, 18, 28, 58], "unseen": [0, 18], "predict": [0, 2, 3, 4, 9, 12, 14, 15, 17, 18, 19, 21, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "train": [0, 12, 15, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "progress": [0, 2, 3, 4, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "remov": 0, "thei": [0, 9, 21], "select": [0, 6, 29, 30, 50, 51, 52, 53, 54, 56, 58, 61, 62], "subset": [0, 51, 52, 53, 54], "which": [0, 2, 4, 5, 12, 13, 17, 19, 26, 28, 29, 30, 31, 32, 37, 39, 50, 51, 52, 53, 54, 55, 56, 60], "mai": [0, 9, 14, 56, 59, 60], "enhanc": 0, "interpret": 0, "we": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 59, 60, 62], "propos": [0, 3, 9, 11, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62], "method": [0, 2, 3, 4, 5, 9, 13, 16, 18, 26, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62], "architectur": [0, 15, 53, 54, 62], "thu": [0, 2, 3, 4, 5, 16, 28, 60], "rule": [0, 55], "simultan": [0, 50, 51, 52, 53, 54], "construct": [0, 25, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "i": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62], "learnt": [0, 25], "function": [0, 12, 13, 17, 28, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 62], "intend": 0, "help": [0, 14, 56, 59], "understand": 0, "structur": [0, 56, 57], "abov": 0, "print": [0, 2, 3, 4, 5, 9, 13, 16, 18, 19, 21, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "inner": 0, "thi": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 25, 29, 30, 32, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62], "aim": [0, 12], "decor": [0, 9, 28], "give": [0, 7, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "further": [0, 60], "guidanc": [0, 9], "desir": [0, 17], "synthet": 0, "spars": [1, 5, 6, 7, 13, 17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 58, 60, 61, 62], "mmd": [1, 3, 6, 7, 11, 16, 23, 26, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62], "ovo": [1, 6, 7, 9, 13, 15, 16, 18, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 47, 49, 51, 53, 60, 61, 62], "linear": [1, 6, 7, 9, 11, 14, 17, 19, 21, 37, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62], "mi": [1, 6, 7, 12, 41, 45, 48, 50, 52, 55, 58, 61], "group": [1, 4, 6, 7, 50, 51, 52, 53, 54, 58, 61, 62], "model": [1, 6, 7, 20, 22, 23, 25, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62], "ova": [1, 6, 7, 21, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 60, 61, 62], "go": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 59], "end": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 58], "download": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 59], "full": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 58], "exampl": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61], "code": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 59], "In": [2, 3, 4, 5, 12, 13, 15, 19, 32, 59, 60, 62], "ask": [2, 3, 4, 5, 60], "gemclu": [2, 3, 4, 5, 7, 9, 11, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 26, 58, 61, 62], "sparselinearmmd": [2, 5, 50, 53], "perform": [2, 3, 4, 5, 9, 13, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 62], "where": [2, 3, 4, 5, 9, 14, 17, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "regularis": [2, 3, 4, 5, 19, 40, 41, 42, 43], "penalti": [2, 3, 4, 5, 19, 21, 43, 50, 51, 52, 53, 54, 62], "increas": [2, 3, 4, 5, 50, 51, 52, 53, 54, 56], "until": [2, 3, 4, 5, 50, 51, 52, 53, 54, 56], "2": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 27, 28, 29, 30, 32, 34, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 60, 62], "discard": [2, 3, 4, 5], "keep": [2, 3, 4, 62], "best": [2, 3, 4, 9, 50, 51, 52, 53, 54, 56], "weight": [2, 3, 4, 28, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "minimum": [2, 3, 4, 50, 51, 52, 53, 54, 56], "number": [2, 3, 4, 9, 11, 13, 18, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "maintain": [2, 3, 4], "gemini": [2, 3, 4, 5, 11, 12, 13, 14, 17, 18, 22, 23, 25, 26, 28, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61], "score": [2, 3, 4, 5, 13, 16, 18, 19, 22, 25, 26, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61], "close": [2, 3, 4, 9, 11, 29, 32], "90": [2, 3, 4], "maximum": [2, 3, 4, 13, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56], "valu": [2, 3, 4, 11, 13, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "encount": [2, 3, 4], "dure": [2, 3, 4, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "consist": [2, 3, 4, 5, 9, 11, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "3": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60], "isotrop": [2, 3, 4, 12, 29], "gaussian": [2, 3, 4, 7, 11, 12, 13, 15, 19, 21, 23, 29, 30, 31, 32, 58, 61], "so": [2, 3, 4, 14, 17, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "find": [2, 3, 4, 5, 9, 14, 17, 55, 59], "5d": [2, 3], "20": [2, 3, 29, 44, 45, 46, 53, 54], "noisi": [2, 3, 4, 5, 29, 30], "variabl": [2, 3, 4, 5, 13, 29, 30, 50, 51, 52, 53, 54, 58], "optim": [2, 3, 4, 5, 11, 17], "solut": [2, 3, 4, 5, 9, 17, 50, 51, 52, 53, 54], "should": [2, 3, 4, 5, 9, 34, 35, 36, 37, 38, 39, 52, 55], "onli": [2, 3, 4, 5, 13, 14, 18, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "5": [2, 3, 4, 5, 9, 11, 13, 14, 15, 17, 18, 19, 26, 29, 50, 51, 52, 53, 54], "relev": [2, 3, 4, 5], "suffici": [2, 3, 4, 5], "get": [2, 3, 4, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60], "correct": [2, 3, 4, 5, 12], "import": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 60], "numpi": [2, 3, 4, 5, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 59], "np": [2, 3, 4, 5, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21], "from": [2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 15, 17, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62], "matplotlib": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "pyplot": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "plt": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "sklearn": [2, 3, 4, 9, 11, 13, 15, 16, 17, 18, 19, 21, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 56, 60, 62], "metric": [2, 3, 9, 11, 16, 18, 21, 25, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62], "celeux_on": [2, 3, 9], "gener": [2, 3, 4, 5, 9, 11, 12, 13, 16, 18, 19, 21, 25, 26, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "separ": [2, 3, 4, 13, 18, 19, 58], "addit": [2, 3, 29, 30, 37, 39, 58, 60], "p": [2, 3, 9, 13, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60], "independ": [2, 3, 29, 60], "x": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62], "y": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 62], "n": [2, 3, 5, 9, 12, 13, 14, 18, 29, 30, 31, 32, 33], "300": [2, 3, 29], "mu": [2, 3, 9, 29], "1": [2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 26, 28, 29, 32, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60], "7": [2, 3, 5, 26, 29], "random_st": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "0": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 61], "creat": [2, 3, 4, 5, 16, 17, 18, 19], "just": [2, 3, 4, 5, 19], "call": [2, 3, 4, 5, 13, 16, 18, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "iter": [2, 3, 4, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "through": [2, 3, 4, 5, 53, 54, 56, 58, 59], "gradient": [2, 3, 4, 5, 12, 16, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "descent": [2, 3, 4, 5, 16, 28, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "clf": [2, 3, 4, 5, 14, 15, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53], "alpha": [2, 3, 4, 5, 11, 13, 14, 17, 19, 32, 50, 51, 52, 53, 54], "true": [2, 3, 4, 5, 9, 12, 13, 14, 15, 17, 18, 19, 21, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62], "search": [2, 3, 4, 5], "elimin": [2, 3, 4, 5, 53, 54], "best_weight": [2, 3, 4, 5, 50, 51, 52, 53, 54], "n_featur": [2, 3, 4, 5, 29, 30, 32, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "take": [2, 4, 5, 9, 11, 14, 19, 60], "look": [2, 4, 5, 11, 16, 19, 60], "how": [2, 4, 5, 7, 9, 15, 18, 19, 21, 25, 26, 29, 32, 60, 62], "decreas": [2, 4], "f": [2, 3, 4, 5, 13, 16, 18, 21, 32, 34, 35, 36, 38, 53, 54, 59, 60], "top": [2, 4, 5, 12, 14, 50, 52, 53, 54], "wa": [2, 4, 5, 29, 30, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "max": [2, 4, 5, 9, 11, 17, 19], "settl": [2, 4, 5], "an": [2, 4, 5, 7, 9, 13, 14, 17, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62], "optimum": [2, 4, 5], "9": [2, 4, 9, 14, 23, 50, 51, 52, 53, 54], "highlight": [2, 4], "along": [2, 4, 17], "titl": [2, 3, 4, 11, 12, 59], "plot": [2, 4, 11, 13, 14], "xlabel": [2, 4, 14, 15, 19], "ylabel": [2, 4, 14, 15, 19], "ylim": [2, 4, 11, 14, 16], "show": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26], "expect": [2, 3, 12, 14, 60], "first": [2, 3, 12, 21, 44, 45, 46, 53, 54, 60], "linalg": [2, 3], "norm": [2, 3, 28, 62], "axi": [2, 3, 4, 5, 11, 12, 16, 17], "ord": [2, 3], "8259728240495163": 2, "0249912491496707": 2, "7224921242347038": 2, "arrai": [2, 3, 4, 5, 12, 13, 18, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "4": [2, 3, 4, 5, 6, 11, 13, 14, 18, 26, 30], "now": [2, 3, 4, 14, 19, 21, 58], "y_pred": [2, 3, 4, 9, 12, 13, 14, 15, 16, 17, 18, 19, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "ari": [2, 3, 9, 13, 16, 18, 25, 26], "adjusted_rand_scor": [2, 3, 9, 13, 16, 18, 25, 26], "83290627605772": 2, "total": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 38, 61], "run": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "time": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 60], "script": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26], "minut": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26], "31": [2, 6, 23, 61], "832": [2, 6, 61], "second": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25], "jupyt": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26], "notebook": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26], "plot_feature_selection_linear": [2, 6, 61], "ipynb": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26], "python": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 58], "sourc": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59], "py": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 61], "galleri": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 61, 62], "sphinx": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26], "sparselinearmi": [3, 51, 58], "path": [3, 13, 17, 50, 51, 52, 53, 54, 58], "50": [3, 4, 5, 11, 13, 14, 15, 17, 19], "contrari": [3, 12], "guid": [3, 17, 56, 59, 60], "specif": [3, 18, 60], "kernel": [3, 7, 9, 15, 23, 24, 27, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 47, 48, 51, 52, 53, 55, 56, 58, 61, 62], "space": [3, 37, 39, 62], "That": 3, "why": 3, "accept": [3, 50, 51, 52, 53, 54], "threshold": [3, 5, 17, 25], "lower": [3, 5], "instead": [3, 13, 14, 21, 51, 52, 53, 54, 58], "other": [3, 29, 41, 45, 47, 48, 49, 52, 55], "A": [3, 9, 28, 29, 30, 31, 32, 40, 42, 44, 46, 47, 49, 51, 53, 54, 55, 57, 58, 60], "veri": 3, "similar": [3, 11], "found": [3, 56, 59], "discrimin": [3, 23, 28, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 61], "brain": [3, 50], "mri": [3, 50], "segment": [3, 50], "kong": [3, 50], "et": [3, 19, 29, 30, 43, 53, 54, 60], "al": [3, 19, 29, 30, 43, 53, 54, 60], "2014": [3, 29, 30], "decomposit": 3, "keep_threshold": [3, 5, 50, 51, 52, 53, 54], "6": [3, 5, 9, 26], "11": [3, 25, 27, 61], "let": [3, 19, 21], "": [3, 4, 13, 15, 19, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "make": [3, 13], "small": [3, 9, 50, 51, 52, 53, 54, 59], "pca": 3, "visualis": [3, 5], "purpos": 3, "distinguish": 3, "label": [3, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "x_pca": 3, "n_compon": [3, 11], "fit_transform": [3, 21], "k": [3, 31, 47, 48, 49, 60], "rang": [3, 5, 9, 13], "class_indic": 3, "scatter": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19], "c": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 29, 30, 32, 59, 60], "marker": 3, "o": 3, "off": [3, 11, 16, 17], "celeux": [3, 29, 30], "lasso": [3, 4, 50, 51, 52, 53, 54, 62], "458336976163333": 3, "320": [3, 6, 61], "plot_feature_selection_logreg_mi": [3, 6, 61], "sparsemlpmmd": [4, 52, 54], "2d": [4, 30], "48": 4, "make_blob": [4, 15, 19], "center": [4, 15, 19], "cluster_std": [4, 15, 19], "n_sampl": [4, 11, 12, 15, 16, 17, 19, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "200": [4, 11, 14, 15, 16, 17, 19], "add": [4, 12, 28, 62], "extra": 4, "random": [4, 5, 9, 12, 13, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "seed": [4, 5, 9, 13], "concaten": [4, 5, 12, 29], "normal": [4, 5], "scale": [4, 12, 29, 31, 33, 59], "size": [4, 5, 12, 13, 17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58], "18": 4, "batch_siz": [4, 5, 12, 14, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55], "max_it": [4, 5, 11, 12, 25, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "25": 4, "learning_r": [4, 5, 9, 12, 13, 17, 18, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "001": [4, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "our": [4, 5, 7, 9, 12, 13, 17, 59, 60], "figur": 4, "figsiz": 4, "10": [4, 9, 14, 19, 33, 50, 51, 52, 53, 54, 60], "subplot": [4, 11], "tight_layout": [4, 11], "get_select": [4, 5, 50, 51, 52, 53, 54, 58], "4596486286280377": 4, "5824499242836225": 4, "4242049318552603": 4, "x_0": [4, 15, 19], "x_1": [4, 15, 19], "x_2": [4, 15, 19], "ax0": [4, 15, 19], "crimson": [4, 15, 19], "ax1": [4, 15, 19], "deepskyblu": [4, 15, 19], "ax2": [4, 15, 19], "darkgreen": [4, 15, 19], "leg": [4, 15, 19], "legend": [4, 15, 19], "loc": [4, 12, 15, 19, 31, 33], "upper": [4, 15, 19], "left": [4, 15, 19, 60], "fancybox": [4, 15, 19], "scatterpoint": [4, 15, 19], "get_fram": [4, 15, 19], "set_alpha": [4, 15, 19], "867": [4, 6, 61], "plot_feature_selection_mlp": [4, 6, 61], "moreov": [5, 60], "produc": [5, 55], "some": [5, 7, 9, 11, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 62], "categor": [5, 47, 48, 49], "hot": [5, 50, 51, 52, 53, 54], "encod": [5, 50, 51, 52, 53, 54], "consid": [5, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56], "altogeth": 5, "option": [5, 17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "binomi": [5, 13], "cluster": [5, 10, 21, 23, 25, 26, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62], "8": [5, 13, 17, 58], "inform": [5, 12, 19, 21, 30, 32, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60], "outcom": 5, "multinomi": 5, "x1_class_1": 5, "pval": [5, 12, 31], "05": [5, 6, 11, 16, 17, 50, 51, 52, 53, 54, 61], "45": 5, "x2_class_1": 5, "x_class_1": 5, "x1_class_2": 5, "x2_class_2": 5, "x_class_2": 5, "x_inform": 5, "x_nois": 5, "100": [5, 9, 12, 13, 18, 25, 55], "repeat": 5, "arang": 5, "final": [5, 9], "write": 5, "out": [5, 59], "partit": [5, 50, 51, 52, 53, 54, 58], "shape": [5, 9, 12, 13, 17, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "def": [5, 12], "rand_jitt": 5, "return": [5, 12, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "randn": 5, "len": [5, 9], "01": [5, 22, 23, 50, 51, 52, 53, 54, 55, 61], "argmax": [5, 9, 19], "red": 5, "blue": [5, 14], "15": 5, "1e": [5, 9, 12, 13, 17, 18, 19, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "80": 5, "4935152433868388": 5, "8084378363828286": 5, "646750269106263": 5, "076": [5, 6, 61], "plot_grouped_select": [5, 6, 61], "00": [6, 10, 22, 23, 27, 61], "43": 6, "095": 6, "execut": [6, 10, 22, 23, 27, 61], "file": [6, 10, 22, 23, 27, 61], "auto_exampl": [6, 10, 22, 23, 27], "feature_select": [6, 61], "mem": [6, 10, 22, 23, 27, 61], "mb": [6, 10, 22, 23, 27, 61], "03": [6, 61], "02": [6, 23, 61], "here": [7, 9, 11, 12, 13, 14, 15, 21, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 62], "introduc": [7, 23, 58, 61], "non": [7, 13, 16, 23, 30, 61], "parametr": [7, 13, 16, 23, 60, 61], "kmean": [7, 15, 23, 24, 27, 37, 56, 61], "map": [7, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "mixtur": [7, 11, 13, 15, 19, 23, 29, 30, 31, 32, 58, 61], "low": [7, 9, 23, 55, 61], "degre": [7, 23, 32, 33, 61], "student": [7, 23, 32, 33, 58, 61], "draw": [7, 14, 23, 29, 30, 31, 32, 33, 61], "between": [7, 23, 28, 34, 35, 36, 37, 38, 39, 53, 54, 60, 61, 62], "two": [7, 11, 12, 15, 16, 23, 26, 34, 35, 37, 38, 39, 44, 45, 46, 52, 53, 56, 60, 61], "interlac": [7, 23, 61], "moon": [7, 23, 61], "rim": [7, 23, 40, 41, 42, 61], "graph": [7, 17, 18, 23, 58, 61], "node": [7, 16, 18, 23, 26, 56, 58, 61], "nonparametr": [7, 9, 16, 18, 23, 58, 61], "compar": [7, 23, 29, 30, 34, 35, 37, 38, 39, 60, 61], "circl": [7, 16, 23, 61], "dataset": [7, 15, 17, 23, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 58, 60, 61], "chang": [7, 23, 50, 51, 52, 53, 54, 61], "extend": [7, 23, 61], "build": [7, 23, 24, 27, 61], "your": [7, 23, 60, 61], "own": [7, 23, 60, 61], "link": [7, 8, 10, 28, 58, 61], "constraint": [7, 8, 10, 28, 50, 52, 53, 54, 56, 58, 61], "pair": [7, 8, 10, 13, 17, 28, 61], "differenti": [7, 24, 27, 58, 61], "unsupervis": [7, 9, 12, 24, 27, 56, 58, 61], "dougla": [7, 24, 27, 58, 61], "object": [7, 12, 15, 16, 24, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61], "kauri": [7, 24, 27, 57, 58, 61], "auto_examples_python": 7, "zip": 7, "auto_examples_jupyt": 7, "improv": [9, 50, 51, 52, 53, 54, 60], "enforc": 9, "loos": 9, "equival": [9, 15, 16, 26, 37], "ensembl": 9, "learn": [9, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "seek": [9, 21], "agreeanc": 9, "describ": [9, 28, 43, 50, 51, 52, 53, 54, 57], "ratio": 9, "were": [9, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "togeth": [9, 28], "provid": [9, 59, 60, 62], "Then": [9, 11], "ensur": [9, 12, 28, 50, 51, 52, 53, 54], "remain": [9, 50, 51, 52, 53, 54, 58], "apart": [9, 12, 14], "while": 9, "satisfi": [9, 28, 56], "try": [9, 15, 19, 59], "its": [9, 16, 55, 58, 60, 62], "level": [9, 19], "supervis": 9, "input": [9, 14, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62], "advantag": 9, "requir": [9, 58, 59, 62], "knowledg": 9, "rather": [9, 21], "idea": 9, "whether": [9, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "start": [9, 11, 12, 16, 21, 50, 51, 52, 53, 54, 59], "categoricalwasserstein": [9, 13, 47, 48], "linearmmd": [9, 41, 42, 43], "add_mlcl_constraint": [9, 58], "itertool": [9, 13], "challeng": [9, 11], "mean": [9, 11, 12, 13, 14, 16, 18, 29, 31, 32, 37], "fit": [9, 11, 13, 16, 17, 18, 19, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60], "sever": [9, 60], "variou": [9, 50, 51, 52, 53, 54], "all_model": 9, "n_cluster": [9, 11, 12, 13, 14, 16, 17, 18, 19, 25, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "cosin": [9, 37, 39, 40, 42, 44, 46, 47, 49, 51, 53, 56], "sigmoid": [9, 12, 37, 40, 44, 47, 51, 53, 56], "rbf": [9, 11, 16, 37, 40, 44, 47, 51, 53, 56], "sub": 9, "11914066061963555": 9, "11176053892324672": 9, "11421905413971052": 9, "22472124150185058": 9, "e": [9, 29, 30, 34, 35, 36, 37, 38, 39, 59, 60], "same": [9, 12, 18, 21, 28, 62], "consensus_matrix": 9, "zero": [9, 11, 58], "j": [9, 13], "combinations_with_replac": 9, "r": [9, 34, 35, 36, 37, 38, 39, 53, 54, 60], "int": [9, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "precomput": [9, 13, 17, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "notic": [9, 26], "api": [9, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60], "although": 9, "superflu": 9, "consensus_model": 9, "y_pred_consensu": 9, "predict_proba": [9, 19, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "what": 9, "10728640074310927": 9, "simul": 9, "extrapol": 9, "real": 9, "life": 9, "situat": 9, "would": [9, 16, 17, 59], "emphas": 9, "more": [9, 60, 62], "field": 9, "expert": 9, "most": [9, 62], "confid": 9, "sorted_confidence_sampl": 9, "sort": 9, "kei": 9, "lambda": 9, "revers": 9, "must_link": [9, 28], "unsure_sample_pair": 9, "combin": [9, 13, 37, 39, 40, 42, 44, 46, 47, 49, 51, 53, 56, 58], "next": 9, "cannot_link": [9, 28], "over": [9, 29], "base_model": 9, "line": 9, "mlcl_consensus_model": 9, "y_pred_mlcl_consensu": 9, "16976700304809886": 9, "consensus_ord": 9, "argsort": 9, "imshow": 9, "cmap": [9, 11, 14, 17], "seismic": 9, "035": [9, 10, 61], "plot_semi_supervised_consensu": [9, 10, 61], "09": [10, 23, 61], "mlcl": [10, 61], "consensu": [10, 61], "centr": 11, "algorithm": [11, 16, 17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62], "unless": 11, "adequ": [11, 13], "spectralclust": 11, "gaussianmixtur": 11, "make_circl": [11, 16], "nois": [11, 16, 17], "factor": [11, 16, 28, 50, 51, 52, 53, 54, 56], "normalis": [11, 16], "std": [11, 16], "ddof": [11, 16], "set": [11, 28, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62], "covari": [11, 13, 18, 31], "type": [11, 58, 60], "spheric": 11, "lighten": 11, "correspond": [11, 37, 39, 40, 42, 44, 46, 47, 49, 51, 53, 56], "symmetri": 11, "eas": 11, "job": 11, "initialis": [11, 12, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "actual": [11, 56], "gm": 11, "covariance_typ": 11, "means_init": 11, "1000": [11, 12, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "spectral": [11, 17], "sc": 11, "multi": [11, 62], "perceptron": [11, 62], "becaus": [11, 13, 17, 50, 51, 52, 53, 54], "incap": 11, "euclidean_gemini": 11, "mlpmmd": [11, 15, 45, 46], "comput": [11, 12, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62], "rbf_gemini": 11, "grid": [11, 14], "x_val": [11, 14, 17, 19], "linspac": [11, 14, 17, 19], "min": [11, 17, 19], "num": [11, 14, 17, 19], "y_val": [11, 14, 17, 19], "xx": [11, 14, 17, 19], "yy": [11, 14, 17, 19], "meshgrid": [11, 14, 17, 19], "grid_input": [11, 14, 17, 19], "c_": [11, 14, 17, 19], "ravel": [11, 14, 17, 19], "contourf": [11, 14, 17, 19], "reshap": [11, 12, 14, 17, 19], "cm": [11, 17, 26], "labels_": [11, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "32": [11, 23, 61], "180": [11, 23, 61], "plot_circl": [11, 23, 61], "It": [12, 28, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 60, 62], "possibl": [12, 28, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62], "wish": 12, "avail": [12, 41, 45, 48, 52, 55, 60], "among": [12, 55], "choic": [12, 56, 62], "To": [12, 13, 17, 41, 45, 48, 52, 55], "framework": [12, 43], "defin": [12, 17, 37, 39], "still": 12, "bia": [12, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "less": [12, 17], "activ": [12, 55, 58], "tell": 12, "written": [12, 59], "p_": [12, 49, 60, 62], "theta": [12, 60, 62], "text": [12, 34, 35, 36, 37, 38], "discriminativemodel": [12, 62], "draw_gmm": [12, 13, 18, 58], "binaryregress": 12, "parent": 12, "__init__": [12, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "self": [12, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "solver": [12, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "adam": [12, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "none": [12, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "verbos": [12, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "fals": [12, 13, 17, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "super": 12, "_init_param": [12, 62], "state": 12, "in_threshold": 12, "sqrt": 12, "theta_": [12, 47, 48, 49], "uniform": 12, "_get_weight": [12, 62], "For": [12, 50, 51, 52, 53, 54, 60, 62], "optimis": [12, 13, 16, 18, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "need": [12, 21, 37, 39, 58], "insid": 12, "list": [12, 28, 31, 50, 51, 52, 53, 54, 55], "_infer": [12, 62], "retain": 12, "output": [12, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62], "you": [12, 59, 60, 62], "must": [12, 28, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 56, 58], "probabl": [12, 13, 19, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "vector": [12, 28, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "y_pred_logit": 12, "matmul": [12, 21], "exp": [12, 13], "flag": 12, "allow": [12, 59], "store": 12, "intermedi": 12, "backpropag": 12, "_y_sigmoid": 12, "As": 12, "duplic": 12, "opposit": 12, "column": 12, "up": [12, 56], "each": [12, 13, 16, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "row": 12, "otherwis": [12, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "work": [12, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "_compute_grad": 12, "ha": [12, 55, 59, 60], "extens": [12, 59, 62], "appli": [12, 28], "And": 12, "finish": 12, "theta_grad": 12, "t": [12, 13, 14, 21, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "order": [12, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "match": [12, 13, 21, 55], "goal": 12, "maximis": [12, 19, 25, 28, 40, 42, 43, 44, 46, 47, 48, 49, 55, 60], "common": 12, "minimis": [12, 28], "neg": 12, "ey": [12, 13, 18, 21], "ones": [12, 13, 18, 37, 39, 40, 42, 44, 46, 47, 49, 51, 53, 56], "custom_model": 12, "wasserstein_ovo": [12, 41, 45, 48, 52, 55], "fit_predict": [12, 13, 14, 16, 17, 18, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "binari": [12, 57], "959": [12, 23, 61], "plot_custom_model": [12, 23, 61], "simplifi": [13, 36], "version": [13, 34, 35, 37, 38, 39, 50, 53, 58, 60, 62], "latent": 13, "posit": [13, 18, 33], "procedur": 13, "mani": [13, 59], "determin": [13, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "distanc": [13, 17, 21, 34, 35, 36, 37, 38, 39, 42, 46, 49, 58, 60, 62], "associ": [13, 16, 18, 25], "note": [13, 17, 56, 62], "given": [13, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62], "ident": 13, "matrix": [13, 17, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "scipi": [13, 17, 59], "csgraph": [13, 17], "pairwise_dist": [13, 17, 62], "euclidean": [13, 17, 21, 39, 41, 42, 45, 46, 48, 49, 52, 55, 62], "edge_prob": 13, "adjacency_matrix": 13, "adjac": [13, 17], "symmetr": [13, 34, 35, 36, 37, 38, 39], "shortest": [13, 17], "floyd_warshal": [13, 17], "direct": [13, 17], "unweight": [13, 17], "replac": [13, 17, 21], "inf": [13, 17], "isinf": [13, 17], "specifi": [13, 21, 50, 51, 52, 53, 54, 58], "custom": [13, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58], "pass": [13, 17, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "argument": [13, 37, 39, 40, 42, 44, 46, 47, 49, 51, 53, 56, 58], "1789": [13, 18], "dummi": 13, "unnecessari": 13, "There": 13, "index": 13, "node_i": 13, "node_j": 13, "grai": 13, "linewidth": 13, "ari_scor": [13, 16, 18], "gemini_scor": [13, 16, 18], "3f": [13, 16, 18, 21], "977": 13, "141": 13, "118": [13, 23, 61], "plot_graph_node_clust": [13, 23, 61], "retak": [14, 17], "experi": [14, 17], "origin": [14, 17, 31, 59, 60, 62], "paper": [14, 17, 43, 62], "want": [14, 17, 62], "incorpor": [14, 41, 45, 48, 52, 55], "freedom": [14, 32, 33], "seem": 14, "outlier": 14, "unlik": 14, "done": [14, 16, 58], "linearwasserstein": [14, 40, 41, 43], "gstm": [14, 58], "far": 14, "df": [14, 32, 33], "zz": [14, 17, 19], "reds_r": 14, "xlim": 14, "371": [14, 23, 61], "plot_gstm": [14, 23, 61], "environ": [15, 19], "pleas": [15, 19, 56, 59, 60], "rerun": [15, 19], "cell": [15, 19], "html": [15, 19], "represent": [15, 19, 44, 45, 46, 53, 54], "trust": [15, 19], "On": [15, 19, 50, 52, 53, 54], "github": [15, 19, 59], "unabl": [15, 19], "render": [15, 19], "load": 15, "page": [15, 19], "nbviewer": [15, 19], "org": [15, 19], "mlpmmdmlpmmd": 15, "798": [15, 23, 61], "plot_intro_mlp_mmd": [15, 23, 61], "sinc": 16, "mode": [16, 50, 51, 52, 53, 54, 58, 62], "directli": [16, 47, 48, 49, 62], "behav": 16, "categoricalmmd": [16, 18, 48, 49], "000": 16, "330": 16, "29": [16, 23, 60, 61], "842": [16, 23, 61], "plot_kernel_kmean": [16, 23, 61], "face": 17, "trick": 17, "mlpwasserstein": [17, 44, 45], "abl": [17, 52], "make_moon": 17, "2023": [17, 60], "edg": 17, "than": [17, 50, 51, 52, 53, 54, 60], "quantil": 17, "384": [17, 23, 61], "plot_moon_clust": [17, 23, 61], "illustr": 18, "alwai": 18, "975": 18, "328": 18, "438": [18, 23, 61], "plot_nonparametric_clust": [18, 23, 61], "mutual": [19, 32, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60], "kraus": [19, 43], "2010": [19, 43], "under": [19, 50, 51, 52, 53, 54, 59], "ell_2": [19, 28, 43], "reg": [19, 43], "rimrim": 19, "u": [19, 59], "grad": 19, "grid_pr": 19, "isol": [19, 58], "4486538478231719": 19, "345": [19, 23, 61], "plot_rim": [19, 23, 61], "anoth": [21, 62], "preprocess": 21, "linear_model": [21, 26], "naive_bay": 21, "load_breast_canc": 21, "return_x_i": [21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 60], "robustscal": 21, "differ": [21, 25, 26, 50, 51, 52, 53, 54, 55, 56], "breast": 21, "cancer": 21, "l2": [21, 39, 42, 46, 49], "clf1": 21, "logisticregress": 21, "p_y_given_x_1": 21, "naiv": 21, "bay": [21, 60], "hypothes": [21, 59], "clf2": 21, "gaussiannb": 21, "p_y_given_x_2": 21, "both": [21, 58, 62], "wassersteingemini": [21, 58], "v": [21, 34, 35, 37, 38, 39, 60], "wasserstein_scor": 21, "affin": [21, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "wasserstein": [21, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 62], "compute_affin": [21, 34, 35, 36, 37, 38, 39], "clf1_score": 21, "clf2_score": 21, "878": 21, "005": 21, "By": [21, 62], "obtain": [21, 26], "share": 21, "y_one_hot": 21, "precomputed_dist": 21, "431": 21, "403": 21, "888": [21, 22, 61], "plot_gemini_scor": [21, 22, 61], "07": 23, "434": 23, "04": [23, 61], "08": [23, 61], "few": [25, 50, 51, 52, 53, 54], "bin": [25, 55], "per": [25, 34, 35, 36, 37, 38, 39, 55, 58], "iri": [25, 26], "load_iri": [25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 60], "target": [25, 26], "mmd_ova": [25, 41, 45, 48, 52, 54, 55, 60], "n_cut": [25, 55], "y_pred_linear": [25, 26], "474150686050238": 25, "5681159420289855": 25, "990": [25, 27, 61], "plot_douglas_exampl": [25, 27, 61], "accompanni": 26, "gain": [26, 56], "deriv": [26, 34, 35, 36, 37, 38, 39, 52, 59, 60, 62], "squar": [26, 34], "print_kauri_tre": 26, "limit": [26, 56], "depth": [26, 56], "simplic": 26, "max_clust": [26, 56], "max_depth": [26, 56], "9459": 26, "167022308022": 26, "additive_chi2_model": 26, "additive_chi2": [26, 37, 40, 44, 47, 51, 53, 56], "y_pred_additive_chi2": 26, "22": [26, 60], "43532371061057": 26, "7172759168337549": 26, "8680377279943841": 26, "feature_nam": [26, 57], "petal": 26, "width": 26, "length": [26, 50, 51, 52, 53, 54], "239": [26, 27, 61], "plot_kauri_exampl": [26, 27, 61], "12": [27, 34, 35, 36, 37, 38, 39], "230": 27, "tree": [27, 58, 61], "gemini_model": 28, "contraint": 28, "respect": [28, 29, 52, 58, 60], "fulli": 28, "mlp___": 28, "linear___": 28, "categorical___": 28, "involv": [28, 41, 45, 48, 52, 55, 60], "ndarrai": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "n_constraint": 28, "default": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62], "being": 28, "i1": 28, "j1": 28, "iN": 28, "jn": 28, "If": [28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62], "float": [28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "hyperparamet": [28, 43, 55], "tupl": [29, 30, 31], "compon": [29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "dimens": 29, "excess": 29, "taken": [29, 30], "section": [29, 30], "control": [29, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "randomst": [29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "instanc": [29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "creation": [29, 30, 31, 32, 33], "reproduc": [29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "across": [29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "multipl": [29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "gmm": [29, 30, 31, 32], "drawn": [29, 30, 31, 32, 33, 60], "refer": [29, 30, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "g": [29, 30], "martin": [29, 30], "magniett": [29, 30], "m": [29, 30, 32, 53, 54, 59, 60], "l": [29, 30, 32, 53, 54, 59, 60], "maugi": [29, 30], "rabusseau": [29, 30], "rafteri": [29, 30], "regular": [29, 30, 43], "approach": [29, 30], "journal": [29, 30, 60], "de": [29, 30], "la": [29, 30], "societ": [29, 30], "francais": [29, 30], "statistiqu": [29, 30], "155": [29, 30], "57": [29, 30], "71": [29, 30], "2000": 30, "linearli": 30, "14": 30, "element": 31, "d": [31, 33, 55, 59, 60], "proport": 31, "500": 32, "articl": 32, "ohl": [32, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "mattei": [32, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "bouveyron": [32, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "harchaoui": [32, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "w": [32, 34, 35, 36, 37, 38, 39, 59, 60], "leclercq": [32, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "droit": [32, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "precioso": [32, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60], "2022": [32, 59, 60], "octob": [32, 59], "generalis": [32, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60], "advanc": [32, 59, 60], "process": [32, 59, 60], "system": [32, 59, 60], "multivari": [33, 58], "semi": 33, "definit": [33, 58, 60], "spread": 33, "epsilon": [34, 35, 36, 37, 38, 39], "helling": 34, "mathcal": [34, 35, 36, 37, 38, 39], "mathbb": [34, 35, 36, 37, 38, 39, 60], "_": [34, 35, 36, 37, 38, 39, 60], "sim": [34, 35, 36, 37, 38, 39, 60], "h": [34, 59, 60], "y_a": [34, 35, 37, 38, 39], "y_b": [34, 35, 37, 38, 39], "bool": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "precis": [34, 35, 36, 37, 38, 39], "clip": [34, 35, 36, 37, 38, 39], "avoid": [34, 35, 36, 37, 38, 39], "numer": [34, 35, 36, 37, 38, 39], "instabl": [34, 35, 36, 37, 38, 39], "unus": [34, 35, 36, 38], "diverg": [34, 35, 36, 38], "return_grad": [34, 35, 36, 37, 38, 39], "context": [34, 35, 36, 37, 38, 39], "either": [34, 35, 36, 37, 38, 39, 50, 51, 52, 53, 54, 56], "result": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "nabla_": [34, 35, 36, 37, 38, 39], "kl": [35, 36], "classic": [35, 36, 43], "complet": [36, 59], "shortcut": 36, "klgemini": [36, 58], "kernel_param": [37, 40, 44, 47, 51, 53, 56], "discrep": 37, "kappa": 37, "chi2": [37, 40, 44, 47, 51, 53, 56], "poli": [37, 40, 44, 47, 51, 53, 56], "polynomi": [37, 40, 44, 47, 51, 53, 56], "laplacian": [37, 40, 44, 47, 51, 53, 56], "dict": [37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "keyword": [37, 39, 40, 42, 44, 46, 47, 49, 51], "ignor": [37, 39, 50, 51, 52, 53, 54], "callabl": [37, 39], "case": [37, 39, 62], "variat": [38, 50, 52, 53, 54, 56], "tv": 38, "metric_param": [39, 42, 46, 49], "delta": [39, 55], "l1": [39, 42, 46, 49], "manhattan": [39, 42, 46, 49], "cityblock": [39, 42, 46, 49], "paired_dist": [39, 42, 46, 49], "form": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "neuron": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "epoch": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "singl": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "initi": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "rate": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "step": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "updat": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "sgd": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "stochast": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "kingma": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "diederik": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "jimmi": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "ba": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "batch": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "whole": [40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54], "messag": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "stdout": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "dictionari": [40, 42, 44, 46, 47, 49, 51], "chosen": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "linearmodel": [40, 42, 43, 58], "loui": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "pierr": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "alexandr": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "charl": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "warith": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "micka\u00ebl": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "arnaud": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "freder": [40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "7048160115136364": 40, "attribut": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "w_": [40, 41, 42, 43, 50, 51, 52], "b_": [40, 41, 42, 43, 50, 51, 52], "bias": [40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54], "optimiser_": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "adamoptim": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "sgdoptim": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "n_iter_": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "took": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "converg": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "present": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62], "convent": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "estim": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "get_gemini": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "get_param": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "deep": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "subobject": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "param": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "name": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "membership": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "after": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "closest": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "seen": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "test": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "set_param": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "nest": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "pipelin": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "latter": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "__": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "str": [41, 45, 48, 52, 55], "mmd_ovo": [41, 45, 48, 52, 55], "wasserstein_ova": [41, 45, 48, 52, 55], "available_gemini": [41, 45, 48, 52, 55], "also": [41, 45, 48, 52, 55, 59], "7550724287639448": 41, "710399298634854": 42, "n_features_in": [42, 43], "maxim": [43, 50, 51, 52, 53, 54, 56], "ryan": 43, "gome": 43, "andrea": 43, "pietro": 43, "perona": 43, "43904857546947995": 43, "n_hidden_dim": [44, 45, 46, 53, 54], "mlpmodel": [44, 46, 58, 60], "7592155845461646": 44, "w1_": [44, 45, 46, 53, 54], "b1_": [44, 45, 46, 53, 54], "w2_": [44, 45, 46, 53, 54], "b2_": [44, 45, 46, 53, 54], "h_": [44, 45, 46, 53, 54], "6325592616409484": 45, "7636482655127903": 46, "x_i": [47, 48, 49], "ki": [47, 48, 49], "contrarili": [47, 48, 49], "part": [47, 48, 49], "doe": [47, 48, 49], "support": [47, 48, 49, 58, 59], "categoricalmodel": [47, 49, 58], "tailor": [47, 48, 49], "211726751861832": 47, "logits_": [47, 48, 49], "logit": [47, 48, 49, 55], "6577369504469952": 48, "3555482569532074": 49, "vanilla": [50, 52, 53, 54], "bring": [50, 52, 53, 54, 60], "via": [50, 52], "proxim": [50, 52, 53, 54, 58], "repres": [50, 51, 52, 53, 54], "typic": [50, 51, 52, 53, 54], "enter": [50, 51, 52, 53, 54], "alon": [50, 51, 52, 53, 54], "scheme": [50, 51, 52, 53, 54], "sparselinearmodel": [50, 51, 58, 62], "joint": [50, 51, 52, 53, 54, 60, 62], "youyong": 50, "yue": 50, "deng": 50, "qionghai": 50, "dai": 50, "5812412917247887": 50, "groups_": [50, 51, 52, 53, 54], "explicit": [50, 51, 52, 53, 54], "retriev": [50, 51, 52, 53, 54], "ind": [50, 51, 52, 53, 54], "alpha_multipli": [50, 51, 52, 53, 54], "min_featur": [50, 51, 52, 53, 54], "restore_best_weight": [50, 51, 52, 53, 54], "early_stopping_factor": [50, 51, 52, 53, 54], "99": [50, 51, 52, 53, 54], "max_pati": [50, 51, 52, 53, 54], "unfold": [50, 51, 52, 53, 54], "geometr": [50, 51, 52, 53, 54], "amount": [50, 51, 52, 53, 54], "histori": [50, 51, 52, 53, 54], "kept": [50, 51, 52, 53, 54], "certain": [50, 51, 52, 53, 54], "percentag": [50, 51, 52, 53, 54], "reduct": [50, 51, 52, 53, 54], "made": [50, 51, 52, 53, 54, 62], "incompat": [50, 51, 52, 53, 54], "dynam": [50, 51, 52, 53, 54, 58], "retrain": [50, 51, 52, 53, 54], "greater": [50, 51, 52, 53, 54], "stop": [50, 51, 52, 53, 54], "minim": [50, 51, 52, 53, 54], "deem": [50, 51, 52, 53, 54], "offer": [50, 51, 52, 53, 54], "good": [50, 51, 52, 53, 54, 60], "restor": [50, 51, 52, 53, 54], "incompar": [50, 51, 52, 53, 54], "natur": [50, 51, 52, 53, 54], "when": [50, 51, 52, 53, 54], "beyond": [50, 51, 52, 53, 54], "upgrad": [50, 51, 52, 53, 54], "too": [50, 51, 52, 53, 54], "earli": [50, 51, 52, 53, 54], "wait": [50, 51, 52, 53, 54], "without": [50, 51, 52, 53, 54, 59, 60], "befor": [50, 51, 52, 53, 54], "sequenti": [50, 51, 52, 53, 54], "group_penalti": [50, 51, 52, 53, 54], "7040618744746618": 51, "adapt": 52, "_compute_gemini": 52, "sparsemlpmodel": [52, 53, 58], "skip": [53, 54, 62], "connect": [53, 54, 62], "inspir": [53, 54, 60, 62], "lassonet": [53, 54, 60, 62], "lemhadri": [53, 54, 60], "2021": [53, 54, 60], "hierarchi": [53, 54], "coeffici": [53, 54], "rel": [53, 54, 55], "strength": [53, 54], "ruan": [53, 54, 60], "abraham": [53, 54, 60], "tibshirani": [53, 54, 60], "766421183641077": 53, "w_skip_": [53, 54], "feature_mask": 55, "temperatur": 55, "dndt": 55, "leverag": 55, "appris": 55, "split": [55, 56], "learnabl": 55, "wise": 55, "soft": 55, "recombin": 55, "those": [55, 56], "cut": 55, "boolean": 55, "leaf": [55, 56], "high": 55, "smoothen": 55, "wherea": 55, "closer": 55, "dirac": [55, 56], "explor": [55, 56], "find_active_point": 55, "calcul": 55, "point": 55, "fall": 55, "within": 55, "bound": 55, "contribut": [55, 59], "active_point": 55, "integ": 55, "min_samples_split": 56, "min_samples_leaf": 56, "max_featur": 56, "max_leav": 56, "reward": 56, "ideal": 56, "new": [56, 58], "refurbish": 56, "them": 56, "alreadi": 56, "exist": 56, "leav": 56, "least": 56, "logic": 56, "randomli": 56, "upon": 56, "put": 56, "tree_": 56, "_tree": 56, "repeatedli": 56, "choos": 56, "reach": 56, "onc": 56, "special": [56, 59], "henc": [56, 60], "constant": 56, "kauri_tre": 57, "ad": [58, 62], "simpli": 58, "compat": [58, 59], "No": 58, "longer": 58, "hellingergemini": 58, "tvgemini": 58, "parametris": 58, "string": 58, "dedic": [58, 59], "fuse": [58, 62], "mmdova": 58, "mmdovo": 58, "mmdgemini": 58, "wassersteinova": 58, "wassersteinovo": 58, "fix": 58, "mistak": 58, "cart": 58, "experiment": 58, "minor": 58, "document": 58, "better": 58, "scikit": [58, 59, 60], "regard": 58, "check": [58, 59, 60], "abcmeta": 58, "valid": 58, "problem": 58, "retrocompat": 58, "1d": 58, "extern": 58, "usag": [58, 62], "etc": 58, "spar": 58, "multivariate_student_t": 58, "divis": 58, "thank": 59, "realli": 59, "pleasur": 59, "theori": [59, 60], "user": [59, 60], "tool": 59, "http": 59, "io": 59, "main": 59, "com": 59, "instruct": 59, "pip": 59, "librari": [59, 62], "coupl": 59, "scientif": 59, "pot": 59, "repo": 59, "git": 59, "clone": 59, "cd": 59, "cite": 59, "neurip": 59, "inproceed": 59, "ohl2022generalis": 59, "author": 59, "micka": 59, "booktitl": 59, "editor": 59, "alic": 59, "oh": [59, 60], "alekh": 59, "agarw": [59, 60], "daniel": 59, "belgrav": [59, 60], "kyunghyun": 59, "cho": [59, 60], "year": 59, "url": 59, "openreview": 59, "net": 59, "forum": 59, "id": 59, "0oy3pia": 59, "adp": 59, "been": 59, "french": 59, "govern": 59, "3ia": 59, "c\u00f4te": 59, "azur": 59, "invest": 59, "futur": 59, "project": 59, "manag": 59, "nation": 59, "research": [59, 60], "agenc": 59, "anr": 59, "19": 59, "p3ia": 59, "0002": 59, "franc": 59, "canada": 59, "fund": 59, "ffcr": 59, "partli": 59, "eu": 59, "horizon": 59, "2020": 59, "ai4media": 59, "contract": 59, "951911": 59, "jhonatan": 59, "torr": 59, "hi": 59, "insight": 59, "develop": 59, "short": 60, "descript": 60, "hint": 60, "about": 60, "detail": 60, "public": 60, "stand": 60, "novel": 60, "measur": 60, "custer": 60, "right": 60, "y_1": 60, "y_2": 60, "theorem": 60, "easili": 60, "tractabl": 60, "cane": 60, "valuat": 60, "assumpt": 60, "At": 60, "moment": 60, "report": 60, "fewer": 60, "practic": 60, "merg": 60, "loss": 60, "mainli": 60, "feel": 60, "interest": 60, "ed": 60, "machin": 60, "127": 60, "doi": 60, "48550": 60, "arxiv": 60, "2302": 60, "03391": 60, "37": 61, "682": 61, "17": 61, "constructor": 62, "achiev": 62, "manner": 62, "pairwise_kernel": 62, "forc": 62, "flexibl": 62, "yet": 62, "express": 62, "enough": 62, "term": 62, "simpler": 62, "induc": 62, "rewrit": 62, "includ": 62}, "objects": {"gemclus": [[28, 0, 1, "", "add_mlcl_constraint"]], "gemclus.data": [[29, 0, 1, "", "celeux_one"], [30, 0, 1, "", "celeux_two"], [31, 0, 1, "", "draw_gmm"], [32, 0, 1, "", "gstm"], [33, 0, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[34, 1, 1, "", "HellingerGEMINI"], [35, 1, 1, "", "KLGEMINI"], [36, 1, 1, "", "MI"], [37, 1, 1, "", "MMDGEMINI"], [38, 1, 1, "", "TVGEMINI"], [39, 1, 1, "", "WassersteinGEMINI"]], "gemclus.gemini.HellingerGEMINI": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "compute_affinity"], [34, 2, 1, "", "evaluate"]], "gemclus.gemini.KLGEMINI": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "compute_affinity"], [35, 2, 1, "", "evaluate"]], "gemclus.gemini.MI": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "compute_affinity"], [36, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDGEMINI": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "compute_affinity"], [37, 2, 1, "", "evaluate"]], "gemclus.gemini.TVGEMINI": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "compute_affinity"], [38, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinGEMINI": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "compute_affinity"], [39, 2, 1, "", "evaluate"]], "gemclus.linear": [[40, 1, 1, "", "LinearMMD"], [41, 1, 1, "", "LinearModel"], [42, 1, 1, "", "LinearWasserstein"], [43, 1, 1, "", "RIM"]], "gemclus.linear.LinearMMD": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "fit"], [40, 2, 1, "", "fit_predict"], [40, 2, 1, "", "get_gemini"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "predict"], [40, 2, 1, "", "predict_proba"], [40, 2, 1, "", "score"], [40, 2, 1, "", "set_params"]], "gemclus.linear.LinearModel": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "fit_predict"], [41, 2, 1, "", "get_gemini"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "predict"], [41, 2, 1, "", "predict_proba"], [41, 2, 1, "", "score"], [41, 2, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "fit_predict"], [42, 2, 1, "", "get_gemini"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "predict"], [42, 2, 1, "", "predict_proba"], [42, 2, 1, "", "score"], [42, 2, 1, "", "set_params"]], "gemclus.linear.RIM": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "fit_predict"], [43, 2, 1, "", "get_gemini"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "predict"], [43, 2, 1, "", "predict_proba"], [43, 2, 1, "", "score"], [43, 2, 1, "", "set_params"]], "gemclus.mlp": [[44, 1, 1, "", "MLPMMD"], [45, 1, 1, "", "MLPModel"], [46, 1, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "fit_predict"], [44, 2, 1, "", "get_gemini"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "predict_proba"], [44, 2, 1, "", "score"], [44, 2, 1, "", "set_params"]], "gemclus.mlp.MLPModel": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "fit_predict"], [45, 2, 1, "", "get_gemini"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "predict"], [45, 2, 1, "", "predict_proba"], [45, 2, 1, "", "score"], [45, 2, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "fit_predict"], [46, 2, 1, "", "get_gemini"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "predict_proba"], [46, 2, 1, "", "score"], [46, 2, 1, "", "set_params"]], "gemclus.nonparametric": [[47, 1, 1, "", "CategoricalMMD"], [48, 1, 1, "", "CategoricalModel"], [49, 1, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "fit_predict"], [47, 2, 1, "", "get_gemini"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "predict_proba"], [47, 2, 1, "", "score"], [47, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalModel": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "fit_predict"], [48, 2, 1, "", "get_gemini"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "predict_proba"], [48, 2, 1, "", "score"], [48, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "fit_predict"], [49, 2, 1, "", "get_gemini"], [49, 2, 1, "", "get_params"], [49, 2, 1, "", "predict"], [49, 2, 1, "", "predict_proba"], [49, 2, 1, "", "score"], [49, 2, 1, "", "set_params"]], "gemclus.sparse": [[50, 1, 1, "", "SparseLinearMI"], [51, 1, 1, "", "SparseLinearMMD"], [52, 1, 1, "", "SparseLinearModel"], [53, 1, 1, "", "SparseMLPMMD"], [54, 1, 1, "", "SparseMLPModel"]], "gemclus.sparse.SparseLinearMI": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "fit_predict"], [50, 2, 1, "", "get_gemini"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "get_selection"], [50, 2, 1, "", "path"], [50, 2, 1, "", "predict"], [50, 2, 1, "", "predict_proba"], [50, 2, 1, "", "score"], [50, 2, 1, "", "set_params"]], "gemclus.sparse.SparseLinearMMD": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "fit_predict"], [51, 2, 1, "", "get_gemini"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "get_selection"], [51, 2, 1, "", "path"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "predict_proba"], [51, 2, 1, "", "score"], [51, 2, 1, "", "set_params"]], "gemclus.sparse.SparseLinearModel": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "fit_predict"], [52, 2, 1, "", "get_gemini"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "get_selection"], [52, 2, 1, "", "path"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "predict_proba"], [52, 2, 1, "", "score"], [52, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "fit_predict"], [53, 2, 1, "", "get_gemini"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "get_selection"], [53, 2, 1, "", "path"], [53, 2, 1, "", "predict"], [53, 2, 1, "", "predict_proba"], [53, 2, 1, "", "score"], [53, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPModel": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "fit_predict"], [54, 2, 1, "", "get_gemini"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "get_selection"], [54, 2, 1, "", "path"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_proba"], [54, 2, 1, "", "score"], [54, 2, 1, "", "set_params"]], "gemclus.tree": [[55, 1, 1, "", "Douglas"], [56, 1, 1, "", "Kauri"], [57, 0, 1, "", "print_kauri_tree"]], "gemclus.tree.Douglas": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "find_active_points"], [55, 2, 1, "", "fit"], [55, 2, 1, "", "fit_predict"], [55, 2, 1, "", "get_gemini"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "predict"], [55, 2, 1, "", "predict_proba"], [55, 2, 1, "", "score"], [55, 2, 1, "", "set_params"]], "gemclus.tree.Kauri": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "fit"], [56, 2, 1, "", "fit_predict"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "predict"], [56, 2, 1, "", "score"], [56, 2, 1, "", "set_params"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"gemclu": [0, 12, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "api": 0, "score": [0, 7, 20, 21], "gemini": [0, 7, 15, 16, 20, 21, 34, 35, 36, 37, 38, 39, 59, 60, 62], "cluster": [0, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 59, 60], "model": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26], "dens": 0, "nonparametr": [0, 13, 47, 48, 49], "spars": [0, 2, 3, 4, 50, 51, 52, 53, 54], "tree": [0, 7, 24, 25, 26, 55, 56, 57], "constraint": [0, 9], "dataset": [0, 2, 3, 4, 5, 9, 11, 16, 19, 21, 25, 26], "gener": [0, 7, 14, 15, 17], "featur": [1, 2, 3, 4, 5, 7, 60], "select": [1, 2, 3, 4, 5, 7, 60], "us": [2, 3, 4, 26, 59], "mmd": [2, 4, 15], "ovo": 2, "logist": [2, 3, 19], "regress": [2, 3, 19], "load": [2, 3, 4, 5, 9, 19, 21, 25, 26], "simpl": [2, 3, 4, 5, 19, 21], "synthet": [2, 3, 4, 5, 19], "train": [2, 3, 4, 5, 11, 13, 14, 16, 17, 18, 19, 21], "path": [2, 4, 5], "result": [2, 4, 5, 9, 12], "final": [2, 3, 4, 13, 14, 15, 16, 17, 18, 19], "linear": [3, 5, 26, 40, 41, 42, 43], "mi": [3, 36], "ova": 4, "mlp": [4, 15, 44, 45, 46], "group": 5, "comput": [6, 10, 13, 17, 22, 23, 27, 61], "time": [6, 10, 22, 23, 27, 61], "exampl": [7, 14, 15, 62], "discrimin": [7, 12, 59, 60, 62], "consensu": [7, 8, 9], "link": 9, "sampl": [9, 11, 13, 16, 17, 18], "pair": 9, "multipl": 9, "build": [9, 12, 25, 26], "matrix": 9, "creat": [9, 12, 13, 15, 25, 26], "optimis": 9, "add": 9, "must": 9, "cannot": 9, "plot": [9, 12, 15], "compar": 11, "circl": 11, "kernel": [11, 16, 26], "chang": [11, 58], "draw": [11, 13, 16, 17, 18], "displai": 11, "predict": 11, "decis": [11, 14, 17], "boundari": [11, 14, 17], "extend": 12, "your": 12, "own": 12, "custom": 12, "test": 12, "fit": [12, 15, 25], "procedur": 12, "graph": 13, "node": 13, "from": [13, 16, 18], "gmm": [13, 18], "edg": 13, "pre": [13, 17], "specif": [13, 17], "metric": [13, 17], "between": [13, 17], "map": 14, "mixtur": 14, "gaussian": 14, "low": 14, "degre": 14, "student": 14, "distribut": [14, 62], "data": [14, 15, 29, 30, 31, 32, 33], "an": [15, 26], "introduc": 15, "kmean": [16, 26], "circular": 16, "two": [17, 21], "interlac": 17, "moon": 17, "non": 18, "parametr": 18, "rim": [19, 43], "ani": 21, "real": 21, "supervis": 21, "differenti": 25, "unsupervis": [25, 26], "dougla": [25, 55], "object": 26, "kauri": [26, 56], "first": 26, "second": 26, "addit": 26, "chi2": 26, "evalu": 26, "perform": 26, "visualis": 26, "structur": 26, "add_mlcl_constraint": 28, "celeux_on": 29, "celeux_two": 30, "draw_gmm": 31, "gstm": 32, "multivariate_student_t": 33, "hellingergemini": 34, "klgemini": 35, "mmdgemini": 37, "tvgemini": 38, "wassersteingemini": 39, "linearmmd": 40, "linearmodel": 41, "linearwasserstein": 42, "mlpmmd": 44, "mlpmodel": 45, "mlpwasserstein": 46, "categoricalmmd": 47, "categoricalmodel": 48, "categoricalwasserstein": 49, "sparselinearmi": 50, "sparselinearmmd": 51, "sparselinearmodel": 52, "sparsemlpmmd": 53, "sparsemlpmodel": 54, "print_kauri_tre": 57, "releas": 58, "histori": 58, "In": 58, "develop": 58, "0": 58, "2": 58, "latest": [58, 59], "1": 58, "welcom": 59, "document": 59, "content": [59, 62], "A": 59, "packag": [59, 62], "instal": 59, "offici": 59, "version": 59, "refer": [59, 60], "acknowledg": 59, "quick": 60, "start": 60, "what": [60, 62], "i": 60, "do": 60, "user": 62, "guid": 62, "which": 62, "ar": 62, "implement": 62, "avail": 62, "basic": 62}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"GEMCLUS API": [[0, "gemclus-api"]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [7, "scoring-with-gemini"], [20, "scoring-with-gemini"], [21, "scoring-with-gemini"]], "Clustering models": [[0, "clustering-models"]], "Dense models": [[0, "dense-models"]], "Nonparametric models": [[0, "nonparametric-models"]], "Sparse models": [[0, "sparse-models"]], "Tree models": [[0, "tree-models"]], "Constraints": [[0, "constraints"]], "Dataset generation": [[0, "dataset-generation"]], "Feature selection": [[1, "feature-selection"], [7, "feature-selection"]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[2, "feature-selection-using-the-sparse-mmd-ovo-logistic-regression"]], "Load a simple synthetic dataset": [[2, "load-a-simple-synthetic-dataset"], [3, "load-a-simple-synthetic-dataset"], [4, "load-a-simple-synthetic-dataset"], [5, "load-a-simple-synthetic-dataset"], [19, "load-a-simple-synthetic-dataset"]], "Train the model": [[2, "train-the-model"], [3, "train-the-model"], [4, "train-the-model"], [5, "train-the-model"], [13, "train-the-model"], [16, "train-the-model"], [17, "train-the-model"], [18, "train-the-model"], [19, "train-the-model"]], "Path results": [[2, "path-results"], [4, "path-results"], [5, "path-results"]], "Final Clustering": [[2, "final-clustering"], [3, "final-clustering"], [4, "final-clustering"], [13, "final-clustering"], [14, "final-clustering"], [16, "final-clustering"], [17, "final-clustering"], [18, "final-clustering"], [19, "final-clustering"]], "Feature selection using the Sparse Linear MI (Logistic regression)": [[3, "feature-selection-using-the-sparse-linear-mi-logistic-regression"]], "Feature selection using the Sparse MMD OvA (MLP)": [[4, "feature-selection-using-the-sparse-mmd-ova-mlp"]], "Grouped Feature selection with a linear model": [[5, "grouped-feature-selection-with-a-linear-model"]], "Computation times": [[6, "computation-times"], [10, "computation-times"], [22, "computation-times"], [23, "computation-times"], [27, "computation-times"], [61, "computation-times"]], "General examples": [[7, "general-examples"]], "Discriminative clustering": [[7, "discriminative-clustering"]], "Consensus clustering": [[7, "consensus-clustering"], [8, "consensus-clustering"]], "Trees": [[7, "trees"], [24, "trees"]], "Consensus clustering with linking constraints on sample pairs": [[9, "consensus-clustering-with-linking-constraints-on-sample-pairs"]], "Load the dataset": [[9, "load-the-dataset"], [25, "load-the-dataset"], [26, "load-the-dataset"]], "Multiple model clustering": [[9, "multiple-model-clustering"]], "Build the consensus matrix": [[9, "build-the-consensus-matrix"]], "Create the consensus clustering model": [[9, "create-the-consensus-clustering-model"]], "Optimise the results with linking constraints": [[9, "optimise-the-results-with-linking-constraints"]], "Add must-link / cannot-link constraint": [[9, "add-must-link-cannot-link-constraint"]], "Plotting the consensus matrix": [[9, "plotting-the-consensus-matrix"]], "Comparative clustering of circles dataset with kernel change": [[11, "comparative-clustering-of-circles-dataset-with-kernel-change"]], "Draw samples for the circle dataset": [[11, "draw-samples-for-the-circle-dataset"]], "Training clustering models": [[11, "training-clustering-models"]], "Display predictions and decision boundaries": [[11, "display-predictions-and-decision-boundaries"]], "Extending GemClus to build your own discriminative clustering model": [[12, "extending-gemclus-to-build-your-own-discriminative-clustering-model"]], "Create the custom model": [[12, "create-the-custom-model"]], "Test the fitting procedure and plot the clustering results": [[12, "test-the-fitting-procedure-and-plot-the-clustering-results"]], "Graph node clustering with a nonparametric model": [[13, "graph-node-clustering-with-a-nonparametric-model"]], "Draw samples from a GMM": [[13, "draw-samples-from-a-gmm"], [18, "draw-samples-from-a-gmm"]], "Create the graph edges": [[13, "create-the-graph-edges"]], "Pre-compute a specific metric between samples": [[13, "pre-compute-a-specific-metric-between-samples"], [17, "pre-compute-a-specific-metric-between-samples"]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[14, "example-of-decision-boundary-map-for-a-mixture-of-gaussian-and-low-degree-student-distributions"]], "Generate the data": [[14, "generate-the-data"]], "Train the model for clustering": [[14, "train-the-model-for-clustering"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[15, "an-introducing-example-to-clustering-with-an-mlp-and-the-mmd-gemini"]], "Generate data": [[15, "generate-data"]], "Create the MLP clustering model and fit it": [[15, "create-the-mlp-clustering-model-and-fit-it"]], "Plot the final clustering": [[15, "plot-the-final-clustering"]], "Kernel KMeans clustering with GEMINI": [[16, "kernel-kmeans-clustering-with-gemini"]], "Draw samples from a circular dataset": [[16, "draw-samples-from-a-circular-dataset"]], "Drawing a decision boundary between two interlacing moons": [[17, "drawing-a-decision-boundary-between-two-interlacing-moons"]], "Generate two interlacing moons": [[17, "generate-two-interlacing-moons"]], "Non parametric clustering": [[18, "non-parametric-clustering"]], "Simple logistic regression with RIM": [[19, "simple-logistic-regression-with-rim"]], "Scoring any model with GEMINI": [[21, "scoring-any-model-with-gemini"]], "Load a simple real dataset": [[21, "load-a-simple-real-dataset"]], "Train two supervised models": [[21, "train-two-supervised-models"]], "Supervised Scoring with GEMINI": [[21, "supervised-scoring-with-gemini"]], "Building a differentiable unsupervised tree: DOUGLAS": [[25, "building-a-differentiable-unsupervised-tree-douglas"]], "Create the douglas tree and fit it": [[25, "create-the-douglas-tree-and-fit-it"]], "Building an unsupervised tree with kernel-kmeans objective: KAURI": [[26, "building-an-unsupervised-tree-with-kernel-kmeans-objective-kauri"]], "Create a first tree using a linear kernel": [[26, "create-a-first-tree-using-a-linear-kernel"]], "Create a second tree using an additive chi2 kernel": [[26, "create-a-second-tree-using-an-additive-chi2-kernel"]], "Evaluate the performances of the model": [[26, "evaluate-the-performances-of-the-model"]], "Visualise the tree structure": [[26, "visualise-the-tree-structure"]], "gemclus.add_mlcl_constraint": [[28, "gemclus-add-mlcl-constraint"]], "gemclus.data.celeux_one": [[29, "gemclus-data-celeux-one"]], "gemclus.data.celeux_two": [[30, "gemclus-data-celeux-two"]], "gemclus.data.draw_gmm": [[31, "gemclus-data-draw-gmm"]], "gemclus.data.gstm": [[32, "gemclus-data-gstm"]], "gemclus.data.multivariate_student_t": [[33, "gemclus-data-multivariate-student-t"]], "gemclus.gemini.HellingerGEMINI": [[34, "gemclus-gemini-hellingergemini"]], "gemclus.gemini.KLGEMINI": [[35, "gemclus-gemini-klgemini"]], "gemclus.gemini.MI": [[36, "gemclus-gemini-mi"]], "gemclus.gemini.MMDGEMINI": [[37, "gemclus-gemini-mmdgemini"]], "gemclus.gemini.TVGEMINI": [[38, "gemclus-gemini-tvgemini"]], "gemclus.gemini.WassersteinGEMINI": [[39, "gemclus-gemini-wassersteingemini"]], "gemclus.linear.LinearMMD": [[40, "gemclus-linear-linearmmd"]], "gemclus.linear.LinearModel": [[41, "gemclus-linear-linearmodel"]], "gemclus.linear.LinearWasserstein": [[42, "gemclus-linear-linearwasserstein"]], "gemclus.linear.RIM": [[43, "gemclus-linear-rim"]], "gemclus.mlp.MLPMMD": [[44, "gemclus-mlp-mlpmmd"]], "gemclus.mlp.MLPModel": [[45, "gemclus-mlp-mlpmodel"]], "gemclus.mlp.MLPWasserstein": [[46, "gemclus-mlp-mlpwasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[47, "gemclus-nonparametric-categoricalmmd"]], "gemclus.nonparametric.CategoricalModel": [[48, "gemclus-nonparametric-categoricalmodel"]], "gemclus.nonparametric.CategoricalWasserstein": [[49, "gemclus-nonparametric-categoricalwasserstein"]], "gemclus.sparse.SparseLinearMI": [[50, "gemclus-sparse-sparselinearmi"]], "gemclus.sparse.SparseLinearMMD": [[51, "gemclus-sparse-sparselinearmmd"]], "gemclus.sparse.SparseLinearModel": [[52, "gemclus-sparse-sparselinearmodel"]], "gemclus.sparse.SparseMLPMMD": [[53, "gemclus-sparse-sparsemlpmmd"]], "gemclus.sparse.SparseMLPModel": [[54, "gemclus-sparse-sparsemlpmodel"]], "gemclus.tree.Douglas": [[55, "gemclus-tree-douglas"]], "gemclus.tree.Kauri": [[56, "gemclus-tree-kauri"]], "gemclus.tree.print_kauri_tree": [[57, "gemclus-tree-print-kauri-tree"]], "RELEASES": [[58, "releases"]], "History of changes": [[58, "history-of-changes"]], "In development": [[58, "in-development"]], "0.2.0 (Latest)": [[58, "latest"]], "0.1.1": [[58, "id1"]], "0.1.0": [[58, "id2"]], "0.0.2": [[58, "id3"]], "Welcome to GemClus documentation!": [[59, "welcome-to-gemclus-documentation"]], "Contents": [[59, "contents"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[59, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "Installation": [[59, "installation"]], "Official package": [[59, "official-package"]], "Latest version": [[59, "latest-version"]], "Reference": [[59, "reference"]], "Acknowledgements": [[59, "acknowledgements"]], "Quick start on gemclus": [[60, "quick-start-on-gemclus"]], "What is GEMINI": [[60, "what-is-gemini"]], "Doing discriminative clustering": [[60, "doing-discriminative-clustering"]], "Selecting features in clustering": [[60, "selecting-features-in-clustering"]], "References": [[60, "references"]], "User Guide": [[62, "user-guide"]], "Content of the package": [[62, "content-of-the-package"]], "Which GEMINIs are implemented": [[62, "which-geminis-are-implemented"]], "What discriminative distributions are available": [[62, "what-discriminative-distributions-are-available"]], "Basic examples": [[62, "basic-examples"]]}, "indexentries": {"add_mlcl_constraint() (in module gemclus)": [[28, "gemclus.add_mlcl_constraint"]], "celeux_one() (in module gemclus.data)": [[29, "gemclus.data.celeux_one"]], "celeux_two() (in module gemclus.data)": [[30, "gemclus.data.celeux_two"]], "draw_gmm() (in module gemclus.data)": [[31, "gemclus.data.draw_gmm"]], "gstm() (in module gemclus.data)": [[32, "gemclus.data.gstm"]], "multivariate_student_t() (in module gemclus.data)": [[33, "gemclus.data.multivariate_student_t"]], "hellingergemini (class in gemclus.gemini)": [[34, "gemclus.gemini.HellingerGEMINI"]], "__init__() (gemclus.gemini.hellingergemini method)": [[34, "gemclus.gemini.HellingerGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.hellingergemini method)": [[34, "gemclus.gemini.HellingerGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.hellingergemini method)": [[34, "gemclus.gemini.HellingerGEMINI.evaluate"]], "klgemini (class in gemclus.gemini)": [[35, "gemclus.gemini.KLGEMINI"]], "__init__() (gemclus.gemini.klgemini method)": [[35, "gemclus.gemini.KLGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.klgemini method)": [[35, "gemclus.gemini.KLGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.klgemini method)": [[35, "gemclus.gemini.KLGEMINI.evaluate"]], "mi (class in gemclus.gemini)": [[36, "gemclus.gemini.MI"]], "__init__() (gemclus.gemini.mi method)": [[36, "gemclus.gemini.MI.__init__"]], "compute_affinity() (gemclus.gemini.mi method)": [[36, "gemclus.gemini.MI.compute_affinity"]], "evaluate() (gemclus.gemini.mi method)": [[36, "gemclus.gemini.MI.evaluate"]], "mmdgemini (class in gemclus.gemini)": [[37, "gemclus.gemini.MMDGEMINI"]], "__init__() (gemclus.gemini.mmdgemini method)": [[37, "gemclus.gemini.MMDGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.mmdgemini method)": [[37, "gemclus.gemini.MMDGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.mmdgemini method)": [[37, "gemclus.gemini.MMDGEMINI.evaluate"]], "tvgemini (class in gemclus.gemini)": [[38, "gemclus.gemini.TVGEMINI"]], "__init__() (gemclus.gemini.tvgemini method)": [[38, "gemclus.gemini.TVGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.tvgemini method)": [[38, "gemclus.gemini.TVGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.tvgemini method)": [[38, "gemclus.gemini.TVGEMINI.evaluate"]], "wassersteingemini (class in gemclus.gemini)": [[39, "gemclus.gemini.WassersteinGEMINI"]], "__init__() (gemclus.gemini.wassersteingemini method)": [[39, "gemclus.gemini.WassersteinGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.wassersteingemini method)": [[39, "gemclus.gemini.WassersteinGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteingemini method)": [[39, "gemclus.gemini.WassersteinGEMINI.evaluate"]], "linearmmd (class in gemclus.linear)": [[40, "gemclus.linear.LinearMMD"]], "__init__() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.__init__"]], "fit() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.fit"]], "fit_predict() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.fit_predict"]], "get_gemini() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.get_gemini"]], "get_params() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.get_params"]], "predict() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.predict"]], "predict_proba() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.predict_proba"]], "score() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.score"]], "set_params() (gemclus.linear.linearmmd method)": [[40, "gemclus.linear.LinearMMD.set_params"]], "linearmodel (class in gemclus.linear)": [[41, "gemclus.linear.LinearModel"]], "__init__() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.__init__"]], "fit() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.fit"]], "fit_predict() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.fit_predict"]], "get_gemini() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.get_gemini"]], "get_params() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.get_params"]], "predict() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.predict"]], "predict_proba() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.predict_proba"]], "score() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.score"]], "set_params() (gemclus.linear.linearmodel method)": [[41, "gemclus.linear.LinearModel.set_params"]], "linearwasserstein (class in gemclus.linear)": [[42, "gemclus.linear.LinearWasserstein"]], "__init__() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.__init__"]], "fit() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.fit"]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.fit_predict"]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.get_gemini"]], "get_params() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.get_params"]], "predict() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.predict"]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.predict_proba"]], "score() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.score"]], "set_params() (gemclus.linear.linearwasserstein method)": [[42, "gemclus.linear.LinearWasserstein.set_params"]], "rim (class in gemclus.linear)": [[43, "gemclus.linear.RIM"]], "__init__() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.__init__"]], "fit() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.fit"]], "fit_predict() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.fit_predict"]], "get_gemini() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.get_gemini"]], "get_params() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.get_params"]], "predict() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.predict"]], "predict_proba() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.predict_proba"]], "score() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.score"]], "set_params() (gemclus.linear.rim method)": [[43, "gemclus.linear.RIM.set_params"]], "mlpmmd (class in gemclus.mlp)": [[44, "gemclus.mlp.MLPMMD"]], "__init__() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.__init__"]], "fit() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.fit"]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.get_gemini"]], "get_params() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.get_params"]], "predict() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.predict"]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.predict_proba"]], "score() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.score"]], "set_params() (gemclus.mlp.mlpmmd method)": [[44, "gemclus.mlp.MLPMMD.set_params"]], "mlpmodel (class in gemclus.mlp)": [[45, "gemclus.mlp.MLPModel"]], "__init__() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.__init__"]], "fit() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.fit"]], "fit_predict() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.get_gemini"]], "get_params() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.get_params"]], "predict() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.predict"]], "predict_proba() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.predict_proba"]], "score() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.score"]], "set_params() (gemclus.mlp.mlpmodel method)": [[45, "gemclus.mlp.MLPModel.set_params"]], "mlpwasserstein (class in gemclus.mlp)": [[46, "gemclus.mlp.MLPWasserstein"]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.__init__"]], "fit() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.fit"]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.fit_predict"]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.get_gemini"]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.get_params"]], "predict() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.predict"]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.predict_proba"]], "score() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.score"]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[46, "gemclus.mlp.MLPWasserstein.set_params"]], "categoricalmmd (class in gemclus.nonparametric)": [[47, "gemclus.nonparametric.CategoricalMMD"]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.__init__"]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.get_params"]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.predict_proba"]], "score() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.score"]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[47, "gemclus.nonparametric.CategoricalMMD.set_params"]], "categoricalmodel (class in gemclus.nonparametric)": [[48, "gemclus.nonparametric.CategoricalModel"]], "__init__() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.__init__"]], "fit() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.get_params"]], "predict() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.predict_proba"]], "score() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.score"]], "set_params() (gemclus.nonparametric.categoricalmodel method)": [[48, "gemclus.nonparametric.CategoricalModel.set_params"]], "categoricalwasserstein (class in gemclus.nonparametric)": [[49, "gemclus.nonparametric.CategoricalWasserstein"]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.__init__"]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.fit"]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.get_params"]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.predict"]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.predict_proba"]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.score"]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[49, "gemclus.nonparametric.CategoricalWasserstein.set_params"]], "sparselinearmi (class in gemclus.sparse)": [[50, "gemclus.sparse.SparseLinearMI"]], "__init__() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.__init__"]], "fit() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.fit"]], "fit_predict() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.get_params"]], "get_selection() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.get_selection"]], "path() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.path"]], "predict() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.predict"]], "predict_proba() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.predict_proba"]], "score() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.score"]], "set_params() (gemclus.sparse.sparselinearmi method)": [[50, "gemclus.sparse.SparseLinearMI.set_params"]], "sparselinearmmd (class in gemclus.sparse)": [[51, "gemclus.sparse.SparseLinearMMD"]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.__init__"]], "fit() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.fit"]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.get_params"]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.get_selection"]], "path() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.path"]], "predict() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.predict"]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.predict_proba"]], "score() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.score"]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[51, "gemclus.sparse.SparseLinearMMD.set_params"]], "sparselinearmodel (class in gemclus.sparse)": [[52, "gemclus.sparse.SparseLinearModel"]], "__init__() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.__init__"]], "fit() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.fit"]], "fit_predict() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.get_params"]], "get_selection() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.get_selection"]], "path() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.path"]], "predict() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.predict"]], "predict_proba() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.predict_proba"]], "score() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.score"]], "set_params() (gemclus.sparse.sparselinearmodel method)": [[52, "gemclus.sparse.SparseLinearModel.set_params"]], "sparsemlpmmd (class in gemclus.sparse)": [[53, "gemclus.sparse.SparseMLPMMD"]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.__init__"]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.get_selection"]], "path() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.path"]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.predict_proba"]], "score() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.score"]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[53, "gemclus.sparse.SparseMLPMMD.set_params"]], "sparsemlpmodel (class in gemclus.sparse)": [[54, "gemclus.sparse.SparseMLPModel"]], "__init__() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.__init__"]], "fit() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.get_selection"]], "path() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.path"]], "predict() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.predict_proba"]], "score() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.score"]], "set_params() (gemclus.sparse.sparsemlpmodel method)": [[54, "gemclus.sparse.SparseMLPModel.set_params"]], "douglas (class in gemclus.tree)": [[55, "gemclus.tree.Douglas"]], "__init__() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.__init__"]], "find_active_points() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.find_active_points"]], "fit() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.fit"]], "fit_predict() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.fit_predict"]], "get_gemini() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.get_gemini"]], "get_params() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.get_params"]], "predict() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.predict"]], "predict_proba() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.predict_proba"]], "score() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.score"]], "set_params() (gemclus.tree.douglas method)": [[55, "gemclus.tree.Douglas.set_params"]], "kauri (class in gemclus.tree)": [[56, "gemclus.tree.Kauri"]], "__init__() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.__init__"]], "fit() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.fit"]], "fit_predict() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.fit_predict"]], "get_params() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.get_params"]], "predict() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.predict"]], "score() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.score"]], "set_params() (gemclus.tree.kauri method)": [[56, "gemclus.tree.Kauri.set_params"]], "print_kauri_tree() (in module gemclus.tree)": [[57, "gemclus.tree.print_kauri_tree"]]}})