Search.setIndex({"docnames": ["api", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_feature_selection_linear", "auto_examples/feature_selection/plot_feature_selection_mlp", "auto_examples/feature_selection/plot_grouped_selection", "auto_examples/feature_selection/sg_execution_times", "auto_examples/index", "auto_examples/plot_circles", "auto_examples/plot_graph_node_clustering", "auto_examples/plot_gstm", "auto_examples/plot_intro_mlp_mmd", "auto_examples/plot_moon_clustering", "auto_examples/plot_nonparametric_clustering", "auto_examples/plot_rim", "auto_examples/scoring/index", "auto_examples/scoring/plot_gemini_scoring", "auto_examples/scoring/sg_execution_times", "auto_examples/sg_execution_times", "generated/gemclus.data.celeux_one", "generated/gemclus.data.celeux_two", "generated/gemclus.data.draw_gmm", "generated/gemclus.data.gstm", "generated/gemclus.data.multivariate_student_t", "generated/gemclus.gemini.MI", "generated/gemclus.gemini.MMDOvA", "generated/gemclus.gemini.MMDOvO", "generated/gemclus.gemini.WassersteinOvA", "generated/gemclus.gemini.WassersteinOvO", "generated/gemclus.linear.LinearMMD", "generated/gemclus.linear.LinearWasserstein", "generated/gemclus.linear.RIM", "generated/gemclus.mlp.MLPMMD", "generated/gemclus.mlp.MLPWasserstein", "generated/gemclus.nonparametric.CategoricalMMD", "generated/gemclus.nonparametric.CategoricalWasserstein", "generated/gemclus.sparse.SparseLinearMMD", "generated/gemclus.sparse.SparseMLPMMD", "index", "quick_start", "user_guide"], "filenames": ["api.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_feature_selection_linear.rst", "auto_examples/feature_selection/plot_feature_selection_mlp.rst", "auto_examples/feature_selection/plot_grouped_selection.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/plot_circles.rst", "auto_examples/plot_graph_node_clustering.rst", "auto_examples/plot_gstm.rst", "auto_examples/plot_intro_mlp_mmd.rst", "auto_examples/plot_moon_clustering.rst", "auto_examples/plot_nonparametric_clustering.rst", "auto_examples/plot_rim.rst", "auto_examples/scoring/index.rst", "auto_examples/scoring/plot_gemini_scoring.rst", "auto_examples/scoring/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "generated/gemclus.data.celeux_one.rst", "generated/gemclus.data.celeux_two.rst", "generated/gemclus.data.draw_gmm.rst", "generated/gemclus.data.gstm.rst", "generated/gemclus.data.multivariate_student_t.rst", "generated/gemclus.gemini.MI.rst", "generated/gemclus.gemini.MMDOvA.rst", "generated/gemclus.gemini.MMDOvO.rst", "generated/gemclus.gemini.WassersteinOvA.rst", "generated/gemclus.gemini.WassersteinOvO.rst", "generated/gemclus.linear.LinearMMD.rst", "generated/gemclus.linear.LinearWasserstein.rst", "generated/gemclus.linear.RIM.rst", "generated/gemclus.mlp.MLPMMD.rst", "generated/gemclus.mlp.MLPWasserstein.rst", "generated/gemclus.nonparametric.CategoricalMMD.rst", "generated/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/gemclus.sparse.SparseLinearMMD.rst", "generated/gemclus.sparse.SparseMLPMMD.rst", "index.rst", "quick_start.rst", "user_guide.rst"], "titles": ["GEMCLUS API", "Feature selection", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Grouped Feature selection with a linear model", "Computation times", "General examples", "Comparative clustering of circles dataset with kernel change", "Graph node clustering with a nonparametric model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Scoring with GEMINI", "Scoring any model with GEMINI", "Computation times", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "Welcome to GemClus documentation!", "Quick start on gemclus", "User guide : contents"], "terms": {"The": [0, 2, 3, 4, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "packag": [0, 38], "current": [0, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 39], "contain": [0, 20, 28, 29, 30, 31, 32, 33, 34, 35, 36], "simpl": [0, 6, 7, 8, 12, 17, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "mlp": [0, 1, 5, 6, 7, 9, 11, 17, 36, 38], "logist": [0, 1, 3, 4, 5, 6, 15, 17, 18, 28, 29, 30, 35, 36, 39], "regress": [0, 1, 3, 4, 5, 6, 15, 17, 18, 28, 29, 30, 35, 36, 39], "all": [0, 2, 3, 4, 6, 8, 11, 15, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39], "featur": [0, 5, 9, 10, 13, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "well": [0, 7, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39], "sparsiti": [0, 35, 36, 38, 39], "constrain": [0, 4, 39], "variant": 0, "follow": [0, 8, 30, 37], "class": [0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39], "implement": [0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37], "basic": 0, "evalu": [0, 2, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "ani": [0, 6, 14, 16, 23, 26, 35, 36, 38, 39], "condit": [0, 23, 24, 25, 26, 27, 33, 34], "distribut": [0, 2, 3, 4, 6, 7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 37, 38], "These": 0, "ar": [0, 2, 3, 4, 8, 9, 11, 12, 13, 18, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "base": [0, 6, 18, 19, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39], "standard": 0, "like": [0, 9, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "one": [0, 4, 15, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39], "hidden": [0, 31, 32, 36, 39], "layer": [0, 7, 31, 32, 35, 36, 39], "neural": [0, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "network": [0, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "have": [0, 7, 15, 28, 29, 30, 31, 32, 33, 34, 35, 36], "paramet": [0, 4, 7, 8, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "assign": [0, 4, 8, 12, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "data": [0, 2, 4, 7, 8, 12, 13, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "sampl": [0, 2, 3, 9, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "accord": [0, 8, 13], "indic": [0, 8, 35, 36], "consequ": [0, 9, 33, 34], "do": [0, 8, 11, 13, 15, 33, 34, 37], "depend": [0, 2, 3, 4, 8, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "locat": [0, 21], "overal": [0, 37], "can": [0, 7, 12, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "us": [0, 1, 4, 5, 6, 7, 8, 11, 12, 13, 15, 24, 25, 27, 28, 38, 39], "decis": [0, 6, 13, 17, 21, 29, 32, 39], "boundari": [0, 6, 13, 17, 21, 29, 32, 39], "hyper": 0, "howev": [0, 39], "underli": 0, "cannot": [0, 7], "unseen": 0, "predict": [0, 2, 3, 9, 10, 11, 13, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "train": [0, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "progress": [0, 2, 3, 4, 28, 29, 30, 31, 32, 33, 34, 35, 36], "remov": 0, "thei": [0, 15], "select": [0, 5, 18, 19, 35, 36, 39], "subset": 0, "which": [0, 2, 3, 4, 8, 11, 13, 18, 19, 20, 21, 23, 24, 25, 26, 27, 35, 36, 38], "mai": [0, 9, 37, 38], "enhanc": 0, "interpret": 0, "thi": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "function": [0, 8, 11, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39], "synthet": 0, "spars": [1, 4, 5, 6, 8, 11, 18, 28, 29, 30, 31, 32, 33, 34, 38, 39], "mmd": [1, 5, 6, 7, 17, 18, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 39], "ovo": [1, 5, 6, 8, 10, 12, 18, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39], "group": [1, 3, 5, 6, 35, 36, 39], "linear": [1, 5, 6, 7, 9, 11, 13, 15, 24, 25, 31, 32, 33, 35, 36, 39], "model": [1, 5, 6, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39], "ova": [1, 5, 6, 15, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39], "go": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 37], "end": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15], "download": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 37], "full": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15], "exampl": [2, 3, 4, 7, 8, 11, 12, 13, 15, 17, 28, 37], "code": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 37], "In": [2, 3, 4, 8, 10, 13, 21, 37, 38, 39], "we": [2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 15, 37, 38, 39], "ask": [2, 3, 4, 38], "gemclu": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 39], "sparselinearmmd": [2, 4, 36, 39], "perform": [2, 3, 4, 8, 15, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "where": [2, 3, 4, 9, 11, 15, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "regularis": [2, 3, 4, 13, 30], "penalti": [2, 3, 4, 13, 15, 30, 35, 36, 39], "i": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39], "increas": [2, 3, 4, 35, 36], "until": [2, 3, 4, 35, 36], "2": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 21, 28, 29, 30, 31, 32, 35, 36, 38, 39], "discard": [2, 3, 4], "keep": [2, 3, 39], "best": [2, 3, 35, 36], "weight": [2, 3, 28, 29, 30, 31, 32, 33, 34, 35, 36], "minimum": [2, 3, 35, 36], "number": [2, 3, 7, 8, 12, 18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "maintain": [2, 3], "gemini": [2, 3, 4, 7, 8, 9, 11, 12, 16, 17, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36], "score": [2, 3, 4, 8, 12, 13, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "close": [2, 3, 7, 18, 21], "90": [2, 3], "maximum": [2, 3, 8, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36], "valu": [2, 3, 7, 8, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "encount": [2, 3], "dure": [2, 3, 28, 29, 30, 31, 32, 33, 34, 35, 36], "consist": [2, 3, 4, 7, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "3": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "isotrop": [2, 3, 18], "gaussian": [2, 3, 6, 7, 8, 13, 15, 17, 18, 19, 20, 21, 29], "so": [2, 3, 9, 11, 15, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "find": [2, 3, 4, 9, 11, 37], "5d": 2, "20": [2, 5, 18, 31, 32, 36], "noisi": [2, 3, 4, 18, 19], "variabl": [2, 3, 4, 8, 18, 19, 35, 36], "thu": [2, 3, 4, 38], "optim": [2, 3, 4, 7, 11], "solut": [2, 3, 4, 11, 35, 36], "should": [2, 3, 4, 23, 24, 25, 26, 27], "onli": [2, 3, 4, 8, 9, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39], "5": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 18, 35, 36], "relev": [2, 3, 4], "suffici": [2, 3, 4], "get": [2, 3, 4, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "correct": [2, 3, 4], "import": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 28, 29, 30, 31, 32, 35, 36, 38], "numpi": [2, 3, 4, 7, 8, 9, 11, 12, 13, 15, 37], "np": [2, 3, 4, 7, 8, 9, 11, 12, 13, 15], "from": [2, 3, 4, 7, 9, 10, 11, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39], "matplotlib": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "pyplot": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "plt": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "sklearn": [2, 3, 7, 8, 10, 11, 12, 13, 15, 28, 29, 30, 31, 32, 35, 36, 38, 39], "metric": [2, 7, 12, 15, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "celeux_on": 2, "gener": [2, 3, 4, 7, 8, 12, 13, 15, 18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36], "separ": [2, 3, 8, 12, 13], "addit": [2, 18, 19, 38], "p": [2, 8, 18, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "independ": [2, 18, 38], "x": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39], "y": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39], "n": [2, 4, 8, 9, 12, 18, 19, 20, 21, 22], "300": [2, 18], "mu": [2, 18], "1": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 18, 21, 28, 29, 30, 31, 32, 35, 36, 38], "7": [2, 4, 18], "random_st": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36], "0": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36], "creat": [2, 3, 4, 11, 12, 13], "just": [2, 3, 4, 13], "call": [2, 3, 4, 8, 12, 28, 29, 30, 31, 32, 33, 34, 35, 36], "method": [2, 3, 4, 8, 12, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39], "iter": [2, 3, 4, 28, 29, 30, 31, 32, 33, 34, 35, 36], "through": [2, 3, 4, 36, 37], "gradient": [2, 3, 4, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "descent": [2, 3, 4, 28, 29, 30, 31, 32, 33, 34, 35, 36], "clf": [2, 3, 4, 9, 10, 13, 28, 29, 30, 31, 32, 35, 36], "alpha": [2, 3, 4, 7, 8, 9, 11, 13, 21, 35, 36], "true": [2, 3, 4, 8, 9, 10, 11, 12, 13, 15, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39], "search": [2, 3, 4], "elimin": [2, 3, 4, 36], "best_weight": [2, 3, 4, 35, 36], "n_featur": [2, 3, 4, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "take": [2, 3, 4, 7, 9, 13, 38], "look": [2, 3, 4, 7, 13, 38], "how": [2, 3, 4, 6, 12, 13, 15, 18, 21, 38, 39], "decreas": [2, 3], "print": [2, 3, 4, 8, 12, 13, 15, 28, 29, 30, 31, 32, 33, 34, 35, 36], "f": [2, 3, 4, 8, 12, 15, 21, 35, 36, 37, 38], "top": [2, 3, 4, 9, 35, 36], "wa": [2, 3, 4, 18, 19, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "max": [2, 3, 4, 7, 11, 13], "settl": [2, 3, 4], "an": [2, 3, 4, 6, 8, 9, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39], "optimum": [2, 3, 4], "9": [2, 3, 4, 35, 36], "highlight": [2, 3], "along": [2, 3, 11], "titl": [2, 3, 7, 37], "plot": [2, 3, 7, 8, 9], "xlabel": [2, 3, 9, 10, 13], "ylabel": [2, 3, 9, 10, 13], "ylim": [2, 3, 7, 9], "show": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15], "expect": [2, 9, 38], "first": [2, 15, 31, 32, 36, 38], "linalg": 2, "norm": [2, 39], "axi": [2, 3, 4, 7, 11], "ord": 2, "730431446195361": 2, "0285492563142022": 2, "725694330682782": 2, "arrai": [2, 3, 4, 8, 12, 18, 19, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36], "4": [2, 3, 4, 7, 8, 9, 12, 19], "now": [2, 3, 9, 13, 15], "y_pred": [2, 3, 8, 9, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "ari": [2, 8, 12], "adjusted_rand_scor": [2, 8, 12], "8752937655453139": 2, "total": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17], "run": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "time": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 38], "script": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15], "minut": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15], "548": [2, 5], "second": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15], "python": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15], "sourc": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "plot_feature_selection_linear": [2, 5], "py": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17], "jupyt": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15], "notebook": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15], "ipynb": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15], "galleri": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 39], "sphinx": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15], "sparsemlpmmd": [3, 35], "2d": [3, 19], "48": 3, "make_blob": [3, 10, 13], "center": [3, 10, 13], "cluster_std": [3, 10, 13], "n_sampl": [3, 7, 10, 11, 13, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "200": [3, 7, 9, 10, 11, 13], "add": [3, 39], "extra": 3, "random": [3, 4, 8, 18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36], "seed": [3, 4, 8], "concaten": [3, 4, 18], "normal": [3, 4], "scale": [3, 18, 20, 22, 37], "size": [3, 4, 8, 11, 28, 29, 30, 31, 32, 33, 34, 35, 36], "18": 3, "batch_siz": [3, 4, 9, 28, 29, 30, 31, 32, 35, 36], "50": [3, 4, 7, 8, 9, 10, 11, 13], "max_it": [3, 4, 7, 28, 29, 30, 31, 32, 33, 34, 35, 36], "25": 3, "learning_r": [3, 4, 8, 11, 12, 28, 29, 30, 31, 32, 33, 34, 35, 36], "001": [3, 28, 29, 30, 31, 32, 33, 34, 35, 36], "our": [3, 4, 6, 8, 11, 37, 38], "figur": 3, "figsiz": 3, "10": [3, 4, 8, 9, 11, 13, 17, 22, 35, 36, 38], "subplot": [3, 7], "lasso": [3, 35, 36, 39], "tight_layout": [3, 7], "get_select": [3, 4, 35, 36], "4596486286280377": 3, "5824499242836225": 3, "4242049318552603": 3, "x_0": [3, 10, 13], "x_1": [3, 10, 13], "x_2": [3, 10, 13], "ax0": [3, 10, 13], "scatter": [3, 4, 7, 8, 9, 10, 11, 12, 13], "c": [3, 4, 7, 8, 9, 10, 11, 12, 13, 18, 19, 21, 37, 38], "crimson": [3, 10, 13], "": [3, 8, 10, 13, 15, 28, 29, 30, 31, 32, 33, 34, 35, 36], "ax1": [3, 10, 13], "deepskyblu": [3, 10, 13], "ax2": [3, 10, 13], "darkgreen": [3, 10, 13], "leg": [3, 10, 13], "legend": [3, 10, 13], "loc": [3, 10, 13, 20, 22], "upper": [3, 10, 13], "left": [3, 10, 13, 38], "fancybox": [3, 10, 13], "scatterpoint": [3, 10, 13], "get_fram": [3, 10, 13], "set_alpha": [3, 10, 13], "850": [3, 5], "plot_feature_selection_mlp": [3, 5], "moreov": [4, 38], "produc": 4, "some": [4, 6, 7, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39], "categor": [4, 33, 34], "hot": [4, 35, 36], "encod": [4, 35, 36], "consid": [4, 28, 29, 30, 31, 32, 35, 36], "altogeth": 4, "option": [4, 11, 28, 29, 30, 31, 32, 33, 34, 35, 36], "binomi": [4, 8], "cluster": [4, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "8": 4, "inform": [4, 13, 15, 19, 21, 23, 28, 29, 30, 31, 32, 35, 36, 37, 38], "outcom": 4, "multinomi": 4, "x1_class_1": 4, "pval": [4, 20], "05": [4, 5, 7, 11, 35, 36], "45": 4, "x2_class_1": 4, "x_class_1": 4, "x1_class_2": 4, "x2_class_2": 4, "x_class_2": 4, "x_inform": 4, "x_nois": 4, "100": [4, 8, 12], "repeat": 4, "arang": 4, "final": 4, "write": 4, "out": [4, 37], "partit": [4, 35, 36], "rang": [4, 8], "shape": [4, 8, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "visualis": 4, "def": 4, "rand_jitt": 4, "return": [4, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "randn": 4, "len": 4, "01": [4, 17, 35, 36], "argmax": [4, 13], "red": 4, "blue": [4, 9], "6": 4, "11": [4, 9, 17], "12": [4, 23, 24, 25, 26, 27], "13": 4, "14": [4, 19], "15": 4, "1e": [4, 8, 11, 12, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "lower": 4, "threshold": [4, 11], "80": 4, "keep_threshold": [4, 35, 36], "4323062818447518": 4, "8434561566009591": 4, "6747649252807673": 4, "905": [4, 5], "plot_grouped_select": [4, 5], "00": [5, 16, 17], "30": 5, "303": 5, "execut": [5, 16, 17], "auto_examples_feature_select": 5, "file": [5, 16, 17], "mb": [5, 16, 17], "03": [5, 17], "give": [6, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "here": [6, 7, 8, 9, 15, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "introduc": [6, 17, 31], "non": [6, 8, 17, 19, 20, 33], "parametr": [6, 8, 17, 20, 33, 38], "map": [6, 17, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36], "mixtur": [6, 7, 8, 13, 17, 18, 19, 20, 21, 29], "low": [6, 17, 21, 29], "degre": [6, 17, 21, 22, 29], "student": [6, 17, 21, 22, 29], "draw": [6, 9, 17, 18, 19, 20, 21, 22, 32], "between": [6, 17, 23, 24, 25, 26, 27, 32, 36, 38, 39], "two": [6, 7, 17, 25, 27, 31, 32, 35, 38], "interlac": [6, 17, 32], "moon": [6, 17, 32], "rim": [6, 17], "graph": [6, 11, 12, 17, 20, 34], "node": [6, 12, 17, 20, 34], "nonparametr": [6, 12, 17, 20], "compar": [6, 17, 18, 19, 24, 25, 26, 27, 31, 38], "circl": [6, 17, 31], "dataset": [6, 10, 11, 17, 18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 35, 36, 38], "kernel": [6, 17, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 39], "chang": [6, 17, 31], "auto_examples_python": 6, "zip": 6, "auto_examples_jupyt": 6, "centr": 7, "challeng": 7, "algorithm": [7, 11, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "unless": 7, "adequ": [7, 8], "spectralclust": 7, "gaussianmixtur": 7, "start": [7, 15, 35, 36, 37], "make_circl": 7, "nois": [7, 11], "factor": [7, 35, 36], "normalis": 7, "mean": [7, 8, 9, 12, 18, 20, 21, 24, 25], "std": 7, "ddof": 7, "off": [7, 11], "set": [7, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39], "covari": [7, 8, 12, 20], "type": [7, 38], "spheric": 7, "lighten": 7, "correspond": [7, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36], "symmetri": 7, "eas": 7, "job": 7, "propos": [7, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39], "initialis": [7, 28, 29, 30, 31, 32, 33, 34, 35, 36], "actual": 7, "gm": 7, "n_compon": 7, "covariance_typ": 7, "means_init": 7, "zero": 7, "1000": [7, 28, 29, 30, 31, 32, 33, 34, 35, 36], "fit": [7, 8, 11, 12, 13, 15, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "spectral": [7, 11], "sc": 7, "n_cluster": [7, 8, 9, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "multi": [7, 39], "perceptron": [7, 39], "becaus": [7, 8, 11, 39], "incap": 7, "euclidean_gemini": 7, "mlpmmd": [7, 10, 32, 38], "Then": 7, "similar": 7, "rbf": [7, 24, 25, 28, 31, 33, 35, 36], "comput": [7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "rbf_gemini": 7, "grid": [7, 9], "x_val": [7, 9, 11, 13], "linspac": [7, 9, 11, 13], "min": [7, 11, 13], "num": [7, 9, 11, 13], "y_val": [7, 9, 11, 13], "xx": [7, 9, 11, 13], "yy": [7, 9, 11, 13], "meshgrid": [7, 9, 11, 13], "grid_input": [7, 9, 11, 13], "c_": [7, 9, 11, 13], "ravel": [7, 9, 11, 13], "contourf": [7, 9, 11, 13], "reshap": [7, 9, 11, 13], "cmap": [7, 9, 11], "cm": [7, 11], "labels_": [7, 28, 29, 30, 31, 32, 33, 34, 35, 36], "247": [7, 17], "plot_circl": [7, 17], "simplifi": 8, "version": [8, 35, 36, 38, 39], "latent": 8, "posit": [8, 22], "procedur": 8, "To": [8, 11], "mani": [8, 37], "determin": [8, 18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36], "probabl": [8, 13, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "distanc": [8, 11, 15, 23, 24, 25, 26, 27, 29, 32, 34, 38, 39], "associ": 8, "each": [8, 18, 19, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36], "note": [8, 11, 39], "given": [8, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "instead": [8, 9, 15], "ident": 8, "matrix": [8, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "itertool": 8, "scipi": [8, 11, 37], "csgraph": [8, 11], "categoricalwasserstein": 8, "ey": [8, 12, 15], "draw_gmm": [8, 12], "ones": [8, 12, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36], "pairwise_dist": [8, 11, 39], "euclidean": [8, 11, 15, 26, 27, 29, 32, 34, 39], "edge_prob": 8, "exp": 8, "adjacency_matrix": 8, "j": 8, "make": 8, "adjac": [8, 11], "symmetr": [8, 23, 24, 25, 26, 27], "t": [8, 9, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "pair": [8, 11], "shortest": [8, 11], "path": [8, 11, 35, 36], "floyd_warshal": [8, 11], "direct": [8, 11], "fals": [8, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "unweight": [8, 11], "replac": [8, 11, 15], "inf": [8, 11], "isinf": [8, 11], "optimis": [8, 12, 28, 29, 30, 31, 32, 33, 34, 35, 36], "specifi": [8, 15, 35, 36], "custom": [8, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36], "pass": [8, 11, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "argument": [8, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36], "precomput": [8, 11, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "1789": [8, 12], "dummi": 8, "unnecessari": 8, "There": 8, "index": 8, "match": [8, 15], "fit_predict": [8, 9, 11, 12, 28, 29, 30, 31, 32, 33, 34, 35, 36], "node_i": 8, "node_j": 8, "combin": [8, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36], "grai": 8, "linewidth": 8, "ari_scor": [8, 12], "gemini_scor": [8, 12], "3f": [8, 12, 15], "977": 8, "141": 8, "235": [8, 17], "plot_graph_node_clust": [8, 17], "retak": [9, 11], "experi": [9, 11], "origin": [9, 11, 20, 37, 38, 39], "paper": [9, 11, 30, 39], "want": [9, 11, 39], "incorpor": 9, "freedom": [9, 21, 22], "seem": [9, 39], "outlier": 9, "unlik": 9, "done": 9, "linearwasserstein": [9, 28], "gstm": 9, "far": [9, 39], "apart": 9, "df": [9, 21, 22], "input": [9, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "help": [9, 37], "zz": [9, 11, 13], "reds_r": 9, "xlim": 9, "860": [9, 17], "plot_gstm": [9, 17], "base_gemini": 10, "densemmdovo": 10, "environ": [10, 13], "pleas": [10, 13, 37, 38], "rerun": [10, 13], "cell": [10, 13], "html": [10, 13], "represent": [10, 13, 31, 32, 36], "trust": [10, 13], "On": [10, 13, 35, 36], "github": [10, 13, 37], "unabl": [10, 13], "render": [10, 13], "try": [10, 13, 37], "load": 10, "page": [10, 13], "nbviewer": [10, 13], "org": [10, 13], "mlpmmdmlpmmd": 10, "268": [10, 17], "plot_intro_mlp_mmd": [10, 17], "face": 11, "trick": 11, "guid": [11, 37, 38], "desir": 11, "mlpwasserstein": [11, 31], "would": [11, 37], "abl": 11, "make_moon": 11, "2023": [11, 38], "edg": 11, "defin": [11, 24, 25, 26, 27], "less": 11, "than": [11, 35, 36, 38], "quantil": 11, "727": [11, 17], "plot_moon_clust": [11, 17], "illustr": 12, "categoricalmmd": 12, "975": 12, "328": 12, "641": [12, 17], "plot_nonparametric_clust": [12, 17], "mutual": [13, 21, 23, 28, 29, 30, 31, 32, 35, 36, 37, 38], "kraus": [13, 30], "et": [13, 18, 19, 30, 36, 38], "al": [13, 18, 19, 30, 36, 38], "2010": [13, 30], "maximis": [13, 28, 29, 30, 31, 32, 33, 34, 38], "under": [13, 35, 36, 37], "ell_2": [13, 30], "rimrim": 13, "let": [13, 15], "u": [13, 37], "grad": 13, "grid_pr": 13, "predict_proba": [13, 15, 28, 29, 30, 31, 32, 33, 34, 35, 36], "isol": 13, "level": 13, "02139604932056094": 13, "488": [13, 17], "plot_rim": [13, 17], "anoth": [15, 39], "seek": 15, "rather": 15, "preprocess": 15, "linear_model": 15, "naive_bay": 15, "load_breast_canc": 15, "return_x_i": [15, 28, 29, 30, 31, 32, 35, 36, 38], "robustscal": 15, "fit_transform": 15, "differ": [15, 35, 36], "breast": 15, "cancer": 15, "l2": [15, 26, 27, 29, 32, 34], "clf1": 15, "logisticregress": 15, "p_y_given_x_1": 15, "naiv": 15, "bay": [15, 38], "hypothes": [15, 37], "clf2": 15, "gaussiannb": 15, "p_y_given_x_2": 15, "both": [15, 39], "wassersteingemini": 15, "v": [15, 24, 25, 26, 27, 38], "wasserstein_scor": 15, "wassersteinova": 15, "need": [15, 23, 24, 25, 26, 27], "affin": [15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "wasserstein": [15, 26, 27, 28, 29, 31, 32, 34, 39], "compute_affin": [15, 23, 24, 25, 26, 27], "clf1_score": 15, "clf2_score": 15, "878": 15, "005": 15, "By": [15, 39], "label": [15, 28, 29, 30, 31, 32, 33, 34, 35, 36], "obtain": 15, "share": 15, "same": [15, 39], "otherwis": [15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "y_one_hot": 15, "precomputed_dist": 15, "matmul": 15, "431": 15, "403": 15, "880": [15, 16], "plot_gemini_scor": [15, 16], "auto_examples_scor": 16, "38": 17, "467": 17, "auto_exampl": 17, "none": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "tupl": [18, 19, 20], "ndarrai": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "compon": [18, 19, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36], "respect": [18, 38], "over": 18, "dimens": 18, "excess": 18, "taken": [18, 19], "celeux": [18, 19], "section": [18, 19], "int": [18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36], "default": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "float": [18, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "control": [18, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36], "other": [18, 33, 34], "randomst": [18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36], "instanc": [18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36], "creation": [18, 19, 20, 21, 22], "reproduc": [18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36], "output": [18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "across": [18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36], "multipl": [18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36], "gmm": [18, 19, 20, 21], "drawn": [18, 19, 20, 21, 22, 38], "refer": [18, 19, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36], "g": [18, 19], "martin": [18, 19], "magniett": [18, 19], "m": [18, 19, 21, 36, 37, 38], "l": [18, 19, 21, 35, 36, 37, 38], "maugi": [18, 19], "rabusseau": [18, 19], "rafteri": [18, 19], "A": [18, 19, 20, 21, 35, 36, 38], "e": [18, 19, 23, 24, 25, 26, 27, 37, 38], "2014": [18, 19], "regular": [18, 19, 30], "approach": [18, 19], "journal": [18, 19, 38], "de": [18, 19], "la": [18, 19], "societ": [18, 19], "francais": [18, 19], "statistiqu": [18, 19], "155": [18, 19], "57": [18, 19], "71": [18, 19], "2000": 19, "linearli": 19, "element": 20, "list": [20, 35, 36], "k": [20, 33, 34, 38], "d": [20, 22, 37, 38], "proport": 20, "500": 21, "articl": 21, "ohl": [21, 28, 29, 31, 32, 35, 36, 37, 38], "mattei": [21, 28, 29, 31, 32, 35, 36, 37, 38], "bouveyron": [21, 28, 29, 31, 32, 35, 36, 37, 38], "harchaoui": [21, 28, 29, 31, 32, 35, 36, 37, 38], "w": [21, 23, 24, 25, 26, 27, 37, 38], "leclercq": [21, 28, 29, 31, 32, 35, 36, 37, 38], "droit": [21, 28, 29, 31, 32, 35, 36, 37, 38], "precioso": [21, 37, 38], "2022": [21, 37, 38], "octob": [21, 37], "generalis": [21, 28, 29, 31, 32, 35, 36, 37, 38], "discrimin": [21, 28, 29, 30, 31, 32, 35, 36], "advanc": [21, 37, 38], "process": [21, 37, 38], "system": [21, 37, 38], "multivari": 22, "semi": 22, "definit": [22, 38], "spread": 22, "epsilon": [23, 24, 25, 26, 27], "classic": [23, 30], "complet": [23, 37], "mathcal": [23, 24, 25, 26, 27], "mathbb": [23, 24, 25, 26, 27, 38], "_": [23, 24, 25, 26, 27, 38], "sim": [23, 24, 25, 26, 27, 38], "text": [23, 24, 25], "kl": 23, "precis": [23, 24, 25, 26, 27], "clip": [23, 24, 25, 26, 27], "order": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "avoid": [23, 24, 25, 26, 27], "numer": [23, 24, 25, 26, 27], "instabl": [23, 24, 25, 26, 27], "__init__": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "If": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "doe": [23, 33, 34], "must": [23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36], "case": [23, 24, 25, 26, 27, 39], "ignor": [23, 24, 25, 26, 27], "return_grad": [23, 24, 25, 26, 27], "object": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "r": [23, 24, 25, 26, 27, 35, 36, 38], "context": [23, 24, 25, 26, 27], "either": [23, 24, 25, 26, 27, 35, 36], "result": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "per": [23, 24, 25, 26, 27], "bool": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "deriv": [23, 24, 25, 26, 27, 37, 38, 39], "nabla_": [23, 24, 25, 26, 27], "discrep": [24, 25], "kappa": [24, 25], "space": [24, 25, 26, 27, 39], "additive_chi2": [24, 25, 28, 31, 33, 35, 36], "chi2": [24, 25, 28, 31, 33, 35, 36], "cosin": [24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36], "poli": [24, 25, 28, 31, 33, 35, 36], "polynomi": [24, 25, 28, 31, 33, 35, 36], "laplacian": [24, 25, 28, 31, 33, 35, 36], "sigmoid": [24, 25, 28, 31, 33, 35, 36], "It": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "kernel_param": [24, 25, 28, 31, 33, 35, 36], "y_a": [25, 27], "y_b": [25, 27], "delta": [26, 27], "l1": [26, 27, 29, 32, 34], "manhattan": [26, 27, 29, 32, 34], "cityblock": [26, 27, 29, 32, 34], "paired_dist": [26, 27, 29, 32, 34], "solver": [28, 29, 30, 31, 32, 33, 34, 35, 36], "adam": [28, 29, 30, 31, 32, 33, 34, 35, 36], "verbos": [28, 29, 30, 31, 32, 33, 34, 35, 36], "form": [28, 29, 30, 31, 32, 33, 34, 35, 36], "neuron": [28, 29, 30, 31, 32, 33, 34, 35, 36], "epoch": [28, 29, 30, 31, 32, 33, 34, 35, 36], "singl": [28, 29, 30, 31, 32, 33, 34, 35, 36], "initi": [28, 29, 30, 31, 32, 33, 34, 35, 36], "learn": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "rate": [28, 29, 30, 31, 32, 33, 34, 35, 36], "step": [28, 29, 30, 31, 32, 33, 34, 35, 36], "updat": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "whether": [28, 29, 30, 31, 32, 33, 34, 35, 36], "sgd": [28, 29, 30, 31, 32, 33, 34, 35, 36], "stochast": [28, 29, 30, 31, 32, 33, 34, 35, 36], "kingma": [28, 29, 30, 31, 32, 33, 34, 35, 36], "diederik": [28, 29, 30, 31, 32, 33, 34, 35, 36], "jimmi": [28, 29, 30, 31, 32, 33, 34, 35, 36], "ba": [28, 29, 30, 31, 32, 33, 34, 35, 36], "batch": [28, 29, 30, 31, 32, 33, 34, 35, 36], "whole": [28, 29, 30, 31, 32, 35, 36], "messag": [28, 29, 30, 31, 32, 33, 34, 35, 36], "stdout": [28, 29, 30, 31, 32, 33, 34, 35, 36], "bia": [28, 29, 30, 31, 32, 33, 34, 35, 36], "loui": [28, 29, 31, 32, 35, 36, 37], "pierr": [28, 29, 31, 32, 35, 36, 37], "alexandr": [28, 29, 31, 32, 35, 36, 37], "charl": [28, 29, 31, 32, 35, 36, 37], "warith": [28, 29, 31, 32, 35, 36, 37], "micka\u00ebl": [28, 29, 31, 32, 35, 36, 37], "arnaud": [28, 29, 31, 32, 35, 36, 37], "freder": [28, 29, 31, 32, 35, 36, 37], "preciosio": [28, 29, 31, 32, 35, 36], "load_iri": [28, 29, 30, 31, 32, 35, 36, 38], "6949190522657067": 28, "attribut": [28, 29, 30, 31, 32, 33, 34, 35, 36], "w_": [28, 29, 30, 35], "b_": [28, 29, 30, 35], "bias": [28, 29, 30, 31, 32, 35, 36], "optimiser_": [28, 29, 30, 31, 32, 33, 34, 35, 36], "adamoptim": [28, 29, 30, 31, 32, 33, 34, 35, 36], "sgdoptim": [28, 29, 30, 31, 32, 33, 34, 35, 36], "chosen": [28, 29, 30, 31, 32, 33, 34, 35, 36], "were": [28, 29, 30, 31, 32, 33, 34, 35, 36], "n_iter_": [28, 29, 30, 31, 32, 33, 34, 35, 36], "took": [28, 29, 30, 31, 32, 33, 34, 35, 36], "converg": [28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "construct": [28, 29, 30, 31, 32, 33, 34, 35, 36], "present": [28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "api": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "convent": [28, 29, 30, 31, 32, 33, 34, 35, 36, 38], "self": [28, 29, 30, 31, 32, 33, 34, 35, 36], "estim": [28, 29, 30, 31, 32, 33, 34, 35, 36], "vector": [28, 29, 30, 31, 32, 33, 34, 35, 36], "get_gemini": [28, 29, 30, 31, 32, 33, 34, 35, 36], "get_param": [28, 29, 30, 31, 32, 33, 34, 35, 36], "deep": [28, 29, 30, 31, 32, 33, 34, 35, 36], "subobject": [28, 29, 30, 31, 32, 33, 34, 35, 36], "param": [28, 29, 30, 31, 32, 33, 34, 35, 36], "dict": [28, 29, 30, 31, 32, 33, 34, 35, 36], "name": [28, 29, 30, 31, 32, 33, 34, 35, 36], "membership": [28, 29, 30, 31, 32, 33, 34, 35, 36], "after": [28, 29, 30, 31, 32, 33, 34, 35, 36], "closest": [28, 29, 30, 31, 32, 33, 34, 35, 36], "seen": [28, 29, 30, 31, 32, 33, 34, 35, 36], "test": [28, 29, 30, 31, 32, 33, 34, 35, 36], "set_param": [28, 29, 30, 31, 32, 33, 34, 35, 36], "work": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "nest": [28, 29, 30, 31, 32, 33, 34, 35, 36], "pipelin": [28, 29, 30, 31, 32, 33, 34, 35, 36], "latter": [28, 29, 30, 31, 32, 33, 34, 35, 36], "__": [28, 29, 30, 31, 32, 33, 34, 35, 36], "possibl": [28, 29, 30, 31, 32, 33, 34, 35, 36], "linearmmd": [29, 30, 35], "6993348362264595": 29, "n_features_in": [29, 30], "reg": 30, "framework": 30, "describ": [30, 35, 36], "hyperparamet": 30, "maxim": [30, 35, 36], "ryan": 30, "gome": 30, "andrea": 30, "pietro": 30, "perona": 30, "00962912118121384": 30, "n_hidden_dim": [31, 32, 36], "7592155845461646": 31, "w1_": [31, 32, 36], "b1_": [31, 32, 36], "w2_": [31, 32, 36], "b2_": [31, 32, 36], "h_": [31, 32, 36], "7636482655127903": 32, "directli": [33, 34, 39], "x_i": [33, 34], "theta_": [33, 34], "ki": [33, 34], "contrarili": [33, 34], "part": [33, 34], "support": [33, 34, 37], "p_": [34, 38, 39], "vanilla": [35, 36], "variat": [35, 36], "bring": [35, 36, 38], "constraint": [35, 36], "ensur": [35, 36], "via": 35, "proxim": [35, 36], "variou": [35, 36], "repres": [35, 36], "typic": [35, 36], "scheme": [35, 36], "lassonet": [35, 36, 38, 39], "architectur": [35, 36, 39], "lemhadri": [35, 36, 38], "ruan": [35, 36, 38], "abraham": [35, 36, 38], "tibshirani": [35, 36, 38], "joint": [35, 36, 38, 39], "6940342321220005": 35, "retriev": [35, 36], "ind": [35, 36], "alpha_multipli": [35, 36], "min_featur": [35, 36], "restore_best_weight": [35, 36], "early_stopping_factor": [35, 36], "99": [35, 36], "max_pati": [35, 36], "unfold": [35, 36], "geometr": [35, 36], "remain": [35, 36], "amount": [35, 36], "histori": [35, 36], "kept": [35, 36], "certain": [35, 36], "percentag": [35, 36], "reduct": [35, 36], "made": [35, 36, 39], "retrain": [35, 36], "greater": [35, 36], "stop": [35, 36], "minim": [35, 36], "deem": [35, 36], "offer": [35, 36], "simultan": [35, 36], "good": [35, 36, 38], "few": [35, 36], "restor": [35, 36], "beyond": [35, 36], "upgrad": [35, 36], "too": [35, 36], "small": [35, 36, 37], "earli": [35, 36], "wait": [35, 36], "without": [35, 36, 37, 38], "improv": [35, 36, 38], "befor": [35, 36], "length": [35, 36], "sequenti": [35, 36], "group_penalti": [35, 36], "skip": [36, 39], "connect": [36, 39], "inspir": [36, 38, 39], "2021": [36, 38], "hierarchi": 36, "coeffici": 36, "rel": 36, "strength": 36, "766421183641077": 36, "w_skip_": 36, "thank": 37, "you": [37, 38, 39], "check": [37, 38], "realli": 37, "pleasur": 37, "dedic": 37, "theori": [37, 38], "allow": 37, "provid": [37, 38, 39], "user": [37, 38], "tool": 37, "written": 37, "scikit": [37, 38], "compat": 37, "extens": [37, 39], "http": 37, "io": 37, "main": 37, "found": 37, "com": 37, "instruct": 37, "pip": 37, "librari": [37, 39], "requir": [37, 39], "coupl": 37, "scientif": 37, "pot": 37, "repo": 37, "git": 37, "clone": 37, "cd": 37, "cite": 37, "neurip": 37, "inproceed": 37, "ohl2022generalis": 37, "author": 37, "micka": 37, "booktitl": 37, "editor": 37, "alic": 37, "h": [37, 38], "oh": [37, 38], "alekh": 37, "agarw": [37, 38], "daniel": 37, "belgrav": [37, 38], "kyunghyun": 37, "cho": [37, 38], "year": 37, "url": 37, "openreview": 37, "net": 37, "forum": 37, "id": 37, "0oy3pia": 37, "adp": 37, "ha": [37, 38], "been": 37, "french": 37, "govern": 37, "3ia": 37, "c\u00f4te": 37, "azur": 37, "invest": 37, "futur": 37, "project": 37, "manag": 37, "nation": 37, "research": [37, 38], "agenc": 37, "anr": 37, "19": 37, "p3ia": 37, "0002": 37, "also": 37, "franc": 37, "canada": 37, "fund": 37, "ffcr": 37, "contribut": 37, "partli": 37, "eu": 37, "horizon": 37, "2020": 37, "ai4media": 37, "contract": 37, "951911": 37, "special": 37, "jhonatan": 37, "torr": 37, "hi": 37, "insight": 37, "develop": 37, "short": 38, "descript": 38, "hint": 38, "about": 38, "For": [38, 39], "more": [38, 39], "detail": 38, "its": 38, "public": 38, "stand": 38, "novel": 38, "measur": 38, "custer": 38, "theta": [38, 39], "right": 38, "y_1": 38, "y_2": 38, "specif": [38, 39], "involv": 38, "theorem": 38, "easili": 38, "tractabl": 38, "cane": 38, "valuat": 38, "henc": 38, "assumpt": 38, "At": 38, "moment": 38, "report": 38, "fewer": 38, "practic": 38, "sever": 38, "merg": 38, "avail": 38, "loss": 38, "your": 38, "own": 38, "further": 38, "mainli": 38, "feel": 38, "interest": 38, "ed": 38, "machin": 38, "22": 38, "127": 38, "29": 38, "doi": 38, "48550": 38, "arxiv": 38, "2302": 38, "03391": 38, "mode": 39, "ad": 39, "constructor": 39, "achiev": 39, "regard": 39, "chose": 39, "yield": 39, "worst": 39, "manner": 39, "pairwise_kernel": 39, "choic": 39, "forc": 39, "usag": 39, "flexibl": 39, "yet": 39, "express": 39, "enough": 39, "term": 39, "simpler": 39, "induc": 39, "_basemmd": 39, "_basewasserstein": 39, "rewrit": 39, "_infer": 39, "_get_weight": 39, "_init_param": 39, "includ": 39}, "objects": {"gemclus.data": [[18, 0, 1, "", "celeux_one"], [19, 0, 1, "", "celeux_two"], [20, 0, 1, "", "draw_gmm"], [21, 0, 1, "", "gstm"], [22, 0, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[23, 1, 1, "", "MI"], [24, 1, 1, "", "MMDOvA"], [25, 1, 1, "", "MMDOvO"], [26, 1, 1, "", "WassersteinOvA"], [27, 1, 1, "", "WassersteinOvO"]], "gemclus.gemini.MI": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "compute_affinity"], [23, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvA": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "compute_affinity"], [24, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvO": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "compute_affinity"], [25, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvA": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "compute_affinity"], [26, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvO": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "compute_affinity"], [27, 2, 1, "", "evaluate"]], "gemclus.linear": [[28, 1, 1, "", "LinearMMD"], [29, 1, 1, "", "LinearWasserstein"], [30, 1, 1, "", "RIM"]], "gemclus.linear.LinearMMD": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "fit_predict"], [28, 2, 1, "", "get_gemini"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "predict_proba"], [28, 2, 1, "", "score"], [28, 2, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "fit_predict"], [29, 2, 1, "", "get_gemini"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "predict_proba"], [29, 2, 1, "", "score"], [29, 2, 1, "", "set_params"]], "gemclus.linear.RIM": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "fit_predict"], [30, 2, 1, "", "get_gemini"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "predict_proba"], [30, 2, 1, "", "score"], [30, 2, 1, "", "set_params"]], "gemclus.mlp": [[31, 1, 1, "", "MLPMMD"], [32, 1, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "fit_predict"], [31, 2, 1, "", "get_gemini"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "predict_proba"], [31, 2, 1, "", "score"], [31, 2, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "fit_predict"], [32, 2, 1, "", "get_gemini"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "predict"], [32, 2, 1, "", "predict_proba"], [32, 2, 1, "", "score"], [32, 2, 1, "", "set_params"]], "gemclus.nonparametric": [[33, 1, 1, "", "CategoricalMMD"], [34, 1, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "fit"], [33, 2, 1, "", "fit_predict"], [33, 2, 1, "", "get_gemini"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "predict"], [33, 2, 1, "", "predict_proba"], [33, 2, 1, "", "score"], [33, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "fit_predict"], [34, 2, 1, "", "get_gemini"], [34, 2, 1, "", "get_params"], [34, 2, 1, "", "predict"], [34, 2, 1, "", "predict_proba"], [34, 2, 1, "", "score"], [34, 2, 1, "", "set_params"]], "gemclus.sparse": [[35, 1, 1, "", "SparseLinearMMD"], [36, 1, 1, "", "SparseMLPMMD"]], "gemclus.sparse.SparseLinearMMD": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "fit"], [35, 2, 1, "", "fit_predict"], [35, 2, 1, "", "get_gemini"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "get_selection"], [35, 2, 1, "", "path"], [35, 2, 1, "", "predict"], [35, 2, 1, "", "predict_proba"], [35, 2, 1, "", "score"], [35, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "fit"], [36, 2, 1, "", "fit_predict"], [36, 2, 1, "", "get_gemini"], [36, 2, 1, "", "get_params"], [36, 2, 1, "", "get_selection"], [36, 2, 1, "", "path"], [36, 2, 1, "", "predict"], [36, 2, 1, "", "predict_proba"], [36, 2, 1, "", "score"], [36, 2, 1, "", "set_params"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"gemclu": [0, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "api": 0, "score": [0, 6, 14, 15], "gemini": [0, 6, 10, 14, 15, 23, 24, 25, 26, 27, 37, 38, 39], "cluster": [0, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 37, 38], "model": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15], "dens": 0, "nonparametr": [0, 8, 33, 34], "spars": [0, 2, 3, 35, 36], "dataset": [0, 2, 3, 4, 7, 13, 15], "gener": [0, 6, 9, 10, 11], "featur": [1, 2, 3, 4, 6, 38], "select": [1, 2, 3, 4, 6, 38], "us": [2, 3, 18, 20, 21, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37], "mmd": [2, 3, 10], "ovo": 2, "logist": [2, 13], "regress": [2, 13], "load": [2, 3, 4, 13, 15], "simpl": [2, 3, 4, 13, 15], "synthet": [2, 3, 4, 13], "train": [2, 3, 4, 7, 8, 9, 11, 12, 13, 15], "path": [2, 3, 4], "result": [2, 3, 4], "final": [2, 3, 8, 9, 10, 11, 12, 13], "ova": 3, "mlp": [3, 10, 31, 32], "group": 4, "linear": [4, 28, 29, 30], "comput": [5, 8, 11, 16, 17], "time": [5, 16, 17], "exampl": [6, 9, 10, 18, 20, 21, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39], "discrimin": [6, 37, 38, 39], "compar": 7, "circl": 7, "kernel": 7, "chang": 7, "draw": [7, 8, 11, 12], "sampl": [7, 8, 11, 12], "displai": 7, "predict": 7, "decis": [7, 9, 11], "boundari": [7, 9, 11], "graph": 8, "node": 8, "from": [8, 12], "gmm": [8, 12], "creat": [8, 10], "edg": 8, "pre": [8, 11], "specif": [8, 11], "metric": [8, 11], "between": [8, 11], "map": 9, "mixtur": 9, "gaussian": 9, "low": 9, "degre": 9, "student": 9, "distribut": [9, 39], "data": [9, 10, 18, 19, 20, 21, 22], "an": 10, "introduc": 10, "fit": 10, "plot": 10, "two": [11, 15], "interlac": 11, "moon": 11, "non": 12, "parametr": 12, "rim": [13, 30], "ani": 15, "real": 15, "supervis": 15, "celeux_on": 18, "celeux_two": 19, "draw_gmm": 20, "gstm": 21, "multivariate_student_t": 22, "mi": 23, "mmdova": 24, "mmdovo": 25, "wassersteinova": 26, "wassersteinovo": 27, "linearmmd": 28, "linearwasserstein": 29, "mlpmmd": 31, "mlpwasserstein": 32, "categoricalmmd": 33, "categoricalwasserstein": 34, "sparselinearmmd": 35, "sparsemlpmmd": 36, "welcom": 37, "document": 37, "content": [37, 39], "A": 37, "packag": [37, 39], "instal": 37, "offici": 37, "latest": 37, "version": 37, "refer": [37, 38], "acknowledg": 37, "quick": 38, "start": 38, "what": [38, 39], "i": 38, "do": 38, "user": 39, "guid": 39, "which": 39, "ar": 39, "implement": 39, "avail": 39, "basic": 39}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"GEMCLUS API": [[0, "gemclus-api"]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [6, "scoring-with-gemini"], [14, "scoring-with-gemini"], [15, "scoring-with-gemini"]], "Clustering models": [[0, "clustering-models"]], "Dense models": [[0, "dense-models"]], "Nonparametric models": [[0, "nonparametric-models"]], "Sparse models": [[0, "sparse-models"]], "Dataset generation": [[0, "dataset-generation"]], "Feature selection": [[1, "feature-selection"], [6, "feature-selection"]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[2, "feature-selection-using-the-sparse-mmd-ovo-logistic-regression"]], "Load a simple synthetic dataset": [[2, "load-a-simple-synthetic-dataset"], [3, "load-a-simple-synthetic-dataset"], [4, "load-a-simple-synthetic-dataset"], [13, "load-a-simple-synthetic-dataset"]], "Train the model": [[2, "train-the-model"], [3, "train-the-model"], [4, "train-the-model"], [8, "train-the-model"], [11, "train-the-model"], [12, "train-the-model"], [13, "train-the-model"]], "Path results": [[2, "path-results"], [3, "path-results"], [4, "path-results"]], "Final Clustering": [[2, "final-clustering"], [3, "final-clustering"], [8, "final-clustering"], [9, "final-clustering"], [11, "final-clustering"], [12, "final-clustering"], [13, "final-clustering"]], "Feature selection using the Sparse MMD OvA (MLP)": [[3, "feature-selection-using-the-sparse-mmd-ova-mlp"]], "Grouped Feature selection with a linear model": [[4, "grouped-feature-selection-with-a-linear-model"]], "Computation times": [[5, "computation-times"], [16, "computation-times"], [17, "computation-times"]], "General examples": [[6, "general-examples"]], "Discriminative clustering": [[6, "discriminative-clustering"]], "Comparative clustering of circles dataset with kernel change": [[7, "comparative-clustering-of-circles-dataset-with-kernel-change"]], "Draw samples for the circle dataset": [[7, "draw-samples-for-the-circle-dataset"]], "Training clustering models": [[7, "training-clustering-models"]], "Display predictions and decision boundaries": [[7, "display-predictions-and-decision-boundaries"]], "Graph node clustering with a nonparametric model": [[8, "graph-node-clustering-with-a-nonparametric-model"]], "Draw samples from a GMM": [[8, "draw-samples-from-a-gmm"], [12, "draw-samples-from-a-gmm"]], "Create the graph edges": [[8, "create-the-graph-edges"]], "Pre-compute a specific metric between samples": [[8, "pre-compute-a-specific-metric-between-samples"], [11, "pre-compute-a-specific-metric-between-samples"]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[9, "example-of-decision-boundary-map-for-a-mixture-of-gaussian-and-low-degree-student-distributions"]], "Generate the data": [[9, "generate-the-data"]], "Train the model for clustering": [[9, "train-the-model-for-clustering"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[10, "an-introducing-example-to-clustering-with-an-mlp-and-the-mmd-gemini"]], "Generate data": [[10, "generate-data"]], "Create the MLP clustering model and fit it": [[10, "create-the-mlp-clustering-model-and-fit-it"]], "Plot the final clustering": [[10, "plot-the-final-clustering"]], "Drawing a decision boundary between two interlacing moons": [[11, "drawing-a-decision-boundary-between-two-interlacing-moons"]], "Generate two interlacing moons": [[11, "generate-two-interlacing-moons"]], "Non parametric clustering": [[12, "non-parametric-clustering"]], "Simple logistic regression with RIM": [[13, "simple-logistic-regression-with-rim"]], "Scoring any model with GEMINI": [[15, "scoring-any-model-with-gemini"]], "Load a simple real dataset": [[15, "load-a-simple-real-dataset"]], "Train two supervised models": [[15, "train-two-supervised-models"]], "Supervised Scoring with GEMINI": [[15, "supervised-scoring-with-gemini"]], "gemclus.data.celeux_one": [[18, "gemclus-data-celeux-one"]], "Examples using gemclus.data.celeux_one": [[18, "examples-using-gemclus-data-celeux-one"]], "gemclus.data.celeux_two": [[19, "gemclus-data-celeux-two"]], "gemclus.data.draw_gmm": [[20, "gemclus-data-draw-gmm"]], "Examples using gemclus.data.draw_gmm": [[20, "examples-using-gemclus-data-draw-gmm"]], "gemclus.data.gstm": [[21, "gemclus-data-gstm"]], "Examples using gemclus.data.gstm": [[21, "examples-using-gemclus-data-gstm"]], "gemclus.data.multivariate_student_t": [[22, "gemclus-data-multivariate-student-t"]], "gemclus.gemini.MI": [[23, "gemclus-gemini-mi"]], "gemclus.gemini.MMDOvA": [[24, "gemclus-gemini-mmdova"]], "gemclus.gemini.MMDOvO": [[25, "gemclus-gemini-mmdovo"]], "gemclus.gemini.WassersteinOvA": [[26, "gemclus-gemini-wassersteinova"]], "Examples using gemclus.gemini.WassersteinOvA": [[26, "examples-using-gemclus-gemini-wassersteinova"]], "gemclus.gemini.WassersteinOvO": [[27, "gemclus-gemini-wassersteinovo"]], "gemclus.linear.LinearMMD": [[28, "gemclus-linear-linearmmd"]], "gemclus.linear.LinearWasserstein": [[29, "gemclus-linear-linearwasserstein"]], "Examples using gemclus.linear.LinearWasserstein": [[29, "examples-using-gemclus-linear-linearwasserstein"]], "gemclus.linear.RIM": [[30, "gemclus-linear-rim"]], "Examples using gemclus.linear.RIM": [[30, "examples-using-gemclus-linear-rim"]], "gemclus.mlp.MLPMMD": [[31, "gemclus-mlp-mlpmmd"]], "Examples using gemclus.mlp.MLPMMD": [[31, "examples-using-gemclus-mlp-mlpmmd"]], "gemclus.mlp.MLPWasserstein": [[32, "gemclus-mlp-mlpwasserstein"]], "Examples using gemclus.mlp.MLPWasserstein": [[32, "examples-using-gemclus-mlp-mlpwasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[33, "gemclus-nonparametric-categoricalmmd"]], "Examples using gemclus.nonparametric.CategoricalMMD": [[33, "examples-using-gemclus-nonparametric-categoricalmmd"]], "gemclus.nonparametric.CategoricalWasserstein": [[34, "gemclus-nonparametric-categoricalwasserstein"]], "Examples using gemclus.nonparametric.CategoricalWasserstein": [[34, "examples-using-gemclus-nonparametric-categoricalwasserstein"]], "gemclus.sparse.SparseLinearMMD": [[35, "gemclus-sparse-sparselinearmmd"]], "Examples using gemclus.sparse.SparseLinearMMD": [[35, "examples-using-gemclus-sparse-sparselinearmmd"]], "gemclus.sparse.SparseMLPMMD": [[36, "gemclus-sparse-sparsemlpmmd"]], "Examples using gemclus.sparse.SparseMLPMMD": [[36, "examples-using-gemclus-sparse-sparsemlpmmd"]], "Welcome to GemClus documentation!": [[37, "welcome-to-gemclus-documentation"]], "Contents": [[37, "contents"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[37, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "Installation": [[37, "installation"]], "Official package": [[37, "official-package"]], "Latest version": [[37, "latest-version"]], "Reference": [[37, "reference"]], "Acknowledgements": [[37, "acknowledgements"]], "Quick start on gemclus": [[38, "quick-start-on-gemclus"]], "What is GEMINI": [[38, "what-is-gemini"]], "Doing discriminative clustering": [[38, "doing-discriminative-clustering"]], "Selecting features in clustering": [[38, "selecting-features-in-clustering"]], "References": [[38, "references"]], "User Guide": [[39, "user-guide"]], "Content of the package": [[39, "content-of-the-package"]], "Which GEMINIs are implemented": [[39, "which-geminis-are-implemented"]], "What discriminative distributions are available": [[39, "what-discriminative-distributions-are-available"]], "Basic examples": [[39, "basic-examples"]]}, "indexentries": {"celeux_one() (in module gemclus.data)": [[18, "gemclus.data.celeux_one"]], "celeux_two() (in module gemclus.data)": [[19, "gemclus.data.celeux_two"]], "draw_gmm() (in module gemclus.data)": [[20, "gemclus.data.draw_gmm"]], "gstm() (in module gemclus.data)": [[21, "gemclus.data.gstm"]], "multivariate_student_t() (in module gemclus.data)": [[22, "gemclus.data.multivariate_student_t"]], "mi (class in gemclus.gemini)": [[23, "gemclus.gemini.MI"]], "__init__() (gemclus.gemini.mi method)": [[23, "gemclus.gemini.MI.__init__"]], "compute_affinity() (gemclus.gemini.mi method)": [[23, "gemclus.gemini.MI.compute_affinity"]], "evaluate() (gemclus.gemini.mi method)": [[23, "gemclus.gemini.MI.evaluate"]], "mmdova (class in gemclus.gemini)": [[24, "gemclus.gemini.MMDOvA"]], "__init__() (gemclus.gemini.mmdova method)": [[24, "gemclus.gemini.MMDOvA.__init__"]], "compute_affinity() (gemclus.gemini.mmdova method)": [[24, "gemclus.gemini.MMDOvA.compute_affinity"]], "evaluate() (gemclus.gemini.mmdova method)": [[24, "gemclus.gemini.MMDOvA.evaluate"]], "mmdovo (class in gemclus.gemini)": [[25, "gemclus.gemini.MMDOvO"]], "__init__() (gemclus.gemini.mmdovo method)": [[25, "gemclus.gemini.MMDOvO.__init__"]], "compute_affinity() (gemclus.gemini.mmdovo method)": [[25, "gemclus.gemini.MMDOvO.compute_affinity"]], "evaluate() (gemclus.gemini.mmdovo method)": [[25, "gemclus.gemini.MMDOvO.evaluate"]], "wassersteinova (class in gemclus.gemini)": [[26, "gemclus.gemini.WassersteinOvA"]], "__init__() (gemclus.gemini.wassersteinova method)": [[26, "gemclus.gemini.WassersteinOvA.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinova method)": [[26, "gemclus.gemini.WassersteinOvA.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinova method)": [[26, "gemclus.gemini.WassersteinOvA.evaluate"]], "wassersteinovo (class in gemclus.gemini)": [[27, "gemclus.gemini.WassersteinOvO"]], "__init__() (gemclus.gemini.wassersteinovo method)": [[27, "gemclus.gemini.WassersteinOvO.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinovo method)": [[27, "gemclus.gemini.WassersteinOvO.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinovo method)": [[27, "gemclus.gemini.WassersteinOvO.evaluate"]], "linearmmd (class in gemclus.linear)": [[28, "gemclus.linear.LinearMMD"]], "__init__() (gemclus.linear.linearmmd method)": [[28, "gemclus.linear.LinearMMD.__init__"]], "fit() (gemclus.linear.linearmmd method)": [[28, "gemclus.linear.LinearMMD.fit"]], "fit_predict() (gemclus.linear.linearmmd method)": [[28, "gemclus.linear.LinearMMD.fit_predict"]], "get_gemini() (gemclus.linear.linearmmd method)": [[28, "gemclus.linear.LinearMMD.get_gemini"]], "get_params() (gemclus.linear.linearmmd method)": [[28, "gemclus.linear.LinearMMD.get_params"]], "predict() (gemclus.linear.linearmmd method)": [[28, "gemclus.linear.LinearMMD.predict"]], "predict_proba() (gemclus.linear.linearmmd method)": [[28, "gemclus.linear.LinearMMD.predict_proba"]], "score() (gemclus.linear.linearmmd method)": [[28, "gemclus.linear.LinearMMD.score"]], "set_params() (gemclus.linear.linearmmd method)": [[28, "gemclus.linear.LinearMMD.set_params"]], "linearwasserstein (class in gemclus.linear)": [[29, "gemclus.linear.LinearWasserstein"]], "__init__() (gemclus.linear.linearwasserstein method)": [[29, "gemclus.linear.LinearWasserstein.__init__"]], "fit() (gemclus.linear.linearwasserstein method)": [[29, "gemclus.linear.LinearWasserstein.fit"]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[29, "gemclus.linear.LinearWasserstein.fit_predict"]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[29, "gemclus.linear.LinearWasserstein.get_gemini"]], "get_params() (gemclus.linear.linearwasserstein method)": [[29, "gemclus.linear.LinearWasserstein.get_params"]], "predict() (gemclus.linear.linearwasserstein method)": [[29, "gemclus.linear.LinearWasserstein.predict"]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[29, "gemclus.linear.LinearWasserstein.predict_proba"]], "score() (gemclus.linear.linearwasserstein method)": [[29, "gemclus.linear.LinearWasserstein.score"]], "set_params() (gemclus.linear.linearwasserstein method)": [[29, "gemclus.linear.LinearWasserstein.set_params"]], "rim (class in gemclus.linear)": [[30, "gemclus.linear.RIM"]], "__init__() (gemclus.linear.rim method)": [[30, "gemclus.linear.RIM.__init__"]], "fit() (gemclus.linear.rim method)": [[30, "gemclus.linear.RIM.fit"]], "fit_predict() (gemclus.linear.rim method)": [[30, "gemclus.linear.RIM.fit_predict"]], "get_gemini() (gemclus.linear.rim method)": [[30, "gemclus.linear.RIM.get_gemini"]], "get_params() (gemclus.linear.rim method)": [[30, "gemclus.linear.RIM.get_params"]], "predict() (gemclus.linear.rim method)": [[30, "gemclus.linear.RIM.predict"]], "predict_proba() (gemclus.linear.rim method)": [[30, "gemclus.linear.RIM.predict_proba"]], "score() (gemclus.linear.rim method)": [[30, "gemclus.linear.RIM.score"]], "set_params() (gemclus.linear.rim method)": [[30, "gemclus.linear.RIM.set_params"]], "mlpmmd (class in gemclus.mlp)": [[31, "gemclus.mlp.MLPMMD"]], "__init__() (gemclus.mlp.mlpmmd method)": [[31, "gemclus.mlp.MLPMMD.__init__"]], "fit() (gemclus.mlp.mlpmmd method)": [[31, "gemclus.mlp.MLPMMD.fit"]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[31, "gemclus.mlp.MLPMMD.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[31, "gemclus.mlp.MLPMMD.get_gemini"]], "get_params() (gemclus.mlp.mlpmmd method)": [[31, "gemclus.mlp.MLPMMD.get_params"]], "predict() (gemclus.mlp.mlpmmd method)": [[31, "gemclus.mlp.MLPMMD.predict"]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[31, "gemclus.mlp.MLPMMD.predict_proba"]], "score() (gemclus.mlp.mlpmmd method)": [[31, "gemclus.mlp.MLPMMD.score"]], "set_params() (gemclus.mlp.mlpmmd method)": [[31, "gemclus.mlp.MLPMMD.set_params"]], "mlpwasserstein (class in gemclus.mlp)": [[32, "gemclus.mlp.MLPWasserstein"]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[32, "gemclus.mlp.MLPWasserstein.__init__"]], "fit() (gemclus.mlp.mlpwasserstein method)": [[32, "gemclus.mlp.MLPWasserstein.fit"]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[32, "gemclus.mlp.MLPWasserstein.fit_predict"]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[32, "gemclus.mlp.MLPWasserstein.get_gemini"]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[32, "gemclus.mlp.MLPWasserstein.get_params"]], "predict() (gemclus.mlp.mlpwasserstein method)": [[32, "gemclus.mlp.MLPWasserstein.predict"]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[32, "gemclus.mlp.MLPWasserstein.predict_proba"]], "score() (gemclus.mlp.mlpwasserstein method)": [[32, "gemclus.mlp.MLPWasserstein.score"]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[32, "gemclus.mlp.MLPWasserstein.set_params"]], "categoricalmmd (class in gemclus.nonparametric)": [[33, "gemclus.nonparametric.CategoricalMMD"]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[33, "gemclus.nonparametric.CategoricalMMD.__init__"]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[33, "gemclus.nonparametric.CategoricalMMD.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[33, "gemclus.nonparametric.CategoricalMMD.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[33, "gemclus.nonparametric.CategoricalMMD.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[33, "gemclus.nonparametric.CategoricalMMD.get_params"]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[33, "gemclus.nonparametric.CategoricalMMD.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[33, "gemclus.nonparametric.CategoricalMMD.predict_proba"]], "score() (gemclus.nonparametric.categoricalmmd method)": [[33, "gemclus.nonparametric.CategoricalMMD.score"]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[33, "gemclus.nonparametric.CategoricalMMD.set_params"]], "categoricalwasserstein (class in gemclus.nonparametric)": [[34, "gemclus.nonparametric.CategoricalWasserstein"]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[34, "gemclus.nonparametric.CategoricalWasserstein.__init__"]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[34, "gemclus.nonparametric.CategoricalWasserstein.fit"]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[34, "gemclus.nonparametric.CategoricalWasserstein.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[34, "gemclus.nonparametric.CategoricalWasserstein.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[34, "gemclus.nonparametric.CategoricalWasserstein.get_params"]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[34, "gemclus.nonparametric.CategoricalWasserstein.predict"]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[34, "gemclus.nonparametric.CategoricalWasserstein.predict_proba"]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[34, "gemclus.nonparametric.CategoricalWasserstein.score"]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[34, "gemclus.nonparametric.CategoricalWasserstein.set_params"]], "sparselinearmmd (class in gemclus.sparse)": [[35, "gemclus.sparse.SparseLinearMMD"]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[35, "gemclus.sparse.SparseLinearMMD.__init__"]], "fit() (gemclus.sparse.sparselinearmmd method)": [[35, "gemclus.sparse.SparseLinearMMD.fit"]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[35, "gemclus.sparse.SparseLinearMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[35, "gemclus.sparse.SparseLinearMMD.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[35, "gemclus.sparse.SparseLinearMMD.get_params"]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[35, "gemclus.sparse.SparseLinearMMD.get_selection"]], "path() (gemclus.sparse.sparselinearmmd method)": [[35, "gemclus.sparse.SparseLinearMMD.path"]], "predict() (gemclus.sparse.sparselinearmmd method)": [[35, "gemclus.sparse.SparseLinearMMD.predict"]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[35, "gemclus.sparse.SparseLinearMMD.predict_proba"]], "score() (gemclus.sparse.sparselinearmmd method)": [[35, "gemclus.sparse.SparseLinearMMD.score"]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[35, "gemclus.sparse.SparseLinearMMD.set_params"]], "sparsemlpmmd (class in gemclus.sparse)": [[36, "gemclus.sparse.SparseMLPMMD"]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[36, "gemclus.sparse.SparseMLPMMD.__init__"]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[36, "gemclus.sparse.SparseMLPMMD.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[36, "gemclus.sparse.SparseMLPMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[36, "gemclus.sparse.SparseMLPMMD.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[36, "gemclus.sparse.SparseMLPMMD.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[36, "gemclus.sparse.SparseMLPMMD.get_selection"]], "path() (gemclus.sparse.sparsemlpmmd method)": [[36, "gemclus.sparse.SparseMLPMMD.path"]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[36, "gemclus.sparse.SparseMLPMMD.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[36, "gemclus.sparse.SparseMLPMMD.predict_proba"]], "score() (gemclus.sparse.sparsemlpmmd method)": [[36, "gemclus.sparse.SparseMLPMMD.score"]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[36, "gemclus.sparse.SparseMLPMMD.set_params"]]}})