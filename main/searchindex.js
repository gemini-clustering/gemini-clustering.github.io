Search.setIndex({"docnames": ["api", "auto_examples/index", "auto_examples/plot_feature_selection_linear", "auto_examples/plot_feature_selection_mlp", "auto_examples/plot_gemini_scoring", "auto_examples/plot_graph_node_clustering", "auto_examples/plot_grouped_selection", "auto_examples/plot_gstm", "auto_examples/plot_intro_mlp_mmd", "auto_examples/plot_moon_clustering", "auto_examples/plot_nonparametric_clustering", "auto_examples/plot_rim", "auto_examples/sg_execution_times", "generated/gemclus.data.celeux_one", "generated/gemclus.data.celeux_two", "generated/gemclus.data.draw_gmm", "generated/gemclus.data.gstm", "generated/gemclus.data.multivariate_student_t", "generated/gemclus.gemini.MI", "generated/gemclus.gemini.MMDOvA", "generated/gemclus.gemini.MMDOvO", "generated/gemclus.gemini.WassersteinOvA", "generated/gemclus.gemini.WassersteinOvO", "generated/gemclus.linear.LinearMMD", "generated/gemclus.linear.LinearWasserstein", "generated/gemclus.linear.RIM", "generated/gemclus.mlp.MLPMMD", "generated/gemclus.mlp.MLPWasserstein", "generated/gemclus.nonparametric.CategoricalMMD", "generated/gemclus.nonparametric.CategoricalWasserstein", "generated/gemclus.sparse.SparseLinearMMD", "generated/gemclus.sparse.SparseMLPMMD", "index", "quick_start", "user_guide"], "filenames": ["api.rst", "auto_examples/index.rst", "auto_examples/plot_feature_selection_linear.rst", "auto_examples/plot_feature_selection_mlp.rst", "auto_examples/plot_gemini_scoring.rst", "auto_examples/plot_graph_node_clustering.rst", "auto_examples/plot_grouped_selection.rst", "auto_examples/plot_gstm.rst", "auto_examples/plot_intro_mlp_mmd.rst", "auto_examples/plot_moon_clustering.rst", "auto_examples/plot_nonparametric_clustering.rst", "auto_examples/plot_rim.rst", "auto_examples/sg_execution_times.rst", "generated/gemclus.data.celeux_one.rst", "generated/gemclus.data.celeux_two.rst", "generated/gemclus.data.draw_gmm.rst", "generated/gemclus.data.gstm.rst", "generated/gemclus.data.multivariate_student_t.rst", "generated/gemclus.gemini.MI.rst", "generated/gemclus.gemini.MMDOvA.rst", "generated/gemclus.gemini.MMDOvO.rst", "generated/gemclus.gemini.WassersteinOvA.rst", "generated/gemclus.gemini.WassersteinOvO.rst", "generated/gemclus.linear.LinearMMD.rst", "generated/gemclus.linear.LinearWasserstein.rst", "generated/gemclus.linear.RIM.rst", "generated/gemclus.mlp.MLPMMD.rst", "generated/gemclus.mlp.MLPWasserstein.rst", "generated/gemclus.nonparametric.CategoricalMMD.rst", "generated/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/gemclus.sparse.SparseLinearMMD.rst", "generated/gemclus.sparse.SparseMLPMMD.rst", "index.rst", "quick_start.rst", "user_guide.rst"], "titles": ["GEMCLUS API", "General examples", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Scoring any model with GEMINI", "Graph node clustering with a nonparametric model", "Grouped Feature selection with a linear model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "Welcome to GemClus documentation!", "Quick start on gemclus", "User guide : contents"], "terms": {"The": [0, 2, 3, 4, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "packag": [0, 33], "current": [0, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 34], "contain": [0, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31], "simpl": [0, 1, 5, 10, 12, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "mlp": [0, 1, 7, 9, 12, 31, 33], "logist": [0, 1, 3, 4, 6, 12, 13, 23, 24, 25, 30, 31, 34], "regress": [0, 1, 3, 4, 6, 12, 13, 23, 24, 25, 30, 31, 34], "all": [0, 1, 2, 3, 4, 5, 6, 9, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34], "featur": [0, 1, 7, 8, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34], "well": [0, 7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34], "sparsiti": [0, 30, 31, 33, 34], "constrain": [0, 6, 34], "variant": 0, "follow": [0, 5, 25, 32], "class": [0, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34], "implement": [0, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32], "basic": 0, "evalu": [0, 2, 4, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "ani": [0, 1, 12, 18, 21, 30, 31, 33, 34], "condit": [0, 18, 19, 20, 21, 22, 28, 29], "distribut": [0, 1, 2, 3, 6, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 33], "These": 0, "ar": [0, 2, 3, 5, 6, 7, 9, 10, 11, 13, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "base": [0, 1, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34], "standard": 0, "like": [0, 7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "one": [0, 4, 6, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34], "hidden": [0, 26, 27, 31, 34], "layer": [0, 26, 27, 30, 31, 34], "neural": [0, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "network": [0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "have": [0, 4, 23, 24, 25, 26, 27, 28, 29, 30, 31], "paramet": [0, 5, 6, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "assign": [0, 5, 6, 10, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "data": [0, 2, 4, 5, 6, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "sampl": [0, 2, 3, 4, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34], "accord": [0, 5, 11], "indic": [0, 5, 30, 31], "consequ": [0, 7, 28, 29], "do": [0, 4, 5, 9, 11, 28, 29, 32], "depend": [0, 2, 3, 5, 6, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "locat": [0, 16], "overal": [0, 32], "can": [0, 4, 10, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "us": [0, 1, 4, 5, 6, 9, 10, 11, 12, 19, 20, 22, 23, 33, 34], "decis": [0, 1, 11, 12, 16, 24, 27, 34], "boundari": [0, 1, 11, 12, 16, 24, 27, 34], "hyper": 0, "howev": [0, 34], "underli": 0, "cannot": 0, "unseen": 0, "predict": [0, 2, 3, 4, 7, 8, 9, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "train": [0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "progress": [0, 2, 3, 6, 23, 24, 25, 26, 27, 28, 29, 30, 31], "remov": 0, "thei": [0, 4], "select": [0, 1, 12, 13, 14, 30, 31, 34], "subset": 0, "which": [0, 2, 3, 5, 6, 9, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 30, 31, 33], "mai": [0, 7, 32, 33], "enhanc": 0, "interpret": 0, "thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "function": [0, 5, 9, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34], "synthet": 0, "we": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 32, 33, 34], "give": [1, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "here": [1, 4, 5, 7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "some": [1, 6, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34], "how": [1, 2, 3, 4, 6, 10, 11, 13, 16, 33, 34], "our": [1, 3, 5, 6, 9, 32, 33], "model": [1, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34], "gemini": [1, 2, 3, 5, 6, 7, 9, 10, 12, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31], "an": [1, 2, 3, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34], "introduc": [1, 12, 26], "cluster": [1, 4, 6, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34], "mmd": [1, 12, 13, 19, 20, 23, 24, 25, 26, 27, 28, 30, 31, 34], "non": [1, 5, 12, 14, 15, 28], "parametr": [1, 5, 12, 15, 28, 33], "map": [1, 12, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31], "mixtur": [1, 5, 11, 12, 13, 14, 15, 16, 24], "gaussian": [1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 24], "low": [1, 12, 16, 24], "degre": [1, 12, 16, 17, 24], "student": [1, 12, 16, 17, 24], "spars": [1, 5, 6, 9, 12, 13, 23, 24, 25, 26, 27, 28, 29, 33, 34], "ovo": [1, 5, 8, 10, 12, 13, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34], "draw": [1, 7, 12, 13, 14, 15, 16, 17, 27], "between": [1, 12, 18, 19, 20, 21, 22, 27, 31, 33, 34], "two": [1, 12, 20, 22, 26, 27, 30, 33], "interlac": [1, 12, 27], "moon": [1, 12, 27], "rim": [1, 12], "score": [1, 2, 3, 5, 6, 10, 11, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "group": [1, 3, 12, 30, 31, 34], "linear": [1, 4, 7, 9, 11, 12, 19, 20, 26, 27, 28, 30, 31, 34], "graph": [1, 9, 10, 12, 15, 29], "node": [1, 10, 12, 15, 29], "nonparametr": [1, 10, 12, 15], "ova": [1, 4, 12, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34], "download": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32], "python": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "code": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "auto_examples_python": 1, "zip": 1, "jupyt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "notebook": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "auto_examples_jupyt": 1, "galleri": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 34], "sphinx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "go": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32], "end": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "full": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "exampl": [2, 3, 4, 5, 6, 9, 10, 11, 12, 23, 32], "In": [2, 3, 5, 6, 8, 11, 16, 32, 33, 34], "ask": [2, 3, 6, 33], "gemclu": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 34], "sparselinearmmd": [2, 6, 31, 34], "perform": [2, 3, 4, 5, 6, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "where": [2, 3, 4, 6, 7, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "regularis": [2, 3, 6, 11, 25], "penalti": [2, 3, 4, 6, 11, 25, 30, 31, 34], "i": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34], "increas": [2, 3, 6, 30, 31], "until": [2, 3, 6, 30, 31], "2": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 23, 24, 25, 26, 27, 30, 31, 33, 34], "discard": [2, 3, 6], "keep": [2, 3, 34], "best": [2, 3, 30, 31], "weight": [2, 3, 23, 24, 25, 26, 27, 28, 29, 30, 31], "minimum": [2, 3, 30, 31], "number": [2, 3, 5, 10, 13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "maintain": [2, 3], "close": [2, 3, 13, 16], "90": [2, 3], "maximum": [2, 3, 5, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31], "valu": [2, 3, 5, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "encount": [2, 3], "dure": [2, 3, 23, 24, 25, 26, 27, 28, 29, 30, 31], "consist": [2, 3, 6, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "3": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "isotrop": [2, 3, 13], "so": [2, 3, 4, 7, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34], "find": [2, 3, 6, 7, 9, 32], "5d": 2, "20": [2, 13, 26, 27, 31], "noisi": [2, 3, 6, 13, 14], "variabl": [2, 3, 5, 6, 13, 14, 30, 31], "thu": [2, 3, 6, 33], "optim": [2, 3, 6, 9], "solut": [2, 3, 6, 9, 30, 31], "should": [2, 3, 6, 18, 19, 20, 21, 22], "onli": [2, 3, 5, 6, 7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34], "5": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 30, 31], "relev": [2, 3, 6], "suffici": [2, 3, 6], "get": [2, 3, 6, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "correct": [2, 3, 6], "import": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 23, 24, 25, 26, 27, 30, 31, 33], "numpi": [2, 3, 4, 5, 6, 7, 9, 10, 11, 32], "np": [2, 3, 4, 5, 6, 7, 9, 10, 11], "from": [2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34], "matplotlib": [2, 3, 5, 6, 7, 8, 9, 10, 11], "pyplot": [2, 3, 5, 6, 7, 8, 9, 10, 11], "plt": [2, 3, 5, 6, 7, 8, 9, 10, 11], "sklearn": [2, 3, 4, 5, 8, 9, 10, 11, 23, 24, 25, 26, 27, 30, 31, 33, 34], "metric": [2, 4, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34], "celeux_on": 2, "gener": [2, 3, 4, 5, 6, 10, 11, 13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31], "separ": [2, 3, 5, 10, 11], "addit": [2, 13, 14, 33], "p": [2, 5, 13, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "independ": [2, 13, 33], "x": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34], "y": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34], "n": [2, 5, 6, 7, 10, 13, 14, 15, 16, 17], "300": [2, 13], "mu": [2, 13], "1": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 23, 24, 25, 26, 27, 30, 31, 33], "7": [2, 5, 6, 13], "random_st": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31], "0": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 30, 31], "creat": [2, 3, 6, 9, 10, 11], "just": [2, 3, 6, 11], "call": [2, 3, 5, 6, 10, 23, 24, 25, 26, 27, 28, 29, 30, 31], "method": [2, 3, 5, 6, 10, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34], "iter": [2, 3, 6, 23, 24, 25, 26, 27, 28, 29, 30, 31], "through": [2, 3, 6, 31, 32], "gradient": [2, 3, 6, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "descent": [2, 3, 6, 23, 24, 25, 26, 27, 28, 29, 30, 31], "clf": [2, 3, 6, 7, 8, 11, 23, 24, 25, 26, 27, 30, 31], "alpha": [2, 3, 5, 6, 7, 9, 11, 16, 30, 31], "true": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34], "search": [2, 3, 6], "elimin": [2, 3, 6, 31], "best_weight": [2, 3, 6, 30, 31], "n_featur": [2, 3, 6, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "take": [2, 3, 6, 7, 11, 33], "look": [2, 3, 6, 11, 33], "decreas": [2, 3], "print": [2, 3, 4, 5, 6, 10, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31], "f": [2, 3, 4, 5, 6, 10, 16, 30, 31, 32, 33], "top": [2, 3, 6, 7, 30, 31], "wa": [2, 3, 6, 13, 14, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "max": [2, 3, 6, 9, 11], "settl": [2, 3, 6], "optimum": [2, 3, 6], "9": [2, 3, 6, 7, 30, 31], "highlight": [2, 3], "along": [2, 3, 9], "titl": [2, 3, 32], "plot": [2, 3, 5, 7], "xlabel": [2, 3, 7, 8, 11], "ylabel": [2, 3, 7, 8, 11], "ylim": [2, 3, 7], "show": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "expect": [2, 7, 33], "first": [2, 4, 26, 27, 31, 33], "linalg": [2, 3, 6], "norm": [2, 3, 6, 34], "axi": [2, 3, 6, 9], "ord": [2, 3, 6], "730431446195361": 2, "0285492563142022": 2, "725694330682782": 2, "arrai": [2, 3, 5, 6, 10, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31], "4": [2, 3, 5, 6, 7, 10, 14], "now": [2, 3, 4, 7, 11], "y_pred": [2, 3, 5, 7, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "ari": [2, 5, 10], "adjusted_rand_scor": [2, 5, 10], "8752937655453139": 2, "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "run": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "time": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 33], "script": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "minut": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "27": [2, 12], "864": [2, 12], "second": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "plot_feature_selection_linear": [2, 12], "py": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "ipynb": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "sparsemlpmmd": [3, 30], "2d": [3, 14], "48": 3, "make_blob": [3, 8, 11], "center": [3, 8, 11], "cluster_std": [3, 8, 11], "n_sampl": [3, 8, 9, 11, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "200": [3, 7, 8, 9, 11], "add": [3, 34], "extra": 3, "random": [3, 5, 6, 13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31], "seed": [3, 5, 6], "concaten": [3, 6, 13], "normal": [3, 6], "scale": [3, 13, 15, 17, 32], "size": [3, 5, 6, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31], "figur": 3, "figsiz": 3, "10": [3, 6, 7, 11, 12, 17, 30, 31, 33], "subplot": 3, "lasso": [3, 30, 31, 34], "tight_layout": 3, "523504729098252": 3, "6299622724113934": 3, "466966045170254": 3, "x_0": [3, 8, 11], "x_1": [3, 8, 11], "x_2": [3, 8, 11], "ax0": [3, 8, 11], "scatter": [3, 5, 6, 7, 8, 9, 10, 11], "c": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 32, 33], "crimson": [3, 8, 11], "": [3, 4, 5, 8, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31], "50": [3, 5, 6, 7, 8, 9, 11], "ax1": [3, 8, 11], "deepskyblu": [3, 8, 11], "ax2": [3, 8, 11], "darkgreen": [3, 8, 11], "leg": [3, 8, 11], "legend": [3, 8, 11], "loc": [3, 8, 11, 15, 17], "upper": [3, 8, 11], "left": [3, 8, 11, 33], "fancybox": [3, 8, 11], "scatterpoint": [3, 8, 11], "get_fram": [3, 8, 11], "set_alpha": [3, 8, 11], "11": [3, 6, 12], "14": [3, 6, 12, 14], "166": [3, 12], "plot_feature_selection_mlp": [3, 12], "anoth": [4, 34], "seek": 4, "rather": 4, "preprocess": 4, "linear_model": 4, "naive_bay": 4, "load_breast_canc": 4, "return_x_i": [4, 23, 24, 25, 26, 27, 30, 31, 33], "robustscal": 4, "fit_transform": 4, "differ": [4, 30, 31], "breast": 4, "cancer": 4, "l2": [4, 21, 22, 24, 27, 29], "clf1": 4, "logisticregress": 4, "fit": [4, 5, 9, 10, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "p_y_given_x_1": 4, "predict_proba": [4, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31], "naiv": 4, "bay": [4, 33], "hypothes": [4, 32], "clf2": 4, "gaussiannb": 4, "p_y_given_x_2": 4, "both": [4, 34], "let": [4, 11], "start": [4, 30, 31, 32], "wassersteingemini": 4, "v": [4, 19, 20, 21, 22, 33], "euclidean": [4, 5, 9, 21, 22, 24, 27, 29, 34], "distanc": [4, 5, 9, 18, 19, 20, 21, 22, 24, 27, 29, 33, 34], "wasserstein_scor": 4, "wassersteinova": 4, "need": [4, 18, 19, 20, 21, 22], "precomput": [4, 5, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "affin": [4, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "match": [4, 5], "wasserstein": [4, 21, 22, 23, 24, 26, 27, 29, 34], "compute_affin": [4, 18, 19, 20, 21, 22], "clf1_score": 4, "clf2_score": 4, "t": [4, 5, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "3f": [4, 5, 10], "878": 4, "005": 4, "By": [4, 34], "replac": [4, 5, 9], "label": [4, 23, 24, 25, 26, 27, 28, 29, 30, 31], "inform": [4, 6, 11, 14, 16, 18, 23, 24, 25, 26, 27, 30, 31, 32, 33], "obtain": 4, "specifi": [4, 5, 30, 31], "instead": [4, 5, 7], "share": 4, "same": [4, 34], "otherwis": [4, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "y_one_hot": 4, "ey": [4, 5, 10], "precomputed_dist": 4, "matmul": 4, "431": 4, "403": 4, "389": [4, 12], "plot_gemini_scor": [4, 12], "simplifi": 5, "version": [5, 30, 31, 33, 34], "latent": 5, "posit": [5, 17], "procedur": 5, "To": [5, 9], "mani": [5, 32], "determin": [5, 13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31], "probabl": [5, 11, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "associ": 5, "each": [5, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31], "adequ": 5, "note": [5, 9, 34], "given": [5, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "ident": 5, "matrix": [5, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "itertool": 5, "scipi": [5, 9, 32], "csgraph": [5, 9], "categoricalwasserstein": 5, "100": [5, 6, 10], "mean": [5, 7, 10, 13, 15, 16, 19, 20], "covari": [5, 10, 15], "draw_gmm": [5, 10], "ones": [5, 10, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31], "pairwise_dist": [5, 9, 34], "edge_prob": 5, "exp": 5, "adjacency_matrix": 5, "binomi": [5, 6], "j": 5, "make": 5, "adjac": [5, 9], "symmetr": [5, 18, 19, 20, 21, 22], "pair": [5, 9], "shortest": [5, 9], "path": [5, 9, 30, 31], "floyd_warshal": [5, 9], "direct": [5, 9], "fals": [5, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "unweight": [5, 9], "inf": [5, 9], "isinf": [5, 9], "shape": [5, 6, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "optimis": [5, 10, 23, 24, 25, 26, 27, 28, 29, 30, 31], "custom": [5, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31], "pass": [5, 9, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "argument": [5, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31], "n_cluster": [5, 7, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "1789": [5, 10], "learning_r": [5, 9, 10, 23, 24, 25, 26, 27, 28, 29, 30, 31], "1e": [5, 9, 10, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "dummi": 5, "unnecessari": 5, "becaus": [5, 9, 34], "There": 5, "index": 5, "fit_predict": [5, 7, 9, 10, 23, 24, 25, 26, 27, 28, 29, 30, 31], "node_i": 5, "node_j": 5, "combin": [5, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31], "rang": [5, 6], "grai": 5, "linewidth": 5, "ari_scor": [5, 10], "gemini_scor": [5, 10], "977": 5, "141": 5, "893": [5, 12], "plot_graph_node_clust": [5, 12], "moreov": [6, 33], "produc": 6, "categor": [6, 28, 29], "hot": [6, 30, 31], "encod": [6, 30, 31], "consid": [6, 23, 24, 25, 26, 27, 30, 31], "altogeth": 6, "option": [6, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31], "8": [6, 9], "outcom": 6, "multinomi": 6, "x1_class_1": 6, "pval": [6, 15], "05": [6, 9, 30, 31], "45": 6, "x2_class_1": 6, "x_class_1": 6, "x1_class_2": 6, "x2_class_2": 6, "x_class_2": 6, "x_inform": 6, "x_nois": 6, "repeat": 6, "arang": 6, "final": 6, "write": 6, "out": [6, 32], "partit": [6, 30, 31], "visualis": 6, "def": 6, "rand_jitt": 6, "return": [6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "randn": 6, "len": 6, "01": [6, 12, 30, 31], "argmax": [6, 11], "red": 6, "blue": [6, 7], "6": 6, "12": [6, 18, 19, 20, 21, 22], "13": 6, "15": 6, "lower": 6, "threshold": [6, 9], "80": 6, "keep_threshold": [6, 30, 31], "3111799799449613": 6, "5884698387322584": 6, "4296228548590326": 6, "887": [6, 12], "plot_grouped_select": [6, 12], "retak": [7, 9], "experi": [7, 9], "origin": [7, 9, 15, 32, 33, 34], "paper": [7, 9, 25, 34], "want": [7, 9, 34], "incorpor": 7, "freedom": [7, 16, 17], "seem": [7, 34], "outlier": 7, "unlik": 7, "done": 7, "linearwasserstein": [7, 23], "gstm": 7, "far": [7, 34], "apart": 7, "df": [7, 16, 17], "batch_siz": [7, 23, 24, 25, 26, 27, 30, 31], "grid": 7, "input": [7, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34], "help": [7, 32], "x_val": [7, 9, 11], "linspac": [7, 9, 11], "num": [7, 9, 11], "y_val": [7, 9, 11], "xx": [7, 9, 11], "yy": [7, 9, 11], "meshgrid": [7, 9, 11], "grid_input": [7, 9, 11], "c_": [7, 9, 11], "ravel": [7, 9, 11], "zz": [7, 9, 11], "reshap": [7, 9, 11], "contourf": [7, 9, 11], "cmap": [7, 9], "reds_r": 7, "xlim": 7, "772": [7, 12], "plot_gstm": [7, 12], "base_gemini": 8, "densemmdovo": 8, "dataset": [8, 9, 13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 30, 31, 33], "mlpmmd": [8, 27, 33], "environ": [8, 11], "pleas": [8, 11, 32, 33], "rerun": [8, 11], "cell": [8, 11], "html": [8, 11], "represent": [8, 11, 26, 27, 31], "trust": [8, 11], "On": [8, 11, 30, 31], "github": [8, 11, 32], "unabl": [8, 11], "render": [8, 11], "try": [8, 11, 32], "load": 8, "page": [8, 11], "nbviewer": [8, 11], "org": [8, 11], "mlpmmdmlpmmd": 8, "873": [8, 12], "plot_intro_mlp_mmd": [8, 12], "face": 9, "trick": 9, "guid": [9, 32, 33], "algorithm": [9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34], "desir": 9, "mlpwasserstein": [9, 26], "would": [9, 32], "abl": 9, "make_moon": 9, "nois": 9, "2023": [9, 33], "edg": 9, "defin": [9, 19, 20, 21, 22], "less": 9, "than": [9, 30, 31, 33], "quantil": 9, "min": [9, 11], "cm": 9, "spectral": 9, "off": 9, "246": [9, 12], "plot_moon_clust": [9, 12], "illustr": 10, "categoricalmmd": 10, "975": 10, "328": 10, "373": [10, 12], "plot_nonparametric_clust": [10, 12], "mutual": [11, 16, 18, 23, 24, 25, 26, 27, 30, 31, 32, 33], "propos": [11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34], "kraus": [11, 25], "et": [11, 13, 14, 25, 31, 33], "al": [11, 13, 14, 25, 31, 33], "2010": [11, 25], "maximis": [11, 23, 24, 25, 26, 27, 28, 29, 33], "under": [11, 30, 31, 32], "ell_2": [11, 25], "rimrim": 11, "u": [11, 32], "grad": 11, "grid_pr": 11, "isol": 11, "level": 11, "02139604932056094": 11, "331": [11, 12], "plot_rim": [11, 12], "21": 12, "794": 12, "execut": 12, "auto_exampl": 12, "file": 12, "mb": 12, "09": 12, "00": 12, "08": 12, "07": 12, "none": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "tupl": [13, 14, 15], "ndarrai": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "compon": [13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31], "respect": [13, 33], "over": 13, "dimens": 13, "excess": 13, "taken": [13, 14], "celeux": [13, 14], "section": [13, 14], "int": [13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31], "default": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34], "float": [13, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "control": [13, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31], "other": [13, 28, 29], "randomst": [13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31], "instanc": [13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31], "creation": [13, 14, 15, 16, 17], "reproduc": [13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31], "output": [13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34], "across": [13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31], "multipl": [13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31], "gmm": [13, 14, 15, 16], "drawn": [13, 14, 15, 16, 17, 33], "refer": [13, 14, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31], "g": [13, 14], "martin": [13, 14], "magniett": [13, 14], "m": [13, 14, 16, 31, 32, 33], "l": [13, 14, 16, 30, 31, 32, 33], "maugi": [13, 14], "rabusseau": [13, 14], "rafteri": [13, 14], "A": [13, 14, 15, 16, 30, 31, 33], "e": [13, 14, 18, 19, 20, 21, 22, 32, 33], "2014": [13, 14], "compar": [13, 14, 19, 20, 21, 22, 33], "regular": [13, 14, 25], "approach": [13, 14], "journal": [13, 14, 33], "de": [13, 14], "la": [13, 14], "societ": [13, 14], "francais": [13, 14], "statistiqu": [13, 14], "155": [13, 14], "57": [13, 14], "71": [13, 14], "2000": 14, "linearli": 14, "element": 15, "list": [15, 30, 31], "k": [15, 28, 29, 33], "d": [15, 17, 32, 33], "proport": 15, "500": 16, "articl": 16, "ohl": [16, 23, 24, 26, 27, 30, 31, 32, 33], "mattei": [16, 23, 24, 26, 27, 30, 31, 32, 33], "bouveyron": [16, 23, 24, 26, 27, 30, 31, 32, 33], "harchaoui": [16, 23, 24, 26, 27, 30, 31, 32, 33], "w": [16, 18, 19, 20, 21, 22, 32, 33], "leclercq": [16, 23, 24, 26, 27, 30, 31, 32, 33], "droit": [16, 23, 24, 26, 27, 30, 31, 32, 33], "precioso": [16, 32, 33], "2022": [16, 32, 33], "octob": [16, 32], "generalis": [16, 23, 24, 26, 27, 30, 31, 32, 33], "discrimin": [16, 23, 24, 25, 26, 27, 30, 31], "advanc": [16, 32, 33], "process": [16, 32, 33], "system": [16, 32, 33], "multivari": 17, "semi": 17, "definit": [17, 33], "spread": 17, "epsilon": [18, 19, 20, 21, 22], "classic": [18, 25], "complet": [18, 32], "mathcal": [18, 19, 20, 21, 22], "mathbb": [18, 19, 20, 21, 22, 33], "_": [18, 19, 20, 21, 22, 33], "sim": [18, 19, 20, 21, 22, 33], "text": [18, 19, 20], "kl": 18, "precis": [18, 19, 20, 21, 22], "clip": [18, 19, 20, 21, 22], "order": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "avoid": [18, 19, 20, 21, 22], "numer": [18, 19, 20, 21, 22], "instabl": [18, 19, 20, 21, 22], "__init__": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "comput": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34], "kernel": [18, 19, 20, 21, 22, 23, 26, 28, 30, 31, 34], "If": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "doe": [18, 28, 29], "must": [18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31], "case": [18, 19, 20, 21, 22, 34], "ignor": [18, 19, 20, 21, 22], "return_grad": [18, 19, 20, 21, 22], "object": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "r": [18, 19, 20, 21, 22, 30, 31, 33], "context": [18, 19, 20, 21, 22], "either": [18, 19, 20, 21, 22, 30, 31], "result": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "per": [18, 19, 20, 21, 22], "bool": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "deriv": [18, 19, 20, 21, 22, 32, 33, 34], "nabla_": [18, 19, 20, 21, 22], "discrep": [19, 20], "kappa": [19, 20], "space": [19, 20, 21, 22, 34], "additive_chi2": [19, 20, 23, 26, 28, 30, 31], "chi2": [19, 20, 23, 26, 28, 30, 31], "cosin": [19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31], "poli": [19, 20, 23, 26, 28, 30, 31], "polynomi": [19, 20, 23, 26, 28, 30, 31], "rbf": [19, 20, 23, 26, 28, 30, 31], "laplacian": [19, 20, 23, 26, 28, 30, 31], "sigmoid": [19, 20, 23, 26, 28, 30, 31], "It": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "correspond": [19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31], "kernel_param": [19, 20, 23, 26, 28, 30, 31], "set": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34], "y_a": [20, 22], "y_b": [20, 22], "delta": [21, 22], "l1": [21, 22, 24, 27, 29], "manhattan": [21, 22, 24, 27, 29], "cityblock": [21, 22, 24, 27, 29], "paired_dist": [21, 22, 24, 27, 29], "max_it": [23, 24, 25, 26, 27, 28, 29, 30, 31], "1000": [23, 24, 25, 26, 27, 28, 29, 30, 31], "001": [23, 24, 25, 26, 27, 28, 29, 30, 31], "solver": [23, 24, 25, 26, 27, 28, 29, 30, 31], "adam": [23, 24, 25, 26, 27, 28, 29, 30, 31], "verbos": [23, 24, 25, 26, 27, 28, 29, 30, 31], "form": [23, 24, 25, 26, 27, 28, 29, 30, 31], "neuron": [23, 24, 25, 26, 27, 28, 29, 30, 31], "epoch": [23, 24, 25, 26, 27, 28, 29, 30, 31], "singl": [23, 24, 25, 26, 27, 28, 29, 30, 31], "initi": [23, 24, 25, 26, 27, 28, 29, 30, 31], "learn": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "rate": [23, 24, 25, 26, 27, 28, 29, 30, 31], "step": [23, 24, 25, 26, 27, 28, 29, 30, 31], "updat": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "whether": [23, 24, 25, 26, 27, 28, 29, 30, 31], "sgd": [23, 24, 25, 26, 27, 28, 29, 30, 31], "stochast": [23, 24, 25, 26, 27, 28, 29, 30, 31], "kingma": [23, 24, 25, 26, 27, 28, 29, 30, 31], "diederik": [23, 24, 25, 26, 27, 28, 29, 30, 31], "jimmi": [23, 24, 25, 26, 27, 28, 29, 30, 31], "ba": [23, 24, 25, 26, 27, 28, 29, 30, 31], "batch": [23, 24, 25, 26, 27, 28, 29, 30, 31], "whole": [23, 24, 25, 26, 27, 30, 31], "messag": [23, 24, 25, 26, 27, 28, 29, 30, 31], "stdout": [23, 24, 25, 26, 27, 28, 29, 30, 31], "bia": [23, 24, 25, 26, 27, 28, 29, 30, 31], "initialis": [23, 24, 25, 26, 27, 28, 29, 30, 31], "loui": [23, 24, 26, 27, 30, 31, 32], "pierr": [23, 24, 26, 27, 30, 31, 32], "alexandr": [23, 24, 26, 27, 30, 31, 32], "charl": [23, 24, 26, 27, 30, 31, 32], "warith": [23, 24, 26, 27, 30, 31, 32], "micka\u00ebl": [23, 24, 26, 27, 30, 31, 32], "arnaud": [23, 24, 26, 27, 30, 31, 32], "freder": [23, 24, 26, 27, 30, 31, 32], "preciosio": [23, 24, 26, 27, 30, 31], "load_iri": [23, 24, 25, 26, 27, 30, 31, 33], "6949190522657067": 23, "attribut": [23, 24, 25, 26, 27, 28, 29, 30, 31], "w_": [23, 24, 25, 30], "b_": [23, 24, 25, 30], "bias": [23, 24, 25, 26, 27, 30, 31], "optimiser_": [23, 24, 25, 26, 27, 28, 29, 30, 31], "adamoptim": [23, 24, 25, 26, 27, 28, 29, 30, 31], "sgdoptim": [23, 24, 25, 26, 27, 28, 29, 30, 31], "chosen": [23, 24, 25, 26, 27, 28, 29, 30, 31], "labels_": [23, 24, 25, 26, 27, 28, 29, 30, 31], "were": [23, 24, 25, 26, 27, 28, 29, 30, 31], "n_iter_": [23, 24, 25, 26, 27, 28, 29, 30, 31], "took": [23, 24, 25, 26, 27, 28, 29, 30, 31], "converg": [23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "construct": [23, 24, 25, 26, 27, 28, 29, 30, 31], "present": [23, 24, 25, 26, 27, 28, 29, 30, 31, 34], "api": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "convent": [23, 24, 25, 26, 27, 28, 29, 30, 31, 33], "self": [23, 24, 25, 26, 27, 28, 29, 30, 31], "estim": [23, 24, 25, 26, 27, 28, 29, 30, 31], "vector": [23, 24, 25, 26, 27, 28, 29, 30, 31], "get_gemini": [23, 24, 25, 26, 27, 28, 29, 30, 31], "get_param": [23, 24, 25, 26, 27, 28, 29, 30, 31], "deep": [23, 24, 25, 26, 27, 28, 29, 30, 31], "subobject": [23, 24, 25, 26, 27, 28, 29, 30, 31], "param": [23, 24, 25, 26, 27, 28, 29, 30, 31], "dict": [23, 24, 25, 26, 27, 28, 29, 30, 31], "name": [23, 24, 25, 26, 27, 28, 29, 30, 31], "membership": [23, 24, 25, 26, 27, 28, 29, 30, 31], "after": [23, 24, 25, 26, 27, 28, 29, 30, 31], "closest": [23, 24, 25, 26, 27, 28, 29, 30, 31], "seen": [23, 24, 25, 26, 27, 28, 29, 30, 31], "test": [23, 24, 25, 26, 27, 28, 29, 30, 31], "set_param": [23, 24, 25, 26, 27, 28, 29, 30, 31], "work": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "nest": [23, 24, 25, 26, 27, 28, 29, 30, 31], "pipelin": [23, 24, 25, 26, 27, 28, 29, 30, 31], "latter": [23, 24, 25, 26, 27, 28, 29, 30, 31], "__": [23, 24, 25, 26, 27, 28, 29, 30, 31], "possibl": [23, 24, 25, 26, 27, 28, 29, 30, 31], "linearmmd": [24, 25, 30], "6993348362264595": 24, "n_features_in": [24, 25], "reg": 25, "framework": 25, "describ": [25, 30, 31], "hyperparamet": 25, "maxim": [25, 30, 31], "ryan": 25, "gome": 25, "andrea": 25, "pietro": 25, "perona": 25, "00962912118121384": 25, "n_hidden_dim": [26, 27, 31], "7592155845461646": 26, "w1_": [26, 27, 31], "b1_": [26, 27, 31], "w2_": [26, 27, 31], "b2_": [26, 27, 31], "h_": [26, 27, 31], "7636482655127903": 27, "directli": [28, 29, 34], "x_i": [28, 29], "theta_": [28, 29], "ki": [28, 29], "contrarili": [28, 29], "part": [28, 29], "support": [28, 29, 32], "p_": [29, 33, 34], "vanilla": [30, 31], "variat": [30, 31], "bring": [30, 31, 33], "constraint": [30, 31], "ensur": [30, 31], "via": 30, "proxim": [30, 31], "variou": [30, 31], "repres": [30, 31], "typic": [30, 31], "scheme": [30, 31], "lassonet": [30, 31, 33, 34], "architectur": [30, 31, 34], "lemhadri": [30, 31, 33], "ruan": [30, 31, 33], "abraham": [30, 31, 33], "tibshirani": [30, 31, 33], "joint": [30, 31, 33, 34], "6940342321220005": 30, "get_select": [30, 31], "retriev": [30, 31], "ind": [30, 31], "alpha_multipli": [30, 31], "min_featur": [30, 31], "restore_best_weight": [30, 31], "early_stopping_factor": [30, 31], "99": [30, 31], "max_pati": [30, 31], "unfold": [30, 31], "geometr": [30, 31], "remain": [30, 31], "amount": [30, 31], "histori": [30, 31], "kept": [30, 31], "certain": [30, 31], "percentag": [30, 31], "reduct": [30, 31], "made": [30, 31, 34], "retrain": [30, 31], "greater": [30, 31], "stop": [30, 31], "minim": [30, 31], "deem": [30, 31], "offer": [30, 31], "simultan": [30, 31], "good": [30, 31, 33], "few": [30, 31], "restor": [30, 31], "factor": [30, 31], "beyond": [30, 31], "upgrad": [30, 31], "too": [30, 31], "small": [30, 31, 32], "earli": [30, 31], "wait": [30, 31], "without": [30, 31, 32, 33], "improv": [30, 31, 33], "befor": [30, 31], "length": [30, 31], "sequenti": [30, 31], "group_penalti": [30, 31], "skip": [31, 34], "connect": [31, 34], "inspir": [31, 33, 34], "2021": [31, 33], "hierarchi": 31, "coeffici": 31, "rel": 31, "strength": 31, "766421183641077": 31, "w_skip_": 31, "thank": 32, "you": [32, 33, 34], "check": [32, 33], "realli": 32, "pleasur": 32, "dedic": 32, "theori": [32, 33], "allow": 32, "provid": [32, 33, 34], "user": [32, 33], "tool": 32, "written": 32, "scikit": [32, 33], "compat": 32, "extens": [32, 34], "http": 32, "io": 32, "main": 32, "instruct": 32, "pip": 32, "librari": [32, 34], "requir": [32, 34], "coupl": 32, "scientif": 32, "pot": 32, "repo": 32, "git": 32, "clone": 32, "com": 32, "cd": 32, "cite": 32, "neurip": 32, "inproceed": 32, "ohl2022generalis": 32, "author": 32, "micka": 32, "booktitl": 32, "editor": 32, "alic": 32, "h": [32, 33], "oh": [32, 33], "alekh": 32, "agarw": [32, 33], "daniel": 32, "belgrav": [32, 33], "kyunghyun": 32, "cho": [32, 33], "year": 32, "url": 32, "openreview": 32, "net": 32, "forum": 32, "id": 32, "0oy3pia": 32, "adp": 32, "ha": [32, 33], "been": 32, "french": 32, "govern": 32, "3ia": 32, "c\u00f4te": 32, "azur": 32, "invest": 32, "futur": 32, "project": 32, "manag": 32, "nation": 32, "research": [32, 33], "agenc": 32, "anr": 32, "19": 32, "p3ia": 32, "0002": 32, "also": 32, "franc": 32, "canada": 32, "fund": 32, "ffcr": 32, "contribut": 32, "partli": 32, "eu": 32, "horizon": 32, "2020": 32, "ai4media": 32, "contract": 32, "951911": 32, "special": 32, "jhonatan": 32, "torr": 32, "hi": 32, "insight": 32, "develop": 32, "short": 33, "descript": 33, "hint": 33, "about": 33, "For": [33, 34], "more": [33, 34], "detail": 33, "its": 33, "public": 33, "stand": 33, "novel": 33, "type": 33, "measur": 33, "custer": 33, "theta": [33, 34], "right": 33, "y_1": 33, "y_2": 33, "specif": [33, 34], "involv": 33, "theorem": 33, "easili": 33, "tractabl": 33, "cane": 33, "valuat": 33, "henc": 33, "assumpt": 33, "At": 33, "moment": 33, "report": 33, "fewer": 33, "practic": 33, "sever": 33, "merg": 33, "avail": 33, "loss": 33, "your": 33, "own": 33, "further": 33, "mainli": 33, "feel": 33, "interest": 33, "ed": 33, "machin": 33, "22": 33, "127": 33, "29": 33, "doi": 33, "48550": 33, "arxiv": 33, "2302": 33, "03391": 33, "mode": 34, "ad": 34, "constructor": 34, "achiev": 34, "regard": 34, "chose": 34, "yield": 34, "worst": 34, "manner": 34, "pairwise_kernel": 34, "choic": 34, "forc": 34, "usag": 34, "multi": 34, "perceptron": 34, "flexibl": 34, "yet": 34, "express": 34, "enough": 34, "term": 34, "simpler": 34, "induc": 34, "_basemmd": 34, "_basewasserstein": 34, "rewrit": 34, "_infer": 34, "_get_weight": 34, "_init_param": 34, "includ": 34}, "objects": {"gemclus.data": [[13, 0, 1, "", "celeux_one"], [14, 0, 1, "", "celeux_two"], [15, 0, 1, "", "draw_gmm"], [16, 0, 1, "", "gstm"], [17, 0, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[18, 1, 1, "", "MI"], [19, 1, 1, "", "MMDOvA"], [20, 1, 1, "", "MMDOvO"], [21, 1, 1, "", "WassersteinOvA"], [22, 1, 1, "", "WassersteinOvO"]], "gemclus.gemini.MI": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "compute_affinity"], [18, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvA": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "compute_affinity"], [19, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvO": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "compute_affinity"], [20, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvA": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "compute_affinity"], [21, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvO": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "compute_affinity"], [22, 2, 1, "", "evaluate"]], "gemclus.linear": [[23, 1, 1, "", "LinearMMD"], [24, 1, 1, "", "LinearWasserstein"], [25, 1, 1, "", "RIM"]], "gemclus.linear.LinearMMD": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "fit"], [23, 2, 1, "", "fit_predict"], [23, 2, 1, "", "get_gemini"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "predict"], [23, 2, 1, "", "predict_proba"], [23, 2, 1, "", "score"], [23, 2, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "fit"], [24, 2, 1, "", "fit_predict"], [24, 2, 1, "", "get_gemini"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "predict"], [24, 2, 1, "", "predict_proba"], [24, 2, 1, "", "score"], [24, 2, 1, "", "set_params"]], "gemclus.linear.RIM": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "fit"], [25, 2, 1, "", "fit_predict"], [25, 2, 1, "", "get_gemini"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "predict"], [25, 2, 1, "", "predict_proba"], [25, 2, 1, "", "score"], [25, 2, 1, "", "set_params"]], "gemclus.mlp": [[26, 1, 1, "", "MLPMMD"], [27, 1, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "fit"], [26, 2, 1, "", "fit_predict"], [26, 2, 1, "", "get_gemini"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "predict"], [26, 2, 1, "", "predict_proba"], [26, 2, 1, "", "score"], [26, 2, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "fit"], [27, 2, 1, "", "fit_predict"], [27, 2, 1, "", "get_gemini"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "predict"], [27, 2, 1, "", "predict_proba"], [27, 2, 1, "", "score"], [27, 2, 1, "", "set_params"]], "gemclus.nonparametric": [[28, 1, 1, "", "CategoricalMMD"], [29, 1, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "fit_predict"], [28, 2, 1, "", "get_gemini"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "predict_proba"], [28, 2, 1, "", "score"], [28, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "fit_predict"], [29, 2, 1, "", "get_gemini"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "predict_proba"], [29, 2, 1, "", "score"], [29, 2, 1, "", "set_params"]], "gemclus.sparse": [[30, 1, 1, "", "SparseLinearMMD"], [31, 1, 1, "", "SparseMLPMMD"]], "gemclus.sparse.SparseLinearMMD": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "fit_predict"], [30, 2, 1, "", "get_gemini"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "get_selection"], [30, 2, 1, "", "path"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "predict_proba"], [30, 2, 1, "", "score"], [30, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "fit_predict"], [31, 2, 1, "", "get_gemini"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "get_selection"], [31, 2, 1, "", "path"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "predict_proba"], [31, 2, 1, "", "score"], [31, 2, 1, "", "set_params"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"gemclu": [0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "api": 0, "score": [0, 4], "gemini": [0, 4, 8, 18, 19, 20, 21, 22, 32, 33, 34], "cluster": [0, 2, 3, 5, 7, 8, 9, 10, 11, 32, 33], "model": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "dens": 0, "nonparametr": [0, 5, 28, 29], "spars": [0, 2, 3, 30, 31], "dataset": [0, 2, 3, 4, 6, 11], "gener": [0, 1, 7, 8, 9], "exampl": [1, 7, 8, 13, 15, 16, 21, 24, 25, 26, 27, 28, 29, 30, 31, 34], "featur": [2, 3, 6, 33], "select": [2, 3, 6, 33], "us": [2, 3, 13, 15, 16, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32], "mmd": [2, 3, 8], "ovo": 2, "logist": [2, 11], "regress": [2, 11], "load": [2, 3, 4, 6, 11], "simpl": [2, 3, 4, 6, 11], "synthet": [2, 3, 6, 11], "train": [2, 3, 4, 5, 6, 7, 9, 10, 11], "path": [2, 3, 6], "result": [2, 3, 6], "final": [2, 3, 5, 7, 8, 9, 10, 11], "ova": 3, "mlp": [3, 8, 26, 27], "ani": 4, "real": 4, "two": [4, 9], "supervis": 4, "graph": 5, "node": 5, "draw": [5, 9, 10], "sampl": [5, 9, 10], "from": [5, 10], "gmm": [5, 10], "creat": [5, 8], "edg": 5, "pre": [5, 9], "comput": [5, 9, 12], "specif": [5, 9], "metric": [5, 9], "between": [5, 9], "group": 6, "linear": [6, 23, 24, 25], "decis": [7, 9], "boundari": [7, 9], "map": 7, "mixtur": 7, "gaussian": 7, "low": 7, "degre": 7, "student": 7, "distribut": [7, 34], "data": [7, 8, 13, 14, 15, 16, 17], "an": 8, "introduc": 8, "fit": 8, "plot": 8, "interlac": 9, "moon": 9, "non": 10, "parametr": 10, "rim": [11, 25], "time": 12, "celeux_on": 13, "celeux_two": 14, "draw_gmm": 15, "gstm": 16, "multivariate_student_t": 17, "mi": 18, "mmdova": 19, "mmdovo": 20, "wassersteinova": 21, "wassersteinovo": 22, "linearmmd": 23, "linearwasserstein": 24, "mlpmmd": 26, "mlpwasserstein": 27, "categoricalmmd": 28, "categoricalwasserstein": 29, "sparselinearmmd": 30, "sparsemlpmmd": 31, "welcom": 32, "document": 32, "content": [32, 34], "A": 32, "packag": [32, 34], "discrimin": [32, 33, 34], "instal": 32, "offici": 32, "latest": 32, "version": 32, "refer": [32, 33], "acknowledg": 32, "quick": 33, "start": 33, "what": [33, 34], "i": 33, "do": 33, "user": 34, "guid": 34, "which": 34, "ar": 34, "implement": 34, "avail": 34, "basic": 34}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"GEMCLUS API": [[0, "gemclus-api"]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [4, "scoring-with-gemini"]], "Clustering models": [[0, "clustering-models"]], "Dense models": [[0, "dense-models"]], "Nonparametric models": [[0, "nonparametric-models"]], "Sparse models": [[0, "sparse-models"]], "Dataset generation": [[0, "dataset-generation"]], "General examples": [[1, "general-examples"]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[2, "feature-selection-using-the-sparse-mmd-ovo-logistic-regression"]], "Load a simple synthetic dataset": [[2, "load-a-simple-synthetic-dataset"], [3, "load-a-simple-synthetic-dataset"], [6, "load-a-simple-synthetic-dataset"], [11, "load-a-simple-synthetic-dataset"]], "Train the model": [[2, "train-the-model"], [3, "train-the-model"], [5, "train-the-model"], [6, "train-the-model"], [9, "train-the-model"], [10, "train-the-model"], [11, "train-the-model"]], "Path results": [[2, "path-results"], [3, "path-results"], [6, "path-results"]], "Final Clustering": [[2, "final-clustering"], [3, "final-clustering"], [5, "final-clustering"], [7, "final-clustering"], [9, "final-clustering"], [10, "final-clustering"], [11, "final-clustering"]], "Feature selection using the Sparse MMD OvA (MLP)": [[3, "feature-selection-using-the-sparse-mmd-ova-mlp"]], "Scoring any model with GEMINI": [[4, "scoring-any-model-with-gemini"]], "Load a simple real dataset": [[4, "load-a-simple-real-dataset"]], "Train two supervised models": [[4, "train-two-supervised-models"]], "Supervised Scoring with GEMINI": [[4, "supervised-scoring-with-gemini"]], "Graph node clustering with a nonparametric model": [[5, "graph-node-clustering-with-a-nonparametric-model"]], "Draw samples from a GMM": [[5, "draw-samples-from-a-gmm"], [10, "draw-samples-from-a-gmm"]], "Create the graph edges": [[5, "create-the-graph-edges"]], "Pre-compute a specific metric between samples": [[5, "pre-compute-a-specific-metric-between-samples"], [9, "pre-compute-a-specific-metric-between-samples"]], "Grouped Feature selection with a linear model": [[6, "grouped-feature-selection-with-a-linear-model"]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[7, "example-of-decision-boundary-map-for-a-mixture-of-gaussian-and-low-degree-student-distributions"]], "Generate the data": [[7, "generate-the-data"]], "Train the model for clustering": [[7, "train-the-model-for-clustering"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[8, "an-introducing-example-to-clustering-with-an-mlp-and-the-mmd-gemini"]], "Generate data": [[8, "generate-data"]], "Create the MLP clustering model and fit it": [[8, "create-the-mlp-clustering-model-and-fit-it"]], "Plot the final clustering": [[8, "plot-the-final-clustering"]], "Drawing a decision boundary between two interlacing moons": [[9, "drawing-a-decision-boundary-between-two-interlacing-moons"]], "Generate two interlacing moons": [[9, "generate-two-interlacing-moons"]], "Non parametric clustering": [[10, "non-parametric-clustering"]], "Simple logistic regression with RIM": [[11, "simple-logistic-regression-with-rim"]], "Computation times": [[12, "computation-times"]], "gemclus.data.celeux_one": [[13, "gemclus-data-celeux-one"]], "Examples using gemclus.data.celeux_one": [[13, "examples-using-gemclus-data-celeux-one"]], "gemclus.data.celeux_two": [[14, "gemclus-data-celeux-two"]], "gemclus.data.draw_gmm": [[15, "gemclus-data-draw-gmm"]], "Examples using gemclus.data.draw_gmm": [[15, "examples-using-gemclus-data-draw-gmm"]], "gemclus.data.gstm": [[16, "gemclus-data-gstm"]], "Examples using gemclus.data.gstm": [[16, "examples-using-gemclus-data-gstm"]], "gemclus.data.multivariate_student_t": [[17, "gemclus-data-multivariate-student-t"]], "gemclus.gemini.MI": [[18, "gemclus-gemini-mi"]], "gemclus.gemini.MMDOvA": [[19, "gemclus-gemini-mmdova"]], "gemclus.gemini.MMDOvO": [[20, "gemclus-gemini-mmdovo"]], "gemclus.gemini.WassersteinOvA": [[21, "gemclus-gemini-wassersteinova"]], "Examples using gemclus.gemini.WassersteinOvA": [[21, "examples-using-gemclus-gemini-wassersteinova"]], "gemclus.gemini.WassersteinOvO": [[22, "gemclus-gemini-wassersteinovo"]], "gemclus.linear.LinearMMD": [[23, "gemclus-linear-linearmmd"]], "gemclus.linear.LinearWasserstein": [[24, "gemclus-linear-linearwasserstein"]], "Examples using gemclus.linear.LinearWasserstein": [[24, "examples-using-gemclus-linear-linearwasserstein"]], "gemclus.linear.RIM": [[25, "gemclus-linear-rim"]], "Examples using gemclus.linear.RIM": [[25, "examples-using-gemclus-linear-rim"]], "gemclus.mlp.MLPMMD": [[26, "gemclus-mlp-mlpmmd"]], "Examples using gemclus.mlp.MLPMMD": [[26, "examples-using-gemclus-mlp-mlpmmd"]], "gemclus.mlp.MLPWasserstein": [[27, "gemclus-mlp-mlpwasserstein"]], "Examples using gemclus.mlp.MLPWasserstein": [[27, "examples-using-gemclus-mlp-mlpwasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[28, "gemclus-nonparametric-categoricalmmd"]], "Examples using gemclus.nonparametric.CategoricalMMD": [[28, "examples-using-gemclus-nonparametric-categoricalmmd"]], "gemclus.nonparametric.CategoricalWasserstein": [[29, "gemclus-nonparametric-categoricalwasserstein"]], "Examples using gemclus.nonparametric.CategoricalWasserstein": [[29, "examples-using-gemclus-nonparametric-categoricalwasserstein"]], "gemclus.sparse.SparseLinearMMD": [[30, "gemclus-sparse-sparselinearmmd"]], "Examples using gemclus.sparse.SparseLinearMMD": [[30, "examples-using-gemclus-sparse-sparselinearmmd"]], "gemclus.sparse.SparseMLPMMD": [[31, "gemclus-sparse-sparsemlpmmd"]], "Examples using gemclus.sparse.SparseMLPMMD": [[31, "examples-using-gemclus-sparse-sparsemlpmmd"]], "Welcome to GemClus documentation!": [[32, "welcome-to-gemclus-documentation"]], "Contents": [[32, "contents"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[32, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "Installation": [[32, "installation"]], "Official package": [[32, "official-package"]], "Latest version": [[32, "latest-version"]], "Reference": [[32, "reference"]], "Acknowledgements": [[32, "acknowledgements"]], "Quick start on gemclus": [[33, "quick-start-on-gemclus"]], "What is GEMINI": [[33, "what-is-gemini"]], "Doing discriminative clustering": [[33, "doing-discriminative-clustering"]], "Selecting features in clustering": [[33, "selecting-features-in-clustering"]], "References": [[33, "references"]], "User Guide": [[34, "user-guide"]], "Content of the package": [[34, "content-of-the-package"]], "Which GEMINIs are implemented": [[34, "which-geminis-are-implemented"]], "What discriminative distributions are available": [[34, "what-discriminative-distributions-are-available"]], "Basic examples": [[34, "basic-examples"]]}, "indexentries": {"celeux_one() (in module gemclus.data)": [[13, "gemclus.data.celeux_one"]], "celeux_two() (in module gemclus.data)": [[14, "gemclus.data.celeux_two"]], "draw_gmm() (in module gemclus.data)": [[15, "gemclus.data.draw_gmm"]], "gstm() (in module gemclus.data)": [[16, "gemclus.data.gstm"]], "multivariate_student_t() (in module gemclus.data)": [[17, "gemclus.data.multivariate_student_t"]], "mi (class in gemclus.gemini)": [[18, "gemclus.gemini.MI"]], "__init__() (gemclus.gemini.mi method)": [[18, "gemclus.gemini.MI.__init__"]], "compute_affinity() (gemclus.gemini.mi method)": [[18, "gemclus.gemini.MI.compute_affinity"]], "evaluate() (gemclus.gemini.mi method)": [[18, "gemclus.gemini.MI.evaluate"]], "mmdova (class in gemclus.gemini)": [[19, "gemclus.gemini.MMDOvA"]], "__init__() (gemclus.gemini.mmdova method)": [[19, "gemclus.gemini.MMDOvA.__init__"]], "compute_affinity() (gemclus.gemini.mmdova method)": [[19, "gemclus.gemini.MMDOvA.compute_affinity"]], "evaluate() (gemclus.gemini.mmdova method)": [[19, "gemclus.gemini.MMDOvA.evaluate"]], "mmdovo (class in gemclus.gemini)": [[20, "gemclus.gemini.MMDOvO"]], "__init__() (gemclus.gemini.mmdovo method)": [[20, "gemclus.gemini.MMDOvO.__init__"]], "compute_affinity() (gemclus.gemini.mmdovo method)": [[20, "gemclus.gemini.MMDOvO.compute_affinity"]], "evaluate() (gemclus.gemini.mmdovo method)": [[20, "gemclus.gemini.MMDOvO.evaluate"]], "wassersteinova (class in gemclus.gemini)": [[21, "gemclus.gemini.WassersteinOvA"]], "__init__() (gemclus.gemini.wassersteinova method)": [[21, "gemclus.gemini.WassersteinOvA.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinova method)": [[21, "gemclus.gemini.WassersteinOvA.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinova method)": [[21, "gemclus.gemini.WassersteinOvA.evaluate"]], "wassersteinovo (class in gemclus.gemini)": [[22, "gemclus.gemini.WassersteinOvO"]], "__init__() (gemclus.gemini.wassersteinovo method)": [[22, "gemclus.gemini.WassersteinOvO.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinovo method)": [[22, "gemclus.gemini.WassersteinOvO.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinovo method)": [[22, "gemclus.gemini.WassersteinOvO.evaluate"]], "linearmmd (class in gemclus.linear)": [[23, "gemclus.linear.LinearMMD"]], "__init__() (gemclus.linear.linearmmd method)": [[23, "gemclus.linear.LinearMMD.__init__"]], "fit() (gemclus.linear.linearmmd method)": [[23, "gemclus.linear.LinearMMD.fit"]], "fit_predict() (gemclus.linear.linearmmd method)": [[23, "gemclus.linear.LinearMMD.fit_predict"]], "get_gemini() (gemclus.linear.linearmmd method)": [[23, "gemclus.linear.LinearMMD.get_gemini"]], "get_params() (gemclus.linear.linearmmd method)": [[23, "gemclus.linear.LinearMMD.get_params"]], "predict() (gemclus.linear.linearmmd method)": [[23, "gemclus.linear.LinearMMD.predict"]], "predict_proba() (gemclus.linear.linearmmd method)": [[23, "gemclus.linear.LinearMMD.predict_proba"]], "score() (gemclus.linear.linearmmd method)": [[23, "gemclus.linear.LinearMMD.score"]], "set_params() (gemclus.linear.linearmmd method)": [[23, "gemclus.linear.LinearMMD.set_params"]], "linearwasserstein (class in gemclus.linear)": [[24, "gemclus.linear.LinearWasserstein"]], "__init__() (gemclus.linear.linearwasserstein method)": [[24, "gemclus.linear.LinearWasserstein.__init__"]], "fit() (gemclus.linear.linearwasserstein method)": [[24, "gemclus.linear.LinearWasserstein.fit"]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[24, "gemclus.linear.LinearWasserstein.fit_predict"]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[24, "gemclus.linear.LinearWasserstein.get_gemini"]], "get_params() (gemclus.linear.linearwasserstein method)": [[24, "gemclus.linear.LinearWasserstein.get_params"]], "predict() (gemclus.linear.linearwasserstein method)": [[24, "gemclus.linear.LinearWasserstein.predict"]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[24, "gemclus.linear.LinearWasserstein.predict_proba"]], "score() (gemclus.linear.linearwasserstein method)": [[24, "gemclus.linear.LinearWasserstein.score"]], "set_params() (gemclus.linear.linearwasserstein method)": [[24, "gemclus.linear.LinearWasserstein.set_params"]], "rim (class in gemclus.linear)": [[25, "gemclus.linear.RIM"]], "__init__() (gemclus.linear.rim method)": [[25, "gemclus.linear.RIM.__init__"]], "fit() (gemclus.linear.rim method)": [[25, "gemclus.linear.RIM.fit"]], "fit_predict() (gemclus.linear.rim method)": [[25, "gemclus.linear.RIM.fit_predict"]], "get_gemini() (gemclus.linear.rim method)": [[25, "gemclus.linear.RIM.get_gemini"]], "get_params() (gemclus.linear.rim method)": [[25, "gemclus.linear.RIM.get_params"]], "predict() (gemclus.linear.rim method)": [[25, "gemclus.linear.RIM.predict"]], "predict_proba() (gemclus.linear.rim method)": [[25, "gemclus.linear.RIM.predict_proba"]], "score() (gemclus.linear.rim method)": [[25, "gemclus.linear.RIM.score"]], "set_params() (gemclus.linear.rim method)": [[25, "gemclus.linear.RIM.set_params"]], "mlpmmd (class in gemclus.mlp)": [[26, "gemclus.mlp.MLPMMD"]], "__init__() (gemclus.mlp.mlpmmd method)": [[26, "gemclus.mlp.MLPMMD.__init__"]], "fit() (gemclus.mlp.mlpmmd method)": [[26, "gemclus.mlp.MLPMMD.fit"]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[26, "gemclus.mlp.MLPMMD.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[26, "gemclus.mlp.MLPMMD.get_gemini"]], "get_params() (gemclus.mlp.mlpmmd method)": [[26, "gemclus.mlp.MLPMMD.get_params"]], "predict() (gemclus.mlp.mlpmmd method)": [[26, "gemclus.mlp.MLPMMD.predict"]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[26, "gemclus.mlp.MLPMMD.predict_proba"]], "score() (gemclus.mlp.mlpmmd method)": [[26, "gemclus.mlp.MLPMMD.score"]], "set_params() (gemclus.mlp.mlpmmd method)": [[26, "gemclus.mlp.MLPMMD.set_params"]], "mlpwasserstein (class in gemclus.mlp)": [[27, "gemclus.mlp.MLPWasserstein"]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[27, "gemclus.mlp.MLPWasserstein.__init__"]], "fit() (gemclus.mlp.mlpwasserstein method)": [[27, "gemclus.mlp.MLPWasserstein.fit"]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[27, "gemclus.mlp.MLPWasserstein.fit_predict"]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[27, "gemclus.mlp.MLPWasserstein.get_gemini"]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[27, "gemclus.mlp.MLPWasserstein.get_params"]], "predict() (gemclus.mlp.mlpwasserstein method)": [[27, "gemclus.mlp.MLPWasserstein.predict"]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[27, "gemclus.mlp.MLPWasserstein.predict_proba"]], "score() (gemclus.mlp.mlpwasserstein method)": [[27, "gemclus.mlp.MLPWasserstein.score"]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[27, "gemclus.mlp.MLPWasserstein.set_params"]], "categoricalmmd (class in gemclus.nonparametric)": [[28, "gemclus.nonparametric.CategoricalMMD"]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[28, "gemclus.nonparametric.CategoricalMMD.__init__"]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[28, "gemclus.nonparametric.CategoricalMMD.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[28, "gemclus.nonparametric.CategoricalMMD.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[28, "gemclus.nonparametric.CategoricalMMD.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[28, "gemclus.nonparametric.CategoricalMMD.get_params"]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[28, "gemclus.nonparametric.CategoricalMMD.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[28, "gemclus.nonparametric.CategoricalMMD.predict_proba"]], "score() (gemclus.nonparametric.categoricalmmd method)": [[28, "gemclus.nonparametric.CategoricalMMD.score"]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[28, "gemclus.nonparametric.CategoricalMMD.set_params"]], "categoricalwasserstein (class in gemclus.nonparametric)": [[29, "gemclus.nonparametric.CategoricalWasserstein"]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[29, "gemclus.nonparametric.CategoricalWasserstein.__init__"]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[29, "gemclus.nonparametric.CategoricalWasserstein.fit"]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[29, "gemclus.nonparametric.CategoricalWasserstein.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[29, "gemclus.nonparametric.CategoricalWasserstein.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[29, "gemclus.nonparametric.CategoricalWasserstein.get_params"]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[29, "gemclus.nonparametric.CategoricalWasserstein.predict"]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[29, "gemclus.nonparametric.CategoricalWasserstein.predict_proba"]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[29, "gemclus.nonparametric.CategoricalWasserstein.score"]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[29, "gemclus.nonparametric.CategoricalWasserstein.set_params"]], "sparselinearmmd (class in gemclus.sparse)": [[30, "gemclus.sparse.SparseLinearMMD"]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[30, "gemclus.sparse.SparseLinearMMD.__init__"]], "fit() (gemclus.sparse.sparselinearmmd method)": [[30, "gemclus.sparse.SparseLinearMMD.fit"]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[30, "gemclus.sparse.SparseLinearMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[30, "gemclus.sparse.SparseLinearMMD.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[30, "gemclus.sparse.SparseLinearMMD.get_params"]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[30, "gemclus.sparse.SparseLinearMMD.get_selection"]], "path() (gemclus.sparse.sparselinearmmd method)": [[30, "gemclus.sparse.SparseLinearMMD.path"]], "predict() (gemclus.sparse.sparselinearmmd method)": [[30, "gemclus.sparse.SparseLinearMMD.predict"]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[30, "gemclus.sparse.SparseLinearMMD.predict_proba"]], "score() (gemclus.sparse.sparselinearmmd method)": [[30, "gemclus.sparse.SparseLinearMMD.score"]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[30, "gemclus.sparse.SparseLinearMMD.set_params"]], "sparsemlpmmd (class in gemclus.sparse)": [[31, "gemclus.sparse.SparseMLPMMD"]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[31, "gemclus.sparse.SparseMLPMMD.__init__"]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[31, "gemclus.sparse.SparseMLPMMD.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[31, "gemclus.sparse.SparseMLPMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[31, "gemclus.sparse.SparseMLPMMD.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[31, "gemclus.sparse.SparseMLPMMD.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[31, "gemclus.sparse.SparseMLPMMD.get_selection"]], "path() (gemclus.sparse.sparsemlpmmd method)": [[31, "gemclus.sparse.SparseMLPMMD.path"]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[31, "gemclus.sparse.SparseMLPMMD.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[31, "gemclus.sparse.SparseMLPMMD.predict_proba"]], "score() (gemclus.sparse.sparsemlpmmd method)": [[31, "gemclus.sparse.SparseMLPMMD.score"]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[31, "gemclus.sparse.SparseMLPMMD.set_params"]]}})