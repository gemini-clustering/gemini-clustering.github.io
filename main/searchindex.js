Search.setIndex({"docnames": ["api", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_feature_selection_linear", "auto_examples/feature_selection/plot_feature_selection_logreg_mi", "auto_examples/feature_selection/plot_feature_selection_mlp", "auto_examples/feature_selection/plot_grouped_selection", "auto_examples/feature_selection/sg_execution_times", "auto_examples/index", "auto_examples/mlcl/index", "auto_examples/mlcl/plot_semi_supervised_consensus", "auto_examples/mlcl/sg_execution_times", "auto_examples/plot_circles", "auto_examples/plot_custom_model", "auto_examples/plot_graph_node_clustering", "auto_examples/plot_gstm", "auto_examples/plot_intro_mlp_mmd", "auto_examples/plot_moon_clustering", "auto_examples/plot_nonparametric_clustering", "auto_examples/plot_rim", "auto_examples/scoring/index", "auto_examples/scoring/plot_gemini_scoring", "auto_examples/scoring/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/trees/index", "auto_examples/trees/plot_douglas_example", "auto_examples/trees/plot_kauri_example", "auto_examples/trees/sg_execution_times", "generated/constraints/gemclus.add_mlcl_constraint", "generated/data/gemclus.data.celeux_one", "generated/data/gemclus.data.celeux_two", "generated/data/gemclus.data.draw_gmm", "generated/data/gemclus.data.gstm", "generated/data/gemclus.data.multivariate_student_t", "generated/gemini/gemclus.gemini.HellingerGEMINI", "generated/gemini/gemclus.gemini.KLGEMINI", "generated/gemini/gemclus.gemini.MI", "generated/gemini/gemclus.gemini.MMDGEMINI", "generated/gemini/gemclus.gemini.TVGEMINI", "generated/gemini/gemclus.gemini.WassersteinGEMINI", "generated/models/gemclus.linear.LinearMMD", "generated/models/gemclus.linear.LinearModel", "generated/models/gemclus.linear.LinearWasserstein", "generated/models/gemclus.linear.RIM", "generated/models/gemclus.mlp.MLPMMD", "generated/models/gemclus.mlp.MLPModel", "generated/models/gemclus.mlp.MLPWasserstein", "generated/models/gemclus.nonparametric.CategoricalMMD", "generated/models/gemclus.nonparametric.CategoricalModel", "generated/models/gemclus.nonparametric.CategoricalWasserstein", "generated/models/gemclus.sparse.SparseLinearMI", "generated/models/gemclus.sparse.SparseLinearMMD", "generated/models/gemclus.sparse.SparseLinearModel", "generated/models/gemclus.sparse.SparseMLPMMD", "generated/models/gemclus.sparse.SparseMLPModel", "generated/models/gemclus.tree.Douglas", "generated/models/gemclus.tree.Kauri", "generated/models/gemclus.tree.print_kauri_tree", "history", "index", "quick_start", "sg_execution_times", "user_guide"], "filenames": ["api.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_feature_selection_linear.rst", "auto_examples/feature_selection/plot_feature_selection_logreg_mi.rst", "auto_examples/feature_selection/plot_feature_selection_mlp.rst", "auto_examples/feature_selection/plot_grouped_selection.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/mlcl/index.rst", "auto_examples/mlcl/plot_semi_supervised_consensus.rst", "auto_examples/mlcl/sg_execution_times.rst", "auto_examples/plot_circles.rst", "auto_examples/plot_custom_model.rst", "auto_examples/plot_graph_node_clustering.rst", "auto_examples/plot_gstm.rst", "auto_examples/plot_intro_mlp_mmd.rst", "auto_examples/plot_moon_clustering.rst", "auto_examples/plot_nonparametric_clustering.rst", "auto_examples/plot_rim.rst", "auto_examples/scoring/index.rst", "auto_examples/scoring/plot_gemini_scoring.rst", "auto_examples/scoring/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/trees/index.rst", "auto_examples/trees/plot_douglas_example.rst", "auto_examples/trees/plot_kauri_example.rst", "auto_examples/trees/sg_execution_times.rst", "generated/constraints/gemclus.add_mlcl_constraint.rst", "generated/data/gemclus.data.celeux_one.rst", "generated/data/gemclus.data.celeux_two.rst", "generated/data/gemclus.data.draw_gmm.rst", "generated/data/gemclus.data.gstm.rst", "generated/data/gemclus.data.multivariate_student_t.rst", "generated/gemini/gemclus.gemini.HellingerGEMINI.rst", "generated/gemini/gemclus.gemini.KLGEMINI.rst", "generated/gemini/gemclus.gemini.MI.rst", "generated/gemini/gemclus.gemini.MMDGEMINI.rst", "generated/gemini/gemclus.gemini.TVGEMINI.rst", "generated/gemini/gemclus.gemini.WassersteinGEMINI.rst", "generated/models/gemclus.linear.LinearMMD.rst", "generated/models/gemclus.linear.LinearModel.rst", "generated/models/gemclus.linear.LinearWasserstein.rst", "generated/models/gemclus.linear.RIM.rst", "generated/models/gemclus.mlp.MLPMMD.rst", "generated/models/gemclus.mlp.MLPModel.rst", "generated/models/gemclus.mlp.MLPWasserstein.rst", "generated/models/gemclus.nonparametric.CategoricalMMD.rst", "generated/models/gemclus.nonparametric.CategoricalModel.rst", "generated/models/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/models/gemclus.sparse.SparseLinearMI.rst", "generated/models/gemclus.sparse.SparseLinearMMD.rst", "generated/models/gemclus.sparse.SparseLinearModel.rst", "generated/models/gemclus.sparse.SparseMLPMMD.rst", "generated/models/gemclus.sparse.SparseMLPModel.rst", "generated/models/gemclus.tree.Douglas.rst", "generated/models/gemclus.tree.Kauri.rst", "generated/models/gemclus.tree.print_kauri_tree.rst", "history.rst", "index.rst", "quick_start.rst", "sg_execution_times.rst", "user_guide.rst"], "titles": ["GEMCLUS API", "Feature selection", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse Linear MI (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Grouped Feature selection with a linear model", "Computation times", "General examples", "Consensus clustering", "Consensus clustering with linking constraints on sample pairs", "Computation times", "Comparative clustering of circles dataset with kernel change", "Extending GemClus to build your own discriminative clustering model", "Graph node clustering with a nonparametric model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Scoring with GEMINI", "Scoring any model with GEMINI", "Computation times", "Computation times", "Trees", "Building a differentiable unsupervised tree: DOUGLAS", "Building an unsupervised tree with kernel-kmeans objective: KAURI", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.add_mlcl_constraint", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.HellingerGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.KLGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.TVGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Douglas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Kauri", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.print_kauri_tree", "RELEASES", "Welcome to GemClus documentation!", "Quick start on gemclus", "Computation times", "User guide : contents"], "terms": {"The": [0, 2, 3, 4, 5, 9, 12, 20, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61], "packag": [0, 57, 59], "current": [0, 36, 38, 39, 41, 43, 45, 46, 48, 49, 50, 51, 52, 53, 55, 61], "contain": [0, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57], "simpl": [0, 7, 9, 11, 12, 13, 17, 22, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61], "mlp": [0, 1, 6, 7, 11, 14, 16, 22, 52, 53, 57, 59, 60], "logist": [0, 1, 4, 5, 6, 7, 12, 20, 22, 39, 40, 41, 42, 49, 50, 52, 53, 57, 60, 61], "regress": [0, 1, 4, 5, 6, 7, 12, 20, 22, 39, 40, 41, 42, 49, 50, 52, 53, 57, 60, 61], "all": [0, 2, 3, 4, 5, 7, 9, 12, 13, 16, 20, 27, 30, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61], "featur": [0, 6, 14, 15, 18, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61], "well": [0, 11, 14, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 61], "sparsiti": [0, 52, 53, 59, 61], "constrain": [0, 5, 9, 57, 61], "variant": 0, "follow": [0, 12, 13, 42, 58], "class": [0, 9, 12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61], "implement": [0, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 55, 58], "basic": 0, "evalu": [0, 2, 3, 20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "ani": [0, 7, 19, 21, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 60, 61], "condit": [0, 33, 34, 35, 36, 37, 38, 46, 47, 48, 51], "distribut": [0, 2, 3, 4, 5, 7, 11, 12, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60], "These": 0, "ar": [0, 2, 3, 4, 5, 9, 12, 13, 14, 16, 17, 18, 24, 25, 27, 28, 31, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59], "base": [0, 7, 9, 28, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 61], "standard": 0, "like": [0, 3, 14, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59], "one": [0, 3, 5, 20, 33, 34, 36, 37, 38, 39, 41, 43, 45, 46, 48, 49, 50, 51, 52, 53, 55, 59], "hidden": [0, 43, 44, 45, 52, 53, 61], "layer": [0, 11, 43, 44, 45, 51, 52, 53, 61], "neural": [0, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59], "network": [0, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "have": [0, 9, 11, 12, 20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "paramet": [0, 5, 9, 11, 12, 13, 17, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "assign": [0, 5, 13, 17, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "data": [0, 2, 3, 5, 9, 11, 12, 13, 17, 18, 20, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61], "sampl": [0, 2, 3, 4, 7, 8, 10, 14, 18, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 61], "accord": [0, 13, 18, 55], "indic": [0, 13, 27, 49, 50, 51, 52, 53, 54], "consequ": [0, 14, 46, 47, 48], "do": [0, 9, 13, 16, 18, 20, 46, 47, 48, 58], "depend": [0, 2, 4, 5, 13, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "locat": [0, 31], "overal": [0, 58], "can": [0, 3, 9, 11, 12, 17, 20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61], "us": [0, 1, 5, 6, 7, 9, 11, 12, 13, 16, 17, 18, 20, 24, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61], "decis": [0, 7, 18, 22, 25, 60, 61], "boundari": [0, 7, 18, 22, 60, 61], "hyper": 0, "howev": 0, "underli": [0, 55], "cannot": [0, 11, 27, 57], "unseen": 0, "predict": [0, 2, 3, 4, 9, 12, 14, 15, 16, 18, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59], "train": [0, 12, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59], "progress": [0, 2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "remov": 0, "thei": [0, 9, 20], "select": [0, 6, 28, 29, 49, 50, 51, 52, 53, 55, 60, 61], "subset": 0, "which": [0, 2, 4, 5, 12, 13, 16, 18, 25, 27, 28, 29, 30, 31, 36, 38, 49, 50, 51, 52, 53, 54, 55, 59], "mai": [0, 9, 14, 55, 58, 59], "enhanc": 0, "interpret": 0, "we": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 16, 17, 18, 20, 25, 58, 59, 61], "propos": [0, 3, 9, 11, 18, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 61], "method": [0, 2, 3, 4, 5, 9, 13, 17, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61], "architectur": [0, 52, 53, 61], "thu": [0, 2, 3, 4, 5, 27, 59], "rule": [0, 54], "simultan": [0, 49, 50, 51, 52, 53], "construct": [0, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "i": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61], "learnt": [0, 24], "function": [0, 12, 13, 16, 27, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 61], "intend": 0, "help": [0, 14, 55, 58], "understand": 0, "structur": [0, 55, 56], "abov": 0, "print": [0, 2, 3, 4, 5, 9, 13, 17, 18, 20, 24, 25, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "inner": 0, "thi": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 28, 29, 31, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 61], "aim": [0, 12], "decor": [0, 9, 27], "give": [0, 7, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59], "further": [0, 59], "guidanc": [0, 9], "desir": [0, 16], "synthet": 0, "spars": [1, 5, 6, 7, 13, 16, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 57, 59, 60, 61], "mmd": [1, 3, 6, 7, 11, 22, 25, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 61], "ovo": [1, 6, 7, 9, 13, 15, 17, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 48, 50, 52, 59, 60, 61], "linear": [1, 6, 7, 9, 11, 14, 16, 18, 20, 36, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 60, 61], "mi": [1, 6, 7, 12, 40, 44, 47, 49, 51, 54, 57, 60], "group": [1, 4, 6, 7, 49, 50, 51, 52, 53, 60, 61], "model": [1, 6, 7, 19, 21, 22, 24, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61], "ova": [1, 6, 7, 20, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 59, 60, 61], "go": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 58], "end": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 54, 55, 57], "download": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 58], "full": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "exampl": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 24, 25, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 57, 58, 60], "code": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 58], "In": [2, 3, 4, 5, 12, 13, 15, 18, 31, 58, 59, 61], "ask": [2, 3, 4, 5, 59], "gemclu": [2, 3, 4, 5, 7, 9, 11, 13, 14, 15, 16, 17, 18, 20, 22, 24, 25, 57, 60, 61], "sparselinearmmd": [2, 5, 49, 52], "perform": [2, 3, 4, 5, 9, 13, 20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 61], "where": [2, 3, 4, 5, 9, 14, 16, 20, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "regularis": [2, 3, 4, 5, 18, 39, 40, 41, 42], "penalti": [2, 3, 4, 5, 18, 20, 42, 49, 50, 51, 52, 53, 61], "increas": [2, 3, 4, 5, 49, 50, 51, 52, 53, 55], "until": [2, 3, 4, 5, 49, 50, 51, 52, 53, 55], "2": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 59, 61], "discard": [2, 3, 4, 5], "keep": [2, 3, 4, 61], "best": [2, 3, 4, 9, 49, 50, 51, 52, 53, 55], "weight": [2, 3, 4, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "minimum": [2, 3, 4, 49, 50, 51, 52, 53, 55], "number": [2, 3, 4, 9, 11, 13, 17, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "maintain": [2, 3, 4], "gemini": [2, 3, 4, 5, 11, 12, 13, 14, 16, 17, 21, 22, 24, 25, 27, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60], "score": [2, 3, 4, 5, 13, 17, 18, 21, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60], "close": [2, 3, 4, 9, 11, 28, 31], "90": [2, 3, 4], "maximum": [2, 3, 4, 13, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55], "valu": [2, 3, 4, 11, 13, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "encount": [2, 3, 4], "dure": [2, 3, 4, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "consist": [2, 3, 4, 5, 9, 11, 18, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59], "3": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59], "isotrop": [2, 3, 4, 12, 28], "gaussian": [2, 3, 4, 7, 11, 12, 13, 18, 20, 22, 28, 29, 30, 31, 57, 60], "so": [2, 3, 4, 14, 16, 20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "find": [2, 3, 4, 5, 9, 14, 16, 54, 58], "5d": [2, 3], "20": [2, 3, 6, 28, 43, 44, 45, 52, 53, 60], "noisi": [2, 3, 4, 5, 28, 29], "variabl": [2, 3, 4, 5, 13, 28, 29, 49, 50, 51, 52, 53, 57], "optim": [2, 3, 4, 5, 11, 16], "solut": [2, 3, 4, 5, 9, 16, 49, 50, 51, 52, 53], "should": [2, 3, 4, 5, 9, 33, 34, 35, 36, 37, 38, 51, 54], "onli": [2, 3, 4, 5, 13, 14, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59], "5": [2, 3, 4, 5, 9, 11, 13, 14, 15, 16, 17, 18, 25, 28, 49, 50, 51, 52, 53], "relev": [2, 3, 4, 5], "suffici": [2, 3, 4, 5], "get": [2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59], "correct": [2, 3, 4, 5, 12], "import": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 59], "numpi": [2, 3, 4, 5, 9, 11, 12, 13, 14, 16, 17, 18, 20, 58], "np": [2, 3, 4, 5, 9, 11, 12, 13, 14, 16, 17, 18, 20], "from": [2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 59, 60, 61], "matplotlib": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18], "pyplot": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18], "plt": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18], "sklearn": [2, 3, 4, 9, 11, 13, 15, 16, 17, 18, 20, 24, 25, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 59, 61], "metric": [2, 3, 9, 11, 17, 20, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61], "celeux_on": [2, 3, 9], "gener": [2, 3, 4, 5, 9, 11, 12, 13, 17, 18, 20, 24, 25, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57], "separ": [2, 3, 4, 13, 17, 18, 57], "addit": [2, 3, 28, 29, 36, 38, 57, 59], "p": [2, 3, 9, 13, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59], "independ": [2, 3, 28, 59], "x": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61], "y": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61], "n": [2, 3, 5, 9, 12, 13, 14, 17, 28, 29, 30, 31, 32], "300": [2, 3, 28], "mu": [2, 3, 9, 28], "1": [2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 27, 28, 31, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 59], "7": [2, 3, 5, 25, 28], "random_st": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "0": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60], "creat": [2, 3, 4, 5, 16, 17, 18], "just": [2, 3, 4, 5, 18], "call": [2, 3, 4, 5, 13, 17, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "iter": [2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "through": [2, 3, 4, 5, 52, 53, 55, 57, 58], "gradient": [2, 3, 4, 5, 12, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57], "descent": [2, 3, 4, 5, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "clf": [2, 3, 4, 5, 14, 15, 18, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52], "alpha": [2, 3, 4, 5, 11, 13, 14, 16, 18, 31, 49, 50, 51, 52, 53], "true": [2, 3, 4, 5, 9, 12, 13, 14, 15, 16, 17, 18, 20, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61], "search": [2, 3, 4, 5], "elimin": [2, 3, 4, 5, 52, 53], "best_weight": [2, 3, 4, 5, 49, 50, 51, 52, 53], "n_featur": [2, 3, 4, 5, 28, 29, 31, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "take": [2, 4, 5, 9, 11, 14, 18, 59], "look": [2, 4, 5, 11, 18, 59], "how": [2, 4, 5, 7, 9, 17, 18, 20, 24, 25, 28, 31, 59, 61], "decreas": [2, 4], "f": [2, 3, 4, 5, 13, 17, 20, 31, 33, 34, 35, 37, 52, 53, 58, 59], "top": [2, 4, 5, 12, 14, 49, 51, 52, 53], "wa": [2, 4, 5, 28, 29, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59], "max": [2, 4, 5, 9, 11, 16, 18], "settl": [2, 4, 5], "an": [2, 4, 5, 7, 9, 13, 14, 16, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61], "optimum": [2, 4, 5], "9": [2, 4, 5, 9, 49, 50, 51, 52, 53], "highlight": [2, 4], "along": [2, 4, 16], "titl": [2, 3, 4, 11, 12, 58], "plot": [2, 4, 11, 13, 14], "xlabel": [2, 4, 14, 15, 18], "ylabel": [2, 4, 14, 15, 18], "ylim": [2, 4, 11, 14], "show": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "expect": [2, 3, 12, 14, 59], "first": [2, 3, 12, 20, 43, 44, 45, 52, 53, 59], "linalg": [2, 3], "norm": [2, 3, 27, 61], "axi": [2, 3, 4, 5, 11, 12, 16], "ord": [2, 3], "8259728240495163": 2, "0249912491496707": 2, "7224921242347038": 2, "arrai": [2, 3, 4, 5, 12, 13, 17, 28, 29, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "4": [2, 3, 4, 5, 6, 11, 13, 14, 17, 25, 29], "now": [2, 3, 4, 14, 18, 20, 57], "y_pred": [2, 3, 4, 9, 12, 13, 14, 15, 16, 17, 18, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "ari": [2, 3, 9, 13, 17, 24, 25], "adjusted_rand_scor": [2, 3, 9, 13, 17, 24, 25], "83290627605772": 2, "total": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 37, 60], "run": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 59], "time": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 59], "script": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "minut": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "511": [2, 6, 60], "second": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24], "jupyt": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "notebook": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "plot_feature_selection_linear": [2, 6, 60], "ipynb": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "python": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 57], "sourc": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "py": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 60], "galleri": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 60, 61], "sphinx": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "sparselinearmi": [3, 50, 57], "path": [3, 13, 16, 49, 50, 51, 52, 53, 57], "50": [3, 4, 5, 11, 13, 14, 15, 16, 18], "contrari": [3, 12], "guid": [3, 16, 55, 58, 59], "specif": [3, 59], "kernel": [3, 7, 9, 22, 23, 26, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 46, 47, 50, 51, 52, 54, 55, 57, 60, 61], "space": [3, 36, 38, 61], "That": 3, "why": 3, "accept": 3, "threshold": [3, 5, 16, 24], "lower": [3, 5], "instead": [3, 13, 14, 20, 57], "other": [3, 28, 40, 44, 46, 47, 48, 51, 54], "A": [3, 9, 27, 28, 29, 30, 31, 39, 41, 43, 45, 46, 48, 50, 52, 53, 54, 56, 57, 59], "veri": 3, "similar": [3, 11], "found": [3, 55, 58], "discrimin": [3, 22, 27, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 60], "brain": [3, 49], "mri": [3, 49], "segment": [3, 49], "kong": [3, 49], "et": [3, 18, 28, 29, 42, 52, 53, 59], "al": [3, 18, 28, 29, 42, 52, 53, 59], "2014": [3, 28, 29], "decomposit": 3, "keep_threshold": [3, 5, 49, 50, 51, 52, 53], "6": [3, 4, 5, 9, 25], "11": [3, 5], "let": [3, 18, 20], "": [3, 4, 13, 15, 18, 20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "make": [3, 13], "small": [3, 9, 49, 50, 51, 52, 53, 58], "pca": 3, "visualis": [3, 5], "purpos": 3, "distinguish": 3, "label": [3, 20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "x_pca": 3, "n_compon": [3, 11], "fit_transform": [3, 20], "k": [3, 30, 46, 47, 48, 59], "rang": [3, 5, 9, 13], "class_indic": 3, "scatter": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18], "c": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 28, 29, 31, 58, 59], "marker": 3, "o": 3, "off": [3, 11, 16], "celeux": [3, 28, 29], "lasso": [3, 4, 49, 50, 51, 52, 53, 61], "458336976163333": 3, "264": [3, 6, 60], "plot_feature_selection_logreg_mi": [3, 6, 60], "sparsemlpmmd": [4, 51, 53], "2d": [4, 29], "48": 4, "make_blob": [4, 15, 18], "center": [4, 15, 18], "cluster_std": [4, 15, 18], "n_sampl": [4, 11, 12, 15, 16, 18, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "200": [4, 11, 14, 15, 16, 18], "add": [4, 12, 27, 61], "extra": 4, "random": [4, 5, 9, 12, 13, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "seed": [4, 5, 9, 13], "concaten": [4, 5, 12, 28], "normal": [4, 5], "scale": [4, 12, 28, 30, 32, 58], "size": [4, 5, 12, 13, 16, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57], "18": 4, "batch_siz": [4, 5, 12, 14, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54], "max_it": [4, 5, 11, 12, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "25": [4, 11, 22, 60], "learning_r": [4, 5, 9, 12, 13, 16, 17, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "001": [4, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "our": [4, 5, 7, 9, 12, 13, 16, 58, 59], "figur": 4, "figsiz": 4, "10": [4, 5, 9, 14, 18, 22, 32, 49, 50, 51, 52, 53, 59, 60], "subplot": [4, 11], "tight_layout": [4, 11], "get_select": [4, 5, 49, 50, 51, 52, 53, 57], "4596486286280377": 4, "5824499242836225": 4, "4242049318552603": 4, "x_0": [4, 15, 18], "x_1": [4, 15, 18], "x_2": [4, 15, 18], "ax0": [4, 15, 18], "crimson": [4, 15, 18], "ax1": [4, 15, 18], "deepskyblu": [4, 15, 18], "ax2": [4, 15, 18], "darkgreen": [4, 15, 18], "leg": [4, 15, 18], "legend": [4, 15, 18], "loc": [4, 12, 15, 18, 30, 32], "upper": [4, 15, 18], "left": [4, 15, 18, 59], "fancybox": [4, 15, 18], "scatterpoint": [4, 15, 18], "get_fram": [4, 15, 18], "set_alpha": [4, 15, 18], "195": [4, 6, 60], "plot_feature_selection_mlp": [4, 6, 60], "moreov": [5, 59], "produc": [5, 54], "some": [5, 7, 9, 11, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 61], "categor": [5, 46, 47, 48], "hot": [5, 49, 50, 51, 52, 53], "encod": [5, 49, 50, 51, 52, 53], "consid": [5, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55], "altogeth": 5, "option": [5, 16, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "binomi": [5, 13], "cluster": [5, 10, 20, 22, 24, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 61], "8": [5, 13, 16, 22, 57], "inform": [5, 12, 18, 20, 29, 31, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59], "outcom": 5, "multinomi": 5, "x1_class_1": 5, "pval": [5, 12, 30], "05": [5, 11, 16, 49, 50, 51, 52, 53, 60], "45": 5, "x2_class_1": 5, "x_class_1": 5, "x1_class_2": 5, "x2_class_2": 5, "x_class_2": 5, "x_inform": 5, "x_nois": 5, "100": [5, 9, 12, 13, 17, 24, 54], "repeat": 5, "arang": 5, "final": [5, 9], "write": 5, "out": [5, 58], "partit": [5, 49, 50, 51, 52, 53], "shape": [5, 9, 12, 13, 16, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "def": [5, 12], "rand_jitt": 5, "return": [5, 12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "randn": 5, "len": [5, 9], "01": [5, 21, 22, 49, 50, 51, 52, 53, 54, 60], "argmax": [5, 9, 18], "red": 5, "blue": [5, 14], "12": [5, 24, 26, 33, 34, 35, 36, 37, 38, 60], "13": [5, 26], "14": [5, 29], "15": 5, "1e": [5, 9, 12, 13, 16, 17, 18, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "80": 5, "4935152433868388": 5, "8084378363828286": 5, "646750269106263": 5, "131": [5, 6, 60], "plot_grouped_select": [5, 6, 60], "00": [6, 10, 21, 22, 26, 60], "32": 6, "101": 6, "execut": [6, 10, 21, 22, 26, 60], "file": [6, 10, 21, 22, 26, 60], "auto_exampl": [6, 10, 21, 22, 26], "feature_select": [6, 60], "mem": [6, 10, 21, 22, 26, 60], "mb": [6, 10, 21, 22, 26, 60], "06": [6, 60], "03": [6, 60], "02": [6, 60], "here": [7, 9, 11, 12, 13, 14, 20, 25, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 61], "introduc": [7, 22, 57, 60], "non": [7, 13, 22, 29, 60], "parametr": [7, 13, 22, 59, 60], "map": [7, 22, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60], "mixtur": [7, 11, 13, 18, 22, 28, 29, 30, 31, 57, 60], "low": [7, 9, 22, 54, 60], "degre": [7, 22, 31, 32, 60], "student": [7, 22, 31, 32, 57, 60], "draw": [7, 14, 22, 28, 29, 30, 31, 32, 60], "between": [7, 22, 27, 33, 34, 35, 36, 37, 38, 52, 53, 59, 60, 61], "two": [7, 11, 12, 22, 25, 33, 34, 36, 37, 38, 43, 44, 45, 51, 52, 55, 59, 60], "interlac": [7, 22, 60], "moon": [7, 22, 60], "rim": [7, 22, 39, 40, 41, 60], "graph": [7, 16, 17, 22, 57, 60], "node": [7, 17, 22, 25, 55, 57, 60], "nonparametr": [7, 9, 17, 22, 57, 60], "compar": [7, 22, 28, 29, 33, 34, 36, 37, 38, 59, 60], "circl": [7, 22, 60], "dataset": [7, 15, 16, 22, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 57, 59, 60], "chang": [7, 22, 60], "extend": [7, 22, 60], "build": [7, 22, 23, 26, 60], "your": [7, 22, 59, 60], "own": [7, 22, 59, 60], "link": [7, 8, 10, 27, 57, 60], "constraint": [7, 8, 10, 27, 49, 51, 52, 53, 55, 57, 60], "pair": [7, 8, 10, 13, 16, 27, 60], "differenti": [7, 23, 26, 57, 60], "unsupervis": [7, 9, 12, 23, 26, 54, 55, 57, 60], "dougla": [7, 23, 26, 57, 60], "kmean": [7, 23, 26, 55, 60], "object": [7, 12, 23, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60], "kauri": [7, 23, 26, 56, 57, 60], "auto_examples_python": 7, "zip": 7, "auto_examples_jupyt": 7, "improv": [9, 49, 50, 51, 52, 53, 59], "enforc": 9, "loos": 9, "equival": [9, 25], "ensembl": 9, "learn": [9, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59], "seek": [9, 20], "agreeanc": 9, "describ": [9, 27, 42, 49, 50, 51, 52, 53, 56], "ratio": 9, "were": [9, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "togeth": [9, 27], "provid": [9, 58, 59, 61], "Then": [9, 11], "ensur": [9, 12, 27, 49, 50, 51, 52, 53], "remain": [9, 49, 50, 51, 52, 53, 57], "apart": [9, 12, 14], "while": 9, "satisfi": [9, 27, 55], "try": [9, 15, 18, 58], "its": [9, 54, 57, 59, 61], "level": [9, 18], "supervis": 9, "input": [9, 14, 18, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61], "advantag": 9, "requir": [9, 57, 58, 61], "knowledg": 9, "rather": [9, 20], "idea": 9, "whether": [9, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "start": [9, 11, 12, 20, 49, 50, 51, 52, 53, 58], "categoricalwasserstein": [9, 13, 46, 47], "linearmmd": [9, 40, 41, 42], "add_mlcl_constraint": [9, 57], "itertool": [9, 13], "challeng": [9, 11], "mean": [9, 11, 12, 13, 14, 17, 28, 30, 31, 36], "fit": [9, 11, 13, 16, 17, 18, 20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59], "sever": [9, 59], "variou": [9, 49, 50, 51, 52, 53], "all_model": 9, "n_cluster": [9, 11, 12, 13, 14, 16, 17, 18, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "cosin": [9, 36, 38, 39, 41, 43, 45, 46, 48, 50, 52, 55], "sigmoid": [9, 12, 36, 39, 43, 46, 50, 52, 55], "rbf": [9, 11, 36, 39, 43, 46, 50, 52, 55], "sub": 9, "11914066061963555": 9, "11176053892324672": 9, "11421905413971052": 9, "22472124150185058": 9, "e": [9, 28, 29, 33, 34, 35, 36, 37, 38, 58, 59], "same": [9, 12, 20, 27, 61], "consensus_matrix": 9, "zero": [9, 11, 57], "j": [9, 13], "combinations_with_replac": 9, "r": [9, 33, 34, 35, 36, 37, 38, 52, 53, 59], "int": [9, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "precomput": [9, 13, 16, 20, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57], "notic": [9, 25], "api": [9, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59], "although": 9, "superflu": 9, "consensus_model": 9, "y_pred_consensu": 9, "predict_proba": [9, 18, 20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "what": 9, "10728640074310927": 9, "simul": 9, "extrapol": 9, "real": 9, "life": 9, "situat": 9, "would": [9, 16, 58], "emphas": 9, "more": [9, 59, 61], "field": 9, "expert": 9, "most": [9, 61], "confid": 9, "sorted_confidence_sampl": 9, "sort": 9, "kei": 9, "lambda": 9, "revers": 9, "must_link": [9, 27], "unsure_sample_pair": 9, "combin": [9, 13, 36, 38, 39, 41, 43, 45, 46, 48, 50, 52, 55, 57], "next": 9, "cannot_link": [9, 27], "over": [9, 28], "base_model": 9, "line": 9, "mlcl_consensus_model": 9, "y_pred_mlcl_consensu": 9, "16976700304809886": 9, "consensus_ord": 9, "argsort": 9, "imshow": 9, "cmap": [9, 11, 14, 16], "seismic": 9, "113": [9, 10, 60], "plot_semi_supervised_consensu": [9, 10, 60], "09": [10, 60], "mlcl": [10, 60], "consensu": [10, 60], "centr": 11, "algorithm": [11, 16, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61], "unless": 11, "adequ": [11, 13], "spectralclust": 11, "gaussianmixtur": 11, "make_circl": 11, "nois": [11, 16], "factor": [11, 27, 49, 50, 51, 52, 53, 55], "normalis": 11, "std": 11, "ddof": 11, "set": [11, 27, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61], "covari": [11, 13, 17, 30], "type": [11, 57, 59], "spheric": 11, "lighten": 11, "correspond": [11, 36, 38, 39, 41, 43, 45, 46, 48, 50, 52, 55], "symmetri": 11, "eas": 11, "job": 11, "initialis": [11, 12, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "actual": [11, 55], "gm": 11, "covariance_typ": 11, "means_init": 11, "1000": [11, 12, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "spectral": [11, 16], "sc": 11, "multi": [11, 61], "perceptron": [11, 61], "becaus": [11, 13, 16], "incap": 11, "euclidean_gemini": 11, "mlpmmd": [11, 15, 44, 45], "comput": [11, 12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61], "rbf_gemini": 11, "grid": [11, 14], "x_val": [11, 14, 16, 18], "linspac": [11, 14, 16, 18], "min": [11, 16, 18], "num": [11, 14, 16, 18], "y_val": [11, 14, 16, 18], "xx": [11, 14, 16, 18], "yy": [11, 14, 16, 18], "meshgrid": [11, 14, 16, 18], "grid_input": [11, 14, 16, 18], "c_": [11, 14, 16, 18], "ravel": [11, 14, 16, 18], "contourf": [11, 14, 16, 18], "reshap": [11, 12, 14, 16, 18], "cm": [11, 16, 25], "labels_": [11, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "266": [11, 22, 60], "plot_circl": [11, 22, 60], "It": [12, 27, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 59, 61], "possibl": [12, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61], "wish": 12, "avail": [12, 40, 44, 47, 51, 54, 59], "among": [12, 54], "choic": [12, 55, 61], "To": [12, 13, 16, 40, 44, 47, 51, 54], "framework": [12, 42], "defin": [12, 16, 36, 38], "still": 12, "bia": [12, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "less": [12, 16], "activ": [12, 54], "tell": 12, "written": [12, 58], "p_": [12, 48, 59, 61], "theta": [12, 59, 61], "text": [12, 33, 34, 35, 36, 37], "discriminativemodel": [12, 61], "draw_gmm": [12, 13, 17, 57], "binaryregress": 12, "parent": 12, "__init__": [12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "self": [12, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "solver": [12, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "adam": [12, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "none": [12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "verbos": [12, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "fals": [12, 13, 16, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "super": 12, "_init_param": [12, 61], "state": 12, "in_threshold": 12, "sqrt": 12, "theta_": [12, 46, 47, 48], "uniform": 12, "_get_weight": [12, 61], "For": [12, 59, 61], "optimis": [12, 13, 17, 25, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "need": [12, 20, 36, 38], "insid": 12, "list": [12, 27, 30, 49, 50, 51, 52, 53, 54], "_infer": [12, 61], "retain": 12, "output": [12, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61], "you": [12, 58, 59, 61], "must": [12, 27, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57], "probabl": [12, 13, 18, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "vector": [12, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "y_pred_logit": 12, "matmul": [12, 20], "exp": [12, 13], "flag": 12, "allow": [12, 58], "store": 12, "intermedi": 12, "backpropag": 12, "_y_sigmoid": 12, "As": 12, "duplic": 12, "opposit": 12, "column": 12, "up": [12, 55], "each": [12, 13, 28, 29, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "row": 12, "otherwis": [12, 20, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "work": [12, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "_compute_grad": 12, "ha": [12, 54, 58, 59], "extens": [12, 58, 61], "appli": [12, 27], "And": 12, "finish": 12, "theta_grad": 12, "t": [12, 13, 14, 20, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57], "order": [12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "match": [12, 13, 20, 54], "goal": 12, "maximis": [12, 18, 24, 27, 39, 41, 42, 43, 45, 46, 47, 48, 54, 59], "common": 12, "minimis": [12, 27], "neg": 12, "ey": [12, 13, 17, 20], "ones": [12, 13, 17, 36, 38, 39, 41, 43, 45, 46, 48, 50, 52, 55], "custom_model": 12, "wasserstein_ovo": [12, 40, 44, 47, 51, 54], "fit_predict": [12, 13, 14, 16, 17, 24, 25, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "binari": [12, 56], "757": [12, 22, 60], "plot_custom_model": [12, 22, 60], "simplifi": [13, 35], "version": [13, 33, 34, 36, 37, 38, 49, 52, 59, 61], "latent": 13, "posit": [13, 32], "procedur": 13, "mani": [13, 58], "determin": [13, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "distanc": [13, 16, 20, 33, 34, 35, 36, 37, 38, 41, 45, 48, 57, 59, 61], "associ": [13, 24], "note": [13, 16, 55, 61], "given": [13, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 61], "ident": 13, "matrix": [13, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "scipi": [13, 16, 58], "csgraph": [13, 16], "pairwise_dist": [13, 16, 61], "euclidean": [13, 16, 20, 38, 40, 41, 44, 45, 47, 48, 51, 54, 61], "edge_prob": 13, "adjacency_matrix": 13, "adjac": [13, 16], "symmetr": [13, 33, 34, 35, 36, 37, 38], "shortest": [13, 16], "floyd_warshal": [13, 16], "direct": [13, 16], "unweight": [13, 16], "replac": [13, 16, 20], "inf": [13, 16], "isinf": [13, 16], "specifi": [13, 20, 49, 50, 51, 52, 53], "custom": [13, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 57], "pass": [13, 16, 28, 29, 30, 31, 32, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57], "argument": [13, 36, 38, 39, 41, 43, 45, 46, 48, 50, 52, 55], "1789": [13, 17], "dummi": 13, "unnecessari": 13, "There": 13, "index": 13, "node_i": 13, "node_j": 13, "grai": 13, "linewidth": 13, "ari_scor": [13, 17], "gemini_scor": [13, 17], "3f": [13, 17, 20], "977": 13, "141": 13, "351": [13, 22, 60], "plot_graph_node_clust": [13, 22, 60], "retak": [14, 16], "experi": [14, 16], "origin": [14, 16, 30, 58, 59, 61], "paper": [14, 16, 42, 61], "want": [14, 16, 61], "incorpor": [14, 40, 44, 47, 51, 54], "freedom": [14, 31, 32], "seem": 14, "outlier": 14, "unlik": 14, "done": [14, 57], "linearwasserstein": [14, 39, 40, 42], "gstm": [14, 57], "far": 14, "df": [14, 31, 32], "zz": [14, 16, 18], "reds_r": 14, "xlim": 14, "434": [14, 22, 60], "plot_gstm": [14, 22, 60], "base_gemini": 15, "densemmdovo": 15, "environ": [15, 18], "pleas": [15, 18, 55, 58, 59], "rerun": [15, 18], "cell": [15, 18], "html": [15, 18], "represent": [15, 18, 43, 44, 45, 52, 53], "trust": [15, 18], "On": [15, 18, 49, 51, 52, 53], "github": [15, 18, 58], "unabl": [15, 18], "render": [15, 18], "load": 15, "page": [15, 18], "nbviewer": [15, 18], "org": [15, 18], "mlpmmdmlpmmd": 15, "782": [15, 22, 60], "plot_intro_mlp_mmd": [15, 22, 60], "face": 16, "trick": 16, "mlpwasserstein": [16, 43, 44], "abl": [16, 51], "make_moon": 16, "2023": [16, 59], "edg": 16, "than": [16, 49, 50, 51, 52, 53, 59], "quantil": 16, "512": [16, 22, 60], "plot_moon_clust": [16, 22, 60], "illustr": 17, "categoricalmmd": [17, 47, 48], "975": 17, "328": 17, "379": [17, 22, 60], "plot_nonparametric_clust": [17, 22, 60], "mutual": [18, 31, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59], "kraus": [18, 42], "2010": [18, 42], "under": [18, 49, 50, 51, 52, 53, 58], "ell_2": [18, 27, 42], "reg": [18, 42], "rimrim": 18, "u": [18, 58], "grad": 18, "grid_pr": 18, "isol": [18, 57], "4486538478231719": 18, "330": [18, 20, 21, 22, 60], "plot_rim": [18, 22, 60], "anoth": [20, 61], "preprocess": 20, "linear_model": [20, 25], "naive_bay": 20, "load_breast_canc": 20, "return_x_i": [20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 59], "robustscal": 20, "differ": [20, 24, 25, 49, 50, 51, 52, 53, 54, 55], "breast": 20, "cancer": 20, "l2": [20, 38, 41, 45, 48], "clf1": 20, "logisticregress": 20, "p_y_given_x_1": 20, "naiv": 20, "bay": [20, 59], "hypothes": [20, 58], "clf2": 20, "gaussiannb": 20, "p_y_given_x_2": 20, "both": [20, 57, 61], "wassersteingemini": [20, 57], "v": [20, 33, 34, 36, 37, 38, 59], "wasserstein_scor": 20, "affin": [20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "wasserstein": [20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 57, 61], "compute_affin": [20, 33, 34, 35, 36, 37, 38], "clf1_score": 20, "clf2_score": 20, "878": 20, "005": 20, "By": [20, 61], "obtain": [20, 25], "share": 20, "y_one_hot": 20, "precomputed_dist": 20, "431": 20, "403": 20, "plot_gemini_scor": [20, 21, 60], "04": [22, 60], "55": 22, "810": 22, "08": [22, 60], "few": [24, 49, 50, 51, 52, 53], "bin": [24, 54], "per": [24, 33, 34, 35, 36, 37, 38, 54, 57], "iri": [24, 25], "load_iri": [24, 25, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 59], "target": [24, 25], "mmd_ova": [24, 40, 44, 47, 51, 53, 54, 59], "n_cut": [24, 54], "y_pred_linear": [24, 25], "474150686050238": 24, "5681159420289855": 24, "936": [24, 26, 60], "plot_douglas_exampl": [24, 26, 60], "accompanni": 25, "gain": [25, 55], "deriv": [25, 33, 34, 35, 36, 37, 38, 51, 58, 59, 61], "squar": [25, 33], "print_kauri_tre": 25, "limit": [25, 55], "depth": [25, 55], "simplic": 25, "max_clust": [25, 55], "max_depth": [25, 55], "9459": 25, "167022308022": 25, "additive_chi2_model": 25, "additive_chi2": [25, 36, 39, 43, 46, 50, 52, 55], "y_pred_additive_chi2": 25, "22": [25, 59], "43532371061057": 25, "7172759168337549": 25, "8680377279943841": 25, "feature_nam": [25, 56], "petal": 25, "width": 25, "length": [25, 49, 50, 51, 52, 53], "183": [25, 26, 60], "plot_kauri_exampl": [25, 26, 60], "119": 26, "tree": [26, 57, 60], "gemini_model": 27, "contraint": 27, "respect": [27, 28, 51, 57, 59], "fulli": 27, "mlp___": 27, "linear___": 27, "categorical___": 27, "involv": [27, 40, 44, 47, 51, 54, 59], "ndarrai": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "n_constraint": 27, "default": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "being": 27, "i1": 27, "j1": 27, "iN": 27, "jn": 27, "If": [27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61], "float": [27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "hyperparamet": [27, 42, 54], "tupl": [28, 29, 30], "compon": [28, 29, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "dimens": 28, "excess": 28, "taken": [28, 29], "section": [28, 29], "control": [28, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57], "randomst": [28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "instanc": [28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "creation": [28, 29, 30, 31, 32], "reproduc": [28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "across": [28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "multipl": [28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "gmm": [28, 29, 30, 31], "drawn": [28, 29, 30, 31, 32, 59], "refer": [28, 29, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "g": [28, 29], "martin": [28, 29], "magniett": [28, 29], "m": [28, 29, 31, 52, 53, 58, 59], "l": [28, 29, 31, 52, 53, 58, 59], "maugi": [28, 29], "rabusseau": [28, 29], "rafteri": [28, 29], "regular": [28, 29, 42], "approach": [28, 29], "journal": [28, 29, 59], "de": [28, 29], "la": [28, 29], "societ": [28, 29], "francais": [28, 29], "statistiqu": [28, 29], "155": [28, 29], "57": [28, 29], "71": [28, 29], "2000": 29, "linearli": 29, "element": 30, "d": [30, 32, 54, 58, 59], "proport": 30, "500": 31, "articl": 31, "ohl": [31, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59], "mattei": [31, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59], "bouveyron": [31, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 59], "harchaoui": [31, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 59], "w": [31, 33, 34, 35, 36, 37, 38, 58, 59], "leclercq": [31, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59], "droit": [31, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59], "precioso": [31, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 59], "2022": [31, 58, 59], "octob": [31, 58], "generalis": [31, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59], "advanc": [31, 58, 59], "process": [31, 58, 59], "system": [31, 58, 59], "multivari": [32, 57], "semi": 32, "definit": [32, 57, 59], "spread": 32, "epsilon": [33, 34, 35, 36, 37, 38], "helling": 33, "mathcal": [33, 34, 35, 36, 37, 38], "mathbb": [33, 34, 35, 36, 37, 38, 59], "_": [33, 34, 35, 36, 37, 38, 59], "sim": [33, 34, 35, 36, 37, 38, 59], "h": [33, 58, 59], "y_a": [33, 34, 36, 37, 38], "y_b": [33, 34, 36, 37, 38], "bool": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "precis": [33, 34, 35, 36, 37, 38], "clip": [33, 34, 35, 36, 37, 38], "avoid": [33, 34, 35, 36, 37, 38], "numer": [33, 34, 35, 36, 37, 38], "instabl": [33, 34, 35, 36, 37, 38], "unus": [33, 34, 35, 37], "diverg": [33, 34, 35, 37], "return_grad": [33, 34, 35, 36, 37, 38], "context": [33, 34, 35, 36, 37, 38], "either": [33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 55], "result": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59], "nabla_": [33, 34, 35, 36, 37, 38], "kl": [34, 35], "classic": [34, 35, 42], "complet": [35, 58], "shortcut": 35, "klgemini": [35, 57], "kernel_param": [36, 39, 43, 46, 50, 52, 55], "discrep": 36, "kappa": 36, "chi2": [36, 39, 43, 46, 50, 52, 55], "poli": [36, 39, 43, 46, 50, 52, 55], "polynomi": [36, 39, 43, 46, 50, 52, 55], "laplacian": [36, 39, 43, 46, 50, 52, 55], "dict": [36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "keyword": [36, 38, 39, 41, 43, 45, 46, 48, 50], "ignor": [36, 38], "callabl": [36, 38], "case": [36, 38, 61], "variat": [37, 49, 51, 52, 53, 55], "tv": 37, "metric_param": [38, 41, 45, 48], "delta": [38, 54], "l1": [38, 41, 45, 48], "manhattan": [38, 41, 45, 48], "cityblock": [38, 41, 45, 48], "paired_dist": [38, 41, 45, 48], "form": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "neuron": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "epoch": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "singl": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57], "initi": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "rate": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "step": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "updat": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "sgd": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "stochast": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "kingma": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "diederik": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "jimmi": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "ba": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "batch": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57], "whole": [39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53], "messag": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "stdout": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "dictionari": [39, 41, 43, 45, 46, 48, 50], "chosen": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "linearmodel": [39, 41, 42, 57], "loui": [39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "pierr": [39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "alexandr": [39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "charl": [39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58], "warith": [39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58], "micka\u00ebl": [39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "arnaud": [39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "freder": [39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58], "7048160115136364": 39, "attribut": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "w_": [39, 40, 41, 42, 49, 50, 51], "b_": [39, 40, 41, 42, 49, 50, 51], "bias": [39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53], "optimiser_": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "adamoptim": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "sgdoptim": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "n_iter_": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "took": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "converg": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59], "present": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 61], "convent": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59], "estim": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "get_gemini": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "get_param": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "deep": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "subobject": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "param": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "name": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "membership": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "after": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "closest": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "seen": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "test": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57], "set_param": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "nest": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "pipelin": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "latter": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "__": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "str": [40, 44, 47, 51, 54], "mmd_ovo": [40, 44, 47, 51, 54], "wasserstein_ova": [40, 44, 47, 51, 54], "available_gemini": [40, 44, 47, 51, 54], "also": [40, 44, 47, 51, 54, 58], "7550724287639448": 40, "710399298634854": 41, "n_features_in": [41, 42], "maxim": [42, 49, 50, 51, 52, 53, 55], "ryan": 42, "gome": 42, "andrea": 42, "pietro": 42, "perona": 42, "43904857546947995": 42, "n_hidden_dim": [43, 44, 45, 52, 53], "mlpmodel": [43, 45, 57, 59], "7592155845461646": 43, "w1_": [43, 44, 45, 52, 53], "b1_": [43, 44, 45, 52, 53], "w2_": [43, 44, 45, 52, 53], "b2_": [43, 44, 45, 52, 53], "h_": [43, 44, 45, 52, 53], "6325592616409484": 44, "7636482655127903": 45, "directli": [46, 47, 48, 61], "x_i": [46, 47, 48], "ki": [46, 47, 48], "contrarili": [46, 47, 48], "part": [46, 47, 48], "doe": [46, 47, 48], "support": [46, 47, 48, 57, 58], "categoricalmodel": [46, 48, 57], "tailor": [46, 47, 48], "211726751861832": 46, "logits_": [46, 47, 48], "logit": [46, 47, 48, 54], "6577369504469952": 47, "3555482569532074": 48, "vanilla": [49, 51, 52, 53], "bring": [49, 51, 52, 53, 59], "via": [49, 51], "proxim": [49, 51, 52, 53, 57], "repres": [49, 50, 51, 52, 53], "typic": [49, 50, 51, 52, 53], "scheme": [49, 50, 51, 52, 53], "sparselinearmodel": [49, 50, 57, 61], "joint": [49, 50, 51, 52, 53, 59, 61], "youyong": 49, "yue": 49, "deng": 49, "qionghai": 49, "dai": 49, "5812412917247887": 49, "retriev": [49, 50, 51, 52, 53], "ind": [49, 50, 51, 52, 53], "alpha_multipli": [49, 50, 51, 52, 53], "min_featur": [49, 50, 51, 52, 53], "restore_best_weight": [49, 50, 51, 52, 53], "early_stopping_factor": [49, 50, 51, 52, 53], "99": [49, 50, 51, 52, 53], "max_pati": [49, 50, 51, 52, 53], "unfold": [49, 50, 51, 52, 53], "geometr": [49, 50, 51, 52, 53], "amount": [49, 50, 51, 52, 53], "histori": [49, 50, 51, 52, 53], "kept": [49, 50, 51, 52, 53], "certain": [49, 50, 51, 52, 53], "percentag": [49, 50, 51, 52, 53], "reduct": [49, 50, 51, 52, 53], "made": [49, 50, 51, 52, 53, 61], "retrain": [49, 50, 51, 52, 53], "greater": [49, 50, 51, 52, 53], "stop": [49, 50, 51, 52, 53], "minim": [49, 50, 51, 52, 53], "deem": [49, 50, 51, 52, 53], "offer": [49, 50, 51, 52, 53], "good": [49, 50, 51, 52, 53, 59], "restor": [49, 50, 51, 52, 53], "beyond": [49, 50, 51, 52, 53], "upgrad": [49, 50, 51, 52, 53], "too": [49, 50, 51, 52, 53], "earli": [49, 50, 51, 52, 53], "wait": [49, 50, 51, 52, 53], "without": [49, 50, 51, 52, 53, 58, 59], "befor": [49, 50, 51, 52, 53], "sequenti": [49, 50, 51, 52, 53], "group_penalti": [49, 50, 51, 52, 53], "7040618744746618": 50, "when": 51, "adapt": 51, "_compute_gemini": 51, "sparsemlpmodel": [51, 52, 57], "skip": [52, 53, 61], "connect": [52, 53, 61], "inspir": [52, 53, 59, 61], "lassonet": [52, 53, 59, 61], "lemhadri": [52, 53, 59], "2021": [52, 53, 59], "hierarchi": [52, 53], "coeffici": [52, 53], "rel": [52, 53, 54], "strength": [52, 53], "ruan": [52, 53, 59], "abraham": [52, 53, 59], "tibshirani": [52, 53, 59], "766421183641077": 52, "w_skip_": [52, 53], "feature_mask": 54, "temperatur": 54, "dndt": 54, "leverag": 54, "appris": 54, "split": [54, 55], "learnabl": 54, "wise": 54, "soft": 54, "recombin": 54, "those": [54, 55], "cut": 54, "boolean": 54, "leaf": [54, 55], "high": 54, "smoothen": 54, "wherea": 54, "closer": 54, "dirac": [54, 55], "explor": [54, 55], "preciosio": [54, 55], "find_active_point": 54, "calcul": 54, "point": 54, "fall": 54, "within": 54, "bound": 54, "contribut": [54, 58], "active_point": 54, "integ": 54, "min_samples_split": 55, "min_samples_leaf": 55, "max_featur": 55, "max_leav": 55, "reward": 55, "ideal": 55, "new": [55, 57], "refurbish": 55, "them": 55, "alreadi": 55, "exist": 55, "leav": 55, "least": 55, "logic": 55, "randomli": 55, "upon": 55, "put": 55, "tree_": 55, "_tree": 55, "repeatedli": 55, "choos": 55, "reach": 55, "onc": 55, "special": [55, 58], "henc": [55, 59], "constant": 55, "kauri_tre": 56, "hellingergemini": 57, "tvgemini": 57, "parametris": 57, "string": 57, "dedic": [57, 58], "fuse": [57, 61], "mmdova": 57, "mmdovo": 57, "mmdgemini": 57, "wassersteinova": 57, "wassersteinovo": 57, "fix": 57, "mistak": 57, "ad": [57, 61], "cart": 57, "experiment": 57, "minor": 57, "document": 57, "better": 57, "compat": [57, 58], "scikit": [57, 58, 59], "regard": 57, "check": [57, 58, 59], "abcmeta": 57, "valid": 57, "problem": 57, "retrocompat": 57, "1d": 57, "extern": 57, "usag": [57, 61], "etc": 57, "spar": 57, "multivariate_student_t": 57, "divis": 57, "thank": 58, "realli": 58, "pleasur": 58, "theori": [58, 59], "user": [58, 59], "tool": 58, "http": 58, "io": 58, "main": 58, "com": 58, "instruct": 58, "pip": 58, "librari": [58, 61], "coupl": 58, "scientif": 58, "pot": 58, "repo": 58, "git": 58, "clone": 58, "cd": 58, "cite": 58, "neurip": 58, "inproceed": 58, "ohl2022generalis": 58, "author": 58, "micka": 58, "booktitl": 58, "editor": 58, "alic": 58, "oh": [58, 59], "alekh": 58, "agarw": [58, 59], "daniel": 58, "belgrav": [58, 59], "kyunghyun": 58, "cho": [58, 59], "year": 58, "url": 58, "openreview": 58, "net": 58, "forum": 58, "id": 58, "0oy3pia": 58, "adp": 58, "been": 58, "french": 58, "govern": 58, "3ia": 58, "c\u00f4te": 58, "azur": 58, "invest": 58, "futur": 58, "project": 58, "manag": 58, "nation": 58, "research": [58, 59], "agenc": 58, "anr": 58, "19": 58, "p3ia": 58, "0002": 58, "franc": 58, "canada": 58, "fund": 58, "ffcr": 58, "partli": 58, "eu": 58, "horizon": 58, "2020": 58, "ai4media": 58, "contract": 58, "951911": 58, "jhonatan": 58, "torr": 58, "hi": 58, "insight": 58, "develop": 58, "short": 59, "descript": 59, "hint": 59, "about": 59, "detail": 59, "public": 59, "stand": 59, "novel": 59, "measur": 59, "custer": 59, "right": 59, "y_1": 59, "y_2": 59, "theorem": 59, "easili": 59, "tractabl": 59, "cane": 59, "valuat": 59, "assumpt": 59, "At": 59, "moment": 59, "report": 59, "fewer": 59, "practic": 59, "merg": 59, "loss": 59, "mainli": 59, "feel": 59, "interest": 59, "ed": 59, "machin": 59, "127": 59, "29": 59, "doi": 59, "48550": 59, "arxiv": 59, "2302": 59, "03391": 59, "51": 60, "474": 60, "16": 60, "mode": 61, "constructor": 61, "achiev": 61, "manner": 61, "pairwise_kernel": 61, "forc": 61, "flexibl": 61, "yet": 61, "express": 61, "enough": 61, "term": 61, "simpler": 61, "induc": 61, "rewrit": 61, "includ": 61}, "objects": {"gemclus": [[27, 0, 1, "", "add_mlcl_constraint"]], "gemclus.data": [[28, 0, 1, "", "celeux_one"], [29, 0, 1, "", "celeux_two"], [30, 0, 1, "", "draw_gmm"], [31, 0, 1, "", "gstm"], [32, 0, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[33, 1, 1, "", "HellingerGEMINI"], [34, 1, 1, "", "KLGEMINI"], [35, 1, 1, "", "MI"], [36, 1, 1, "", "MMDGEMINI"], [37, 1, 1, "", "TVGEMINI"], [38, 1, 1, "", "WassersteinGEMINI"]], "gemclus.gemini.HellingerGEMINI": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "compute_affinity"], [33, 2, 1, "", "evaluate"]], "gemclus.gemini.KLGEMINI": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "compute_affinity"], [34, 2, 1, "", "evaluate"]], "gemclus.gemini.MI": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "compute_affinity"], [35, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDGEMINI": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "compute_affinity"], [36, 2, 1, "", "evaluate"]], "gemclus.gemini.TVGEMINI": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "compute_affinity"], [37, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinGEMINI": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "compute_affinity"], [38, 2, 1, "", "evaluate"]], "gemclus.linear": [[39, 1, 1, "", "LinearMMD"], [40, 1, 1, "", "LinearModel"], [41, 1, 1, "", "LinearWasserstein"], [42, 1, 1, "", "RIM"]], "gemclus.linear.LinearMMD": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "fit"], [39, 2, 1, "", "fit_predict"], [39, 2, 1, "", "get_gemini"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "predict"], [39, 2, 1, "", "predict_proba"], [39, 2, 1, "", "score"], [39, 2, 1, "", "set_params"]], "gemclus.linear.LinearModel": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "fit"], [40, 2, 1, "", "fit_predict"], [40, 2, 1, "", "get_gemini"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "predict"], [40, 2, 1, "", "predict_proba"], [40, 2, 1, "", "score"], [40, 2, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "fit_predict"], [41, 2, 1, "", "get_gemini"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "predict"], [41, 2, 1, "", "predict_proba"], [41, 2, 1, "", "score"], [41, 2, 1, "", "set_params"]], "gemclus.linear.RIM": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "fit_predict"], [42, 2, 1, "", "get_gemini"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "predict"], [42, 2, 1, "", "predict_proba"], [42, 2, 1, "", "score"], [42, 2, 1, "", "set_params"]], "gemclus.mlp": [[43, 1, 1, "", "MLPMMD"], [44, 1, 1, "", "MLPModel"], [45, 1, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "fit_predict"], [43, 2, 1, "", "get_gemini"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "predict"], [43, 2, 1, "", "predict_proba"], [43, 2, 1, "", "score"], [43, 2, 1, "", "set_params"]], "gemclus.mlp.MLPModel": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "fit_predict"], [44, 2, 1, "", "get_gemini"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "predict_proba"], [44, 2, 1, "", "score"], [44, 2, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "fit_predict"], [45, 2, 1, "", "get_gemini"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "predict"], [45, 2, 1, "", "predict_proba"], [45, 2, 1, "", "score"], [45, 2, 1, "", "set_params"]], "gemclus.nonparametric": [[46, 1, 1, "", "CategoricalMMD"], [47, 1, 1, "", "CategoricalModel"], [48, 1, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "fit_predict"], [46, 2, 1, "", "get_gemini"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "predict_proba"], [46, 2, 1, "", "score"], [46, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalModel": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "fit_predict"], [47, 2, 1, "", "get_gemini"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "predict_proba"], [47, 2, 1, "", "score"], [47, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "fit_predict"], [48, 2, 1, "", "get_gemini"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "predict_proba"], [48, 2, 1, "", "score"], [48, 2, 1, "", "set_params"]], "gemclus.sparse": [[49, 1, 1, "", "SparseLinearMI"], [50, 1, 1, "", "SparseLinearMMD"], [51, 1, 1, "", "SparseLinearModel"], [52, 1, 1, "", "SparseMLPMMD"], [53, 1, 1, "", "SparseMLPModel"]], "gemclus.sparse.SparseLinearMI": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "fit_predict"], [49, 2, 1, "", "get_gemini"], [49, 2, 1, "", "get_params"], [49, 2, 1, "", "get_selection"], [49, 2, 1, "", "path"], [49, 2, 1, "", "predict"], [49, 2, 1, "", "predict_proba"], [49, 2, 1, "", "score"], [49, 2, 1, "", "set_params"]], "gemclus.sparse.SparseLinearMMD": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "fit_predict"], [50, 2, 1, "", "get_gemini"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "get_selection"], [50, 2, 1, "", "path"], [50, 2, 1, "", "predict"], [50, 2, 1, "", "predict_proba"], [50, 2, 1, "", "score"], [50, 2, 1, "", "set_params"]], "gemclus.sparse.SparseLinearModel": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "fit_predict"], [51, 2, 1, "", "get_gemini"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "get_selection"], [51, 2, 1, "", "path"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "predict_proba"], [51, 2, 1, "", "score"], [51, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "fit_predict"], [52, 2, 1, "", "get_gemini"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "get_selection"], [52, 2, 1, "", "path"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "predict_proba"], [52, 2, 1, "", "score"], [52, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPModel": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "fit_predict"], [53, 2, 1, "", "get_gemini"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "get_selection"], [53, 2, 1, "", "path"], [53, 2, 1, "", "predict"], [53, 2, 1, "", "predict_proba"], [53, 2, 1, "", "score"], [53, 2, 1, "", "set_params"]], "gemclus.tree": [[54, 1, 1, "", "Douglas"], [55, 1, 1, "", "Kauri"], [56, 0, 1, "", "print_kauri_tree"]], "gemclus.tree.Douglas": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "find_active_points"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "fit_predict"], [54, 2, 1, "", "get_gemini"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_proba"], [54, 2, 1, "", "score"], [54, 2, 1, "", "set_params"]], "gemclus.tree.Kauri": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "fit"], [55, 2, 1, "", "fit_predict"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "predict"], [55, 2, 1, "", "score"], [55, 2, 1, "", "set_params"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"gemclu": [0, 12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59], "api": 0, "score": [0, 7, 19, 20], "gemini": [0, 7, 15, 19, 20, 33, 34, 35, 36, 37, 38, 58, 59, 61], "cluster": [0, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 58, 59], "model": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25], "dens": 0, "nonparametr": [0, 13, 46, 47, 48], "spars": [0, 2, 3, 4, 49, 50, 51, 52, 53], "tree": [0, 7, 23, 24, 25, 54, 55, 56], "constraint": [0, 9], "dataset": [0, 2, 3, 4, 5, 9, 11, 18, 20, 24, 25], "gener": [0, 7, 14, 15, 16], "featur": [1, 2, 3, 4, 5, 7, 59], "select": [1, 2, 3, 4, 5, 7, 59], "us": [2, 3, 4, 25, 58], "mmd": [2, 4, 15], "ovo": 2, "logist": [2, 3, 18], "regress": [2, 3, 18], "load": [2, 3, 4, 5, 9, 18, 20, 24, 25], "simpl": [2, 3, 4, 5, 18, 20], "synthet": [2, 3, 4, 5, 18], "train": [2, 3, 4, 5, 11, 13, 14, 16, 17, 18, 20], "path": [2, 4, 5], "result": [2, 4, 5, 9, 12], "final": [2, 3, 4, 13, 14, 15, 16, 17, 18], "linear": [3, 5, 25, 39, 40, 41, 42], "mi": [3, 35], "ova": 4, "mlp": [4, 15, 43, 44, 45], "group": 5, "comput": [6, 10, 13, 16, 21, 22, 26, 60], "time": [6, 10, 21, 22, 26, 60], "exampl": [7, 14, 15, 61], "discrimin": [7, 12, 58, 59, 61], "consensu": [7, 8, 9], "link": 9, "sampl": [9, 11, 13, 16, 17], "pair": 9, "multipl": 9, "build": [9, 12, 24, 25], "matrix": 9, "creat": [9, 12, 13, 15, 24, 25], "optimis": 9, "add": 9, "must": 9, "cannot": 9, "plot": [9, 12, 15], "compar": 11, "circl": 11, "kernel": [11, 25], "chang": [11, 57], "draw": [11, 13, 16, 17], "displai": 11, "predict": 11, "decis": [11, 14, 16], "boundari": [11, 14, 16], "extend": 12, "your": 12, "own": 12, "custom": 12, "test": 12, "fit": [12, 15, 24], "procedur": 12, "graph": 13, "node": 13, "from": [13, 17], "gmm": [13, 17], "edg": 13, "pre": [13, 16], "specif": [13, 16], "metric": [13, 16], "between": [13, 16], "map": 14, "mixtur": 14, "gaussian": 14, "low": 14, "degre": 14, "student": 14, "distribut": [14, 61], "data": [14, 15, 28, 29, 30, 31, 32], "an": [15, 25], "introduc": 15, "two": [16, 20], "interlac": 16, "moon": 16, "non": 17, "parametr": 17, "rim": [18, 42], "ani": 20, "real": 20, "supervis": 20, "differenti": 24, "unsupervis": [24, 25], "dougla": [24, 54], "kmean": 25, "object": 25, "kauri": [25, 55], "first": 25, "second": 25, "addit": 25, "chi2": 25, "evalu": 25, "perform": 25, "visualis": 25, "structur": 25, "add_mlcl_constraint": 27, "celeux_on": 28, "celeux_two": 29, "draw_gmm": 30, "gstm": 31, "multivariate_student_t": 32, "hellingergemini": 33, "klgemini": 34, "mmdgemini": 36, "tvgemini": 37, "wassersteingemini": 38, "linearmmd": 39, "linearmodel": 40, "linearwasserstein": 41, "mlpmmd": 43, "mlpmodel": 44, "mlpwasserstein": 45, "categoricalmmd": 46, "categoricalmodel": 47, "categoricalwasserstein": 48, "sparselinearmi": 49, "sparselinearmmd": 50, "sparselinearmodel": 51, "sparsemlpmmd": 52, "sparsemlpmodel": 53, "print_kauri_tre": 56, "releas": 57, "histori": 57, "In": 57, "develop": 57, "0": 57, "2": 57, "latest": [57, 58], "1": 57, "welcom": 58, "document": 58, "content": [58, 61], "A": 58, "packag": [58, 61], "instal": 58, "offici": 58, "version": 58, "refer": [58, 59], "acknowledg": 58, "quick": 59, "start": 59, "what": [59, 61], "i": 59, "do": 59, "user": 61, "guid": 61, "which": 61, "ar": 61, "implement": 61, "avail": 61, "basic": 61}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"GEMCLUS API": [[0, "gemclus-api"]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [7, "scoring-with-gemini"], [19, "scoring-with-gemini"], [20, "scoring-with-gemini"]], "Clustering models": [[0, "clustering-models"]], "Dense models": [[0, "dense-models"]], "Nonparametric models": [[0, "nonparametric-models"]], "Sparse models": [[0, "sparse-models"]], "Tree models": [[0, "tree-models"]], "Constraints": [[0, "constraints"]], "Dataset generation": [[0, "dataset-generation"]], "Feature selection": [[1, "feature-selection"], [7, "feature-selection"]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[2, "feature-selection-using-the-sparse-mmd-ovo-logistic-regression"]], "Load a simple synthetic dataset": [[2, "load-a-simple-synthetic-dataset"], [3, "load-a-simple-synthetic-dataset"], [4, "load-a-simple-synthetic-dataset"], [5, "load-a-simple-synthetic-dataset"], [18, "load-a-simple-synthetic-dataset"]], "Train the model": [[2, "train-the-model"], [3, "train-the-model"], [4, "train-the-model"], [5, "train-the-model"], [13, "train-the-model"], [16, "train-the-model"], [17, "train-the-model"], [18, "train-the-model"]], "Path results": [[2, "path-results"], [4, "path-results"], [5, "path-results"]], "Final Clustering": [[2, "final-clustering"], [3, "final-clustering"], [4, "final-clustering"], [13, "final-clustering"], [14, "final-clustering"], [16, "final-clustering"], [17, "final-clustering"], [18, "final-clustering"]], "Feature selection using the Sparse Linear MI (Logistic regression)": [[3, "feature-selection-using-the-sparse-linear-mi-logistic-regression"]], "Feature selection using the Sparse MMD OvA (MLP)": [[4, "feature-selection-using-the-sparse-mmd-ova-mlp"]], "Grouped Feature selection with a linear model": [[5, "grouped-feature-selection-with-a-linear-model"]], "Computation times": [[6, "computation-times"], [10, "computation-times"], [21, "computation-times"], [22, "computation-times"], [26, "computation-times"], [60, "computation-times"]], "General examples": [[7, "general-examples"]], "Discriminative clustering": [[7, "discriminative-clustering"]], "Consensus clustering": [[7, "consensus-clustering"], [8, "consensus-clustering"]], "Trees": [[7, "trees"], [23, "trees"]], "Consensus clustering with linking constraints on sample pairs": [[9, "consensus-clustering-with-linking-constraints-on-sample-pairs"]], "Load the dataset": [[9, "load-the-dataset"], [24, "load-the-dataset"], [25, "load-the-dataset"]], "Multiple model clustering": [[9, "multiple-model-clustering"]], "Build the consensus matrix": [[9, "build-the-consensus-matrix"]], "Create the consensus clustering model": [[9, "create-the-consensus-clustering-model"]], "Optimise the results with linking constraints": [[9, "optimise-the-results-with-linking-constraints"]], "Add must-link / cannot-link constraint": [[9, "add-must-link-cannot-link-constraint"]], "Plotting the consensus matrix": [[9, "plotting-the-consensus-matrix"]], "Comparative clustering of circles dataset with kernel change": [[11, "comparative-clustering-of-circles-dataset-with-kernel-change"]], "Draw samples for the circle dataset": [[11, "draw-samples-for-the-circle-dataset"]], "Training clustering models": [[11, "training-clustering-models"]], "Display predictions and decision boundaries": [[11, "display-predictions-and-decision-boundaries"]], "Extending GemClus to build your own discriminative clustering model": [[12, "extending-gemclus-to-build-your-own-discriminative-clustering-model"]], "Create the custom model": [[12, "create-the-custom-model"]], "Test the fitting procedure and plot the clustering results": [[12, "test-the-fitting-procedure-and-plot-the-clustering-results"]], "Graph node clustering with a nonparametric model": [[13, "graph-node-clustering-with-a-nonparametric-model"]], "Draw samples from a GMM": [[13, "draw-samples-from-a-gmm"], [17, "draw-samples-from-a-gmm"]], "Create the graph edges": [[13, "create-the-graph-edges"]], "Pre-compute a specific metric between samples": [[13, "pre-compute-a-specific-metric-between-samples"], [16, "pre-compute-a-specific-metric-between-samples"]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[14, "example-of-decision-boundary-map-for-a-mixture-of-gaussian-and-low-degree-student-distributions"]], "Generate the data": [[14, "generate-the-data"]], "Train the model for clustering": [[14, "train-the-model-for-clustering"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[15, "an-introducing-example-to-clustering-with-an-mlp-and-the-mmd-gemini"]], "Generate data": [[15, "generate-data"]], "Create the MLP clustering model and fit it": [[15, "create-the-mlp-clustering-model-and-fit-it"]], "Plot the final clustering": [[15, "plot-the-final-clustering"]], "Drawing a decision boundary between two interlacing moons": [[16, "drawing-a-decision-boundary-between-two-interlacing-moons"]], "Generate two interlacing moons": [[16, "generate-two-interlacing-moons"]], "Non parametric clustering": [[17, "non-parametric-clustering"]], "Simple logistic regression with RIM": [[18, "simple-logistic-regression-with-rim"]], "Scoring any model with GEMINI": [[20, "scoring-any-model-with-gemini"]], "Load a simple real dataset": [[20, "load-a-simple-real-dataset"]], "Train two supervised models": [[20, "train-two-supervised-models"]], "Supervised Scoring with GEMINI": [[20, "supervised-scoring-with-gemini"]], "Building a differentiable unsupervised tree: DOUGLAS": [[24, "building-a-differentiable-unsupervised-tree-douglas"]], "Create the douglas tree and fit it": [[24, "create-the-douglas-tree-and-fit-it"]], "Building an unsupervised tree with kernel-kmeans objective: KAURI": [[25, "building-an-unsupervised-tree-with-kernel-kmeans-objective-kauri"]], "Create a first tree using a linear kernel": [[25, "create-a-first-tree-using-a-linear-kernel"]], "Create a second tree using an additive chi2 kernel": [[25, "create-a-second-tree-using-an-additive-chi2-kernel"]], "Evaluate the performances of the model": [[25, "evaluate-the-performances-of-the-model"]], "Visualise the tree structure": [[25, "visualise-the-tree-structure"]], "gemclus.add_mlcl_constraint": [[27, "gemclus-add-mlcl-constraint"]], "gemclus.data.celeux_one": [[28, "gemclus-data-celeux-one"]], "gemclus.data.celeux_two": [[29, "gemclus-data-celeux-two"]], "gemclus.data.draw_gmm": [[30, "gemclus-data-draw-gmm"]], "gemclus.data.gstm": [[31, "gemclus-data-gstm"]], "gemclus.data.multivariate_student_t": [[32, "gemclus-data-multivariate-student-t"]], "gemclus.gemini.HellingerGEMINI": [[33, "gemclus-gemini-hellingergemini"]], "gemclus.gemini.KLGEMINI": [[34, "gemclus-gemini-klgemini"]], "gemclus.gemini.MI": [[35, "gemclus-gemini-mi"]], "gemclus.gemini.MMDGEMINI": [[36, "gemclus-gemini-mmdgemini"]], "gemclus.gemini.TVGEMINI": [[37, "gemclus-gemini-tvgemini"]], "gemclus.gemini.WassersteinGEMINI": [[38, "gemclus-gemini-wassersteingemini"]], "gemclus.linear.LinearMMD": [[39, "gemclus-linear-linearmmd"]], "gemclus.linear.LinearModel": [[40, "gemclus-linear-linearmodel"]], "gemclus.linear.LinearWasserstein": [[41, "gemclus-linear-linearwasserstein"]], "gemclus.linear.RIM": [[42, "gemclus-linear-rim"]], "gemclus.mlp.MLPMMD": [[43, "gemclus-mlp-mlpmmd"]], "gemclus.mlp.MLPModel": [[44, "gemclus-mlp-mlpmodel"]], "gemclus.mlp.MLPWasserstein": [[45, "gemclus-mlp-mlpwasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[46, "gemclus-nonparametric-categoricalmmd"]], "gemclus.nonparametric.CategoricalModel": [[47, "gemclus-nonparametric-categoricalmodel"]], "gemclus.nonparametric.CategoricalWasserstein": [[48, "gemclus-nonparametric-categoricalwasserstein"]], "gemclus.sparse.SparseLinearMI": [[49, "gemclus-sparse-sparselinearmi"]], "gemclus.sparse.SparseLinearMMD": [[50, "gemclus-sparse-sparselinearmmd"]], "gemclus.sparse.SparseLinearModel": [[51, "gemclus-sparse-sparselinearmodel"]], "gemclus.sparse.SparseMLPMMD": [[52, "gemclus-sparse-sparsemlpmmd"]], "gemclus.sparse.SparseMLPModel": [[53, "gemclus-sparse-sparsemlpmodel"]], "gemclus.tree.Douglas": [[54, "gemclus-tree-douglas"]], "gemclus.tree.Kauri": [[55, "gemclus-tree-kauri"]], "gemclus.tree.print_kauri_tree": [[56, "gemclus-tree-print-kauri-tree"]], "RELEASES": [[57, "releases"]], "History of changes": [[57, "history-of-changes"]], "In development": [[57, "in-development"]], "0.2.0 (Latest)": [[57, "latest"]], "0.1.1": [[57, "id1"]], "0.1.0": [[57, "id2"]], "0.0.2": [[57, "id3"]], "Welcome to GemClus documentation!": [[58, "welcome-to-gemclus-documentation"]], "Contents": [[58, "contents"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[58, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "Installation": [[58, "installation"]], "Official package": [[58, "official-package"]], "Latest version": [[58, "latest-version"]], "Reference": [[58, "reference"]], "Acknowledgements": [[58, "acknowledgements"]], "Quick start on gemclus": [[59, "quick-start-on-gemclus"]], "What is GEMINI": [[59, "what-is-gemini"]], "Doing discriminative clustering": [[59, "doing-discriminative-clustering"]], "Selecting features in clustering": [[59, "selecting-features-in-clustering"]], "References": [[59, "references"]], "User Guide": [[61, "user-guide"]], "Content of the package": [[61, "content-of-the-package"]], "Which GEMINIs are implemented": [[61, "which-geminis-are-implemented"]], "What discriminative distributions are available": [[61, "what-discriminative-distributions-are-available"]], "Basic examples": [[61, "basic-examples"]]}, "indexentries": {"add_mlcl_constraint() (in module gemclus)": [[27, "gemclus.add_mlcl_constraint"]], "celeux_one() (in module gemclus.data)": [[28, "gemclus.data.celeux_one"]], "celeux_two() (in module gemclus.data)": [[29, "gemclus.data.celeux_two"]], "draw_gmm() (in module gemclus.data)": [[30, "gemclus.data.draw_gmm"]], "gstm() (in module gemclus.data)": [[31, "gemclus.data.gstm"]], "multivariate_student_t() (in module gemclus.data)": [[32, "gemclus.data.multivariate_student_t"]], "hellingergemini (class in gemclus.gemini)": [[33, "gemclus.gemini.HellingerGEMINI"]], "__init__() (gemclus.gemini.hellingergemini method)": [[33, "gemclus.gemini.HellingerGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.hellingergemini method)": [[33, "gemclus.gemini.HellingerGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.hellingergemini method)": [[33, "gemclus.gemini.HellingerGEMINI.evaluate"]], "klgemini (class in gemclus.gemini)": [[34, "gemclus.gemini.KLGEMINI"]], "__init__() (gemclus.gemini.klgemini method)": [[34, "gemclus.gemini.KLGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.klgemini method)": [[34, "gemclus.gemini.KLGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.klgemini method)": [[34, "gemclus.gemini.KLGEMINI.evaluate"]], "mi (class in gemclus.gemini)": [[35, "gemclus.gemini.MI"]], "__init__() (gemclus.gemini.mi method)": [[35, "gemclus.gemini.MI.__init__"]], "compute_affinity() (gemclus.gemini.mi method)": [[35, "gemclus.gemini.MI.compute_affinity"]], "evaluate() (gemclus.gemini.mi method)": [[35, "gemclus.gemini.MI.evaluate"]], "mmdgemini (class in gemclus.gemini)": [[36, "gemclus.gemini.MMDGEMINI"]], "__init__() (gemclus.gemini.mmdgemini method)": [[36, "gemclus.gemini.MMDGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.mmdgemini method)": [[36, "gemclus.gemini.MMDGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.mmdgemini method)": [[36, "gemclus.gemini.MMDGEMINI.evaluate"]], "tvgemini (class in gemclus.gemini)": [[37, "gemclus.gemini.TVGEMINI"]], "__init__() (gemclus.gemini.tvgemini method)": [[37, "gemclus.gemini.TVGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.tvgemini method)": [[37, "gemclus.gemini.TVGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.tvgemini method)": [[37, "gemclus.gemini.TVGEMINI.evaluate"]], "wassersteingemini (class in gemclus.gemini)": [[38, "gemclus.gemini.WassersteinGEMINI"]], "__init__() (gemclus.gemini.wassersteingemini method)": [[38, "gemclus.gemini.WassersteinGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.wassersteingemini method)": [[38, "gemclus.gemini.WassersteinGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteingemini method)": [[38, "gemclus.gemini.WassersteinGEMINI.evaluate"]], "linearmmd (class in gemclus.linear)": [[39, "gemclus.linear.LinearMMD"]], "__init__() (gemclus.linear.linearmmd method)": [[39, "gemclus.linear.LinearMMD.__init__"]], "fit() (gemclus.linear.linearmmd method)": [[39, "gemclus.linear.LinearMMD.fit"]], "fit_predict() (gemclus.linear.linearmmd method)": [[39, "gemclus.linear.LinearMMD.fit_predict"]], "get_gemini() (gemclus.linear.linearmmd method)": [[39, "gemclus.linear.LinearMMD.get_gemini"]], "get_params() (gemclus.linear.linearmmd method)": [[39, "gemclus.linear.LinearMMD.get_params"]], "predict() (gemclus.linear.linearmmd method)": [[39, "gemclus.linear.LinearMMD.predict"]], "predict_proba() (gemclus.linear.linearmmd method)": [[39, "gemclus.linear.LinearMMD.predict_proba"]], "score() (gemclus.linear.linearmmd method)": [[39, "gemclus.linear.LinearMMD.score"]], "set_params() (gemclus.linear.linearmmd method)": [[39, "gemclus.linear.LinearMMD.set_params"]], "linearmodel (class in gemclus.linear)": [[40, "gemclus.linear.LinearModel"]], "__init__() (gemclus.linear.linearmodel method)": [[40, "gemclus.linear.LinearModel.__init__"]], "fit() (gemclus.linear.linearmodel method)": [[40, "gemclus.linear.LinearModel.fit"]], "fit_predict() (gemclus.linear.linearmodel method)": [[40, "gemclus.linear.LinearModel.fit_predict"]], "get_gemini() (gemclus.linear.linearmodel method)": [[40, "gemclus.linear.LinearModel.get_gemini"]], "get_params() (gemclus.linear.linearmodel method)": [[40, "gemclus.linear.LinearModel.get_params"]], "predict() (gemclus.linear.linearmodel method)": [[40, "gemclus.linear.LinearModel.predict"]], "predict_proba() (gemclus.linear.linearmodel method)": [[40, "gemclus.linear.LinearModel.predict_proba"]], "score() (gemclus.linear.linearmodel method)": [[40, "gemclus.linear.LinearModel.score"]], "set_params() (gemclus.linear.linearmodel method)": [[40, "gemclus.linear.LinearModel.set_params"]], "linearwasserstein (class in gemclus.linear)": [[41, "gemclus.linear.LinearWasserstein"]], "__init__() (gemclus.linear.linearwasserstein method)": [[41, "gemclus.linear.LinearWasserstein.__init__"]], "fit() (gemclus.linear.linearwasserstein method)": [[41, "gemclus.linear.LinearWasserstein.fit"]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[41, "gemclus.linear.LinearWasserstein.fit_predict"]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[41, "gemclus.linear.LinearWasserstein.get_gemini"]], "get_params() (gemclus.linear.linearwasserstein method)": [[41, "gemclus.linear.LinearWasserstein.get_params"]], "predict() (gemclus.linear.linearwasserstein method)": [[41, "gemclus.linear.LinearWasserstein.predict"]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[41, "gemclus.linear.LinearWasserstein.predict_proba"]], "score() (gemclus.linear.linearwasserstein method)": [[41, "gemclus.linear.LinearWasserstein.score"]], "set_params() (gemclus.linear.linearwasserstein method)": [[41, "gemclus.linear.LinearWasserstein.set_params"]], "rim (class in gemclus.linear)": [[42, "gemclus.linear.RIM"]], "__init__() (gemclus.linear.rim method)": [[42, "gemclus.linear.RIM.__init__"]], "fit() (gemclus.linear.rim method)": [[42, "gemclus.linear.RIM.fit"]], "fit_predict() (gemclus.linear.rim method)": [[42, "gemclus.linear.RIM.fit_predict"]], "get_gemini() (gemclus.linear.rim method)": [[42, "gemclus.linear.RIM.get_gemini"]], "get_params() (gemclus.linear.rim method)": [[42, "gemclus.linear.RIM.get_params"]], "predict() (gemclus.linear.rim method)": [[42, "gemclus.linear.RIM.predict"]], "predict_proba() (gemclus.linear.rim method)": [[42, "gemclus.linear.RIM.predict_proba"]], "score() (gemclus.linear.rim method)": [[42, "gemclus.linear.RIM.score"]], "set_params() (gemclus.linear.rim method)": [[42, "gemclus.linear.RIM.set_params"]], "mlpmmd (class in gemclus.mlp)": [[43, "gemclus.mlp.MLPMMD"]], "__init__() (gemclus.mlp.mlpmmd method)": [[43, "gemclus.mlp.MLPMMD.__init__"]], "fit() (gemclus.mlp.mlpmmd method)": [[43, "gemclus.mlp.MLPMMD.fit"]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[43, "gemclus.mlp.MLPMMD.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[43, "gemclus.mlp.MLPMMD.get_gemini"]], "get_params() (gemclus.mlp.mlpmmd method)": [[43, "gemclus.mlp.MLPMMD.get_params"]], "predict() (gemclus.mlp.mlpmmd method)": [[43, "gemclus.mlp.MLPMMD.predict"]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[43, "gemclus.mlp.MLPMMD.predict_proba"]], "score() (gemclus.mlp.mlpmmd method)": [[43, "gemclus.mlp.MLPMMD.score"]], "set_params() (gemclus.mlp.mlpmmd method)": [[43, "gemclus.mlp.MLPMMD.set_params"]], "mlpmodel (class in gemclus.mlp)": [[44, "gemclus.mlp.MLPModel"]], "__init__() (gemclus.mlp.mlpmodel method)": [[44, "gemclus.mlp.MLPModel.__init__"]], "fit() (gemclus.mlp.mlpmodel method)": [[44, "gemclus.mlp.MLPModel.fit"]], "fit_predict() (gemclus.mlp.mlpmodel method)": [[44, "gemclus.mlp.MLPModel.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmodel method)": [[44, "gemclus.mlp.MLPModel.get_gemini"]], "get_params() (gemclus.mlp.mlpmodel method)": [[44, "gemclus.mlp.MLPModel.get_params"]], "predict() (gemclus.mlp.mlpmodel method)": [[44, "gemclus.mlp.MLPModel.predict"]], "predict_proba() (gemclus.mlp.mlpmodel method)": [[44, "gemclus.mlp.MLPModel.predict_proba"]], "score() (gemclus.mlp.mlpmodel method)": [[44, "gemclus.mlp.MLPModel.score"]], "set_params() (gemclus.mlp.mlpmodel method)": [[44, "gemclus.mlp.MLPModel.set_params"]], "mlpwasserstein (class in gemclus.mlp)": [[45, "gemclus.mlp.MLPWasserstein"]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[45, "gemclus.mlp.MLPWasserstein.__init__"]], "fit() (gemclus.mlp.mlpwasserstein method)": [[45, "gemclus.mlp.MLPWasserstein.fit"]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[45, "gemclus.mlp.MLPWasserstein.fit_predict"]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[45, "gemclus.mlp.MLPWasserstein.get_gemini"]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[45, "gemclus.mlp.MLPWasserstein.get_params"]], "predict() (gemclus.mlp.mlpwasserstein method)": [[45, "gemclus.mlp.MLPWasserstein.predict"]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[45, "gemclus.mlp.MLPWasserstein.predict_proba"]], "score() (gemclus.mlp.mlpwasserstein method)": [[45, "gemclus.mlp.MLPWasserstein.score"]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[45, "gemclus.mlp.MLPWasserstein.set_params"]], "categoricalmmd (class in gemclus.nonparametric)": [[46, "gemclus.nonparametric.CategoricalMMD"]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[46, "gemclus.nonparametric.CategoricalMMD.__init__"]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[46, "gemclus.nonparametric.CategoricalMMD.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[46, "gemclus.nonparametric.CategoricalMMD.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[46, "gemclus.nonparametric.CategoricalMMD.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[46, "gemclus.nonparametric.CategoricalMMD.get_params"]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[46, "gemclus.nonparametric.CategoricalMMD.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[46, "gemclus.nonparametric.CategoricalMMD.predict_proba"]], "score() (gemclus.nonparametric.categoricalmmd method)": [[46, "gemclus.nonparametric.CategoricalMMD.score"]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[46, "gemclus.nonparametric.CategoricalMMD.set_params"]], "categoricalmodel (class in gemclus.nonparametric)": [[47, "gemclus.nonparametric.CategoricalModel"]], "__init__() (gemclus.nonparametric.categoricalmodel method)": [[47, "gemclus.nonparametric.CategoricalModel.__init__"]], "fit() (gemclus.nonparametric.categoricalmodel method)": [[47, "gemclus.nonparametric.CategoricalModel.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmodel method)": [[47, "gemclus.nonparametric.CategoricalModel.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmodel method)": [[47, "gemclus.nonparametric.CategoricalModel.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmodel method)": [[47, "gemclus.nonparametric.CategoricalModel.get_params"]], "predict() (gemclus.nonparametric.categoricalmodel method)": [[47, "gemclus.nonparametric.CategoricalModel.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmodel method)": [[47, "gemclus.nonparametric.CategoricalModel.predict_proba"]], "score() (gemclus.nonparametric.categoricalmodel method)": [[47, "gemclus.nonparametric.CategoricalModel.score"]], "set_params() (gemclus.nonparametric.categoricalmodel method)": [[47, "gemclus.nonparametric.CategoricalModel.set_params"]], "categoricalwasserstein (class in gemclus.nonparametric)": [[48, "gemclus.nonparametric.CategoricalWasserstein"]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[48, "gemclus.nonparametric.CategoricalWasserstein.__init__"]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[48, "gemclus.nonparametric.CategoricalWasserstein.fit"]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[48, "gemclus.nonparametric.CategoricalWasserstein.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[48, "gemclus.nonparametric.CategoricalWasserstein.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[48, "gemclus.nonparametric.CategoricalWasserstein.get_params"]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[48, "gemclus.nonparametric.CategoricalWasserstein.predict"]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[48, "gemclus.nonparametric.CategoricalWasserstein.predict_proba"]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[48, "gemclus.nonparametric.CategoricalWasserstein.score"]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[48, "gemclus.nonparametric.CategoricalWasserstein.set_params"]], "sparselinearmi (class in gemclus.sparse)": [[49, "gemclus.sparse.SparseLinearMI"]], "__init__() (gemclus.sparse.sparselinearmi method)": [[49, "gemclus.sparse.SparseLinearMI.__init__"]], "fit() (gemclus.sparse.sparselinearmi method)": [[49, "gemclus.sparse.SparseLinearMI.fit"]], "fit_predict() (gemclus.sparse.sparselinearmi method)": [[49, "gemclus.sparse.SparseLinearMI.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmi method)": [[49, "gemclus.sparse.SparseLinearMI.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmi method)": [[49, "gemclus.sparse.SparseLinearMI.get_params"]], "get_selection() (gemclus.sparse.sparselinearmi method)": [[49, "gemclus.sparse.SparseLinearMI.get_selection"]], "path() (gemclus.sparse.sparselinearmi method)": [[49, "gemclus.sparse.SparseLinearMI.path"]], "predict() (gemclus.sparse.sparselinearmi method)": [[49, "gemclus.sparse.SparseLinearMI.predict"]], "predict_proba() (gemclus.sparse.sparselinearmi method)": [[49, "gemclus.sparse.SparseLinearMI.predict_proba"]], "score() (gemclus.sparse.sparselinearmi method)": [[49, "gemclus.sparse.SparseLinearMI.score"]], "set_params() (gemclus.sparse.sparselinearmi method)": [[49, "gemclus.sparse.SparseLinearMI.set_params"]], "sparselinearmmd (class in gemclus.sparse)": [[50, "gemclus.sparse.SparseLinearMMD"]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[50, "gemclus.sparse.SparseLinearMMD.__init__"]], "fit() (gemclus.sparse.sparselinearmmd method)": [[50, "gemclus.sparse.SparseLinearMMD.fit"]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[50, "gemclus.sparse.SparseLinearMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[50, "gemclus.sparse.SparseLinearMMD.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[50, "gemclus.sparse.SparseLinearMMD.get_params"]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[50, "gemclus.sparse.SparseLinearMMD.get_selection"]], "path() (gemclus.sparse.sparselinearmmd method)": [[50, "gemclus.sparse.SparseLinearMMD.path"]], "predict() (gemclus.sparse.sparselinearmmd method)": [[50, "gemclus.sparse.SparseLinearMMD.predict"]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[50, "gemclus.sparse.SparseLinearMMD.predict_proba"]], "score() (gemclus.sparse.sparselinearmmd method)": [[50, "gemclus.sparse.SparseLinearMMD.score"]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[50, "gemclus.sparse.SparseLinearMMD.set_params"]], "sparselinearmodel (class in gemclus.sparse)": [[51, "gemclus.sparse.SparseLinearModel"]], "__init__() (gemclus.sparse.sparselinearmodel method)": [[51, "gemclus.sparse.SparseLinearModel.__init__"]], "fit() (gemclus.sparse.sparselinearmodel method)": [[51, "gemclus.sparse.SparseLinearModel.fit"]], "fit_predict() (gemclus.sparse.sparselinearmodel method)": [[51, "gemclus.sparse.SparseLinearModel.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmodel method)": [[51, "gemclus.sparse.SparseLinearModel.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmodel method)": [[51, "gemclus.sparse.SparseLinearModel.get_params"]], "get_selection() (gemclus.sparse.sparselinearmodel method)": [[51, "gemclus.sparse.SparseLinearModel.get_selection"]], "path() (gemclus.sparse.sparselinearmodel method)": [[51, "gemclus.sparse.SparseLinearModel.path"]], "predict() (gemclus.sparse.sparselinearmodel method)": [[51, "gemclus.sparse.SparseLinearModel.predict"]], "predict_proba() (gemclus.sparse.sparselinearmodel method)": [[51, "gemclus.sparse.SparseLinearModel.predict_proba"]], "score() (gemclus.sparse.sparselinearmodel method)": [[51, "gemclus.sparse.SparseLinearModel.score"]], "set_params() (gemclus.sparse.sparselinearmodel method)": [[51, "gemclus.sparse.SparseLinearModel.set_params"]], "sparsemlpmmd (class in gemclus.sparse)": [[52, "gemclus.sparse.SparseMLPMMD"]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[52, "gemclus.sparse.SparseMLPMMD.__init__"]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[52, "gemclus.sparse.SparseMLPMMD.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[52, "gemclus.sparse.SparseMLPMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[52, "gemclus.sparse.SparseMLPMMD.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[52, "gemclus.sparse.SparseMLPMMD.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[52, "gemclus.sparse.SparseMLPMMD.get_selection"]], "path() (gemclus.sparse.sparsemlpmmd method)": [[52, "gemclus.sparse.SparseMLPMMD.path"]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[52, "gemclus.sparse.SparseMLPMMD.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[52, "gemclus.sparse.SparseMLPMMD.predict_proba"]], "score() (gemclus.sparse.sparsemlpmmd method)": [[52, "gemclus.sparse.SparseMLPMMD.score"]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[52, "gemclus.sparse.SparseMLPMMD.set_params"]], "sparsemlpmodel (class in gemclus.sparse)": [[53, "gemclus.sparse.SparseMLPModel"]], "__init__() (gemclus.sparse.sparsemlpmodel method)": [[53, "gemclus.sparse.SparseMLPModel.__init__"]], "fit() (gemclus.sparse.sparsemlpmodel method)": [[53, "gemclus.sparse.SparseMLPModel.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmodel method)": [[53, "gemclus.sparse.SparseMLPModel.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmodel method)": [[53, "gemclus.sparse.SparseMLPModel.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmodel method)": [[53, "gemclus.sparse.SparseMLPModel.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmodel method)": [[53, "gemclus.sparse.SparseMLPModel.get_selection"]], "path() (gemclus.sparse.sparsemlpmodel method)": [[53, "gemclus.sparse.SparseMLPModel.path"]], "predict() (gemclus.sparse.sparsemlpmodel method)": [[53, "gemclus.sparse.SparseMLPModel.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmodel method)": [[53, "gemclus.sparse.SparseMLPModel.predict_proba"]], "score() (gemclus.sparse.sparsemlpmodel method)": [[53, "gemclus.sparse.SparseMLPModel.score"]], "set_params() (gemclus.sparse.sparsemlpmodel method)": [[53, "gemclus.sparse.SparseMLPModel.set_params"]], "douglas (class in gemclus.tree)": [[54, "gemclus.tree.Douglas"]], "__init__() (gemclus.tree.douglas method)": [[54, "gemclus.tree.Douglas.__init__"]], "find_active_points() (gemclus.tree.douglas method)": [[54, "gemclus.tree.Douglas.find_active_points"]], "fit() (gemclus.tree.douglas method)": [[54, "gemclus.tree.Douglas.fit"]], "fit_predict() (gemclus.tree.douglas method)": [[54, "gemclus.tree.Douglas.fit_predict"]], "get_gemini() (gemclus.tree.douglas method)": [[54, "gemclus.tree.Douglas.get_gemini"]], "get_params() (gemclus.tree.douglas method)": [[54, "gemclus.tree.Douglas.get_params"]], "predict() (gemclus.tree.douglas method)": [[54, "gemclus.tree.Douglas.predict"]], "predict_proba() (gemclus.tree.douglas method)": [[54, "gemclus.tree.Douglas.predict_proba"]], "score() (gemclus.tree.douglas method)": [[54, "gemclus.tree.Douglas.score"]], "set_params() (gemclus.tree.douglas method)": [[54, "gemclus.tree.Douglas.set_params"]], "kauri (class in gemclus.tree)": [[55, "gemclus.tree.Kauri"]], "__init__() (gemclus.tree.kauri method)": [[55, "gemclus.tree.Kauri.__init__"]], "fit() (gemclus.tree.kauri method)": [[55, "gemclus.tree.Kauri.fit"]], "fit_predict() (gemclus.tree.kauri method)": [[55, "gemclus.tree.Kauri.fit_predict"]], "get_params() (gemclus.tree.kauri method)": [[55, "gemclus.tree.Kauri.get_params"]], "predict() (gemclus.tree.kauri method)": [[55, "gemclus.tree.Kauri.predict"]], "score() (gemclus.tree.kauri method)": [[55, "gemclus.tree.Kauri.score"]], "set_params() (gemclus.tree.kauri method)": [[55, "gemclus.tree.Kauri.set_params"]], "print_kauri_tree() (in module gemclus.tree)": [[56, "gemclus.tree.print_kauri_tree"]]}})