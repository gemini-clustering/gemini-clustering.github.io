Search.setIndex({"docnames": ["api", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_feature_selection_linear", "auto_examples/feature_selection/plot_feature_selection_logreg_mi", "auto_examples/feature_selection/plot_feature_selection_mlp", "auto_examples/feature_selection/plot_grouped_selection", "auto_examples/feature_selection/sg_execution_times", "auto_examples/index", "auto_examples/mlcl/index", "auto_examples/mlcl/plot_semi_supervised_consensus", "auto_examples/mlcl/sg_execution_times", "auto_examples/plot_circles", "auto_examples/plot_custom_model", "auto_examples/plot_graph_node_clustering", "auto_examples/plot_gstm", "auto_examples/plot_intro_mlp_mmd", "auto_examples/plot_moon_clustering", "auto_examples/plot_nonparametric_clustering", "auto_examples/plot_rim", "auto_examples/scoring/index", "auto_examples/scoring/plot_gemini_scoring", "auto_examples/scoring/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/trees/index", "auto_examples/trees/plot_douglas_example", "auto_examples/trees/plot_kauri_example", "auto_examples/trees/sg_execution_times", "generated/constraints/gemclus.add_mlcl_constraint", "generated/data/gemclus.data.celeux_one", "generated/data/gemclus.data.celeux_two", "generated/data/gemclus.data.draw_gmm", "generated/data/gemclus.data.gstm", "generated/data/gemclus.data.multivariate_student_t", "generated/gemini/gemclus.gemini.MI", "generated/gemini/gemclus.gemini.MMDGEMINI", "generated/gemini/gemclus.gemini.WassersteinGEMINI", "generated/models/gemclus.linear.LinearMMD", "generated/models/gemclus.linear.LinearModel", "generated/models/gemclus.linear.LinearWasserstein", "generated/models/gemclus.linear.RIM", "generated/models/gemclus.mlp.MLPMMD", "generated/models/gemclus.mlp.MLPModel", "generated/models/gemclus.mlp.MLPWasserstein", "generated/models/gemclus.nonparametric.CategoricalMMD", "generated/models/gemclus.nonparametric.CategoricalModel", "generated/models/gemclus.nonparametric.CategoricalWasserstein", "generated/models/gemclus.sparse.SparseLinearMI", "generated/models/gemclus.sparse.SparseLinearMMD", "generated/models/gemclus.sparse.SparseLinearModel", "generated/models/gemclus.sparse.SparseMLPMMD", "generated/models/gemclus.sparse.SparseMLPModel", "generated/models/gemclus.tree.Douglas", "generated/models/gemclus.tree.Kauri", "generated/models/gemclus.tree.print_kauri_tree", "history", "index", "quick_start", "sg_execution_times", "user_guide"], "filenames": ["api.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_feature_selection_linear.rst", "auto_examples/feature_selection/plot_feature_selection_logreg_mi.rst", "auto_examples/feature_selection/plot_feature_selection_mlp.rst", "auto_examples/feature_selection/plot_grouped_selection.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/mlcl/index.rst", "auto_examples/mlcl/plot_semi_supervised_consensus.rst", "auto_examples/mlcl/sg_execution_times.rst", "auto_examples/plot_circles.rst", "auto_examples/plot_custom_model.rst", "auto_examples/plot_graph_node_clustering.rst", "auto_examples/plot_gstm.rst", "auto_examples/plot_intro_mlp_mmd.rst", "auto_examples/plot_moon_clustering.rst", "auto_examples/plot_nonparametric_clustering.rst", "auto_examples/plot_rim.rst", "auto_examples/scoring/index.rst", "auto_examples/scoring/plot_gemini_scoring.rst", "auto_examples/scoring/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/trees/index.rst", "auto_examples/trees/plot_douglas_example.rst", "auto_examples/trees/plot_kauri_example.rst", "auto_examples/trees/sg_execution_times.rst", "generated/constraints/gemclus.add_mlcl_constraint.rst", "generated/data/gemclus.data.celeux_one.rst", "generated/data/gemclus.data.celeux_two.rst", "generated/data/gemclus.data.draw_gmm.rst", "generated/data/gemclus.data.gstm.rst", "generated/data/gemclus.data.multivariate_student_t.rst", "generated/gemini/gemclus.gemini.MI.rst", "generated/gemini/gemclus.gemini.MMDGEMINI.rst", "generated/gemini/gemclus.gemini.WassersteinGEMINI.rst", "generated/models/gemclus.linear.LinearMMD.rst", "generated/models/gemclus.linear.LinearModel.rst", "generated/models/gemclus.linear.LinearWasserstein.rst", "generated/models/gemclus.linear.RIM.rst", "generated/models/gemclus.mlp.MLPMMD.rst", "generated/models/gemclus.mlp.MLPModel.rst", "generated/models/gemclus.mlp.MLPWasserstein.rst", "generated/models/gemclus.nonparametric.CategoricalMMD.rst", "generated/models/gemclus.nonparametric.CategoricalModel.rst", "generated/models/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/models/gemclus.sparse.SparseLinearMI.rst", "generated/models/gemclus.sparse.SparseLinearMMD.rst", "generated/models/gemclus.sparse.SparseLinearModel.rst", "generated/models/gemclus.sparse.SparseMLPMMD.rst", "generated/models/gemclus.sparse.SparseMLPModel.rst", "generated/models/gemclus.tree.Douglas.rst", "generated/models/gemclus.tree.Kauri.rst", "generated/models/gemclus.tree.print_kauri_tree.rst", "history.rst", "index.rst", "quick_start.rst", "sg_execution_times.rst", "user_guide.rst"], "titles": ["GEMCLUS API", "Feature selection", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse Linear MI (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Grouped Feature selection with a linear model", "Computation times", "General examples", "Consensus clustering", "Consensus clustering with linking constraints on sample pairs", "Computation times", "Comparative clustering of circles dataset with kernel change", "Extending GemClus to build your own discriminative clustering model", "Graph node clustering with a nonparametric model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Scoring with GEMINI", "Scoring any model with GEMINI", "Computation times", "Computation times", "Trees", "Building a differentiable unsupervised tree: DOUGLAS", "Building an unsupervised tree with kernel-kmeans objective: KAURI", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.add_mlcl_constraint", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Douglas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Kauri", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.print_kauri_tree", "RELEASES", "Welcome to GemClus documentation!", "Quick start on gemclus", "Computation times", "User guide : contents"], "terms": {"The": [0, 2, 3, 4, 5, 9, 12, 20, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "packag": [0, 54, 56], "current": [0, 34, 35, 36, 38, 40, 42, 43, 45, 46, 47, 48, 49, 50, 52, 58], "contain": [0, 30, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54], "simpl": [0, 7, 9, 11, 12, 13, 17, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58], "mlp": [0, 1, 6, 7, 11, 14, 16, 22, 49, 50, 54, 56, 57], "logist": [0, 1, 4, 5, 6, 7, 12, 20, 22, 36, 37, 38, 39, 46, 47, 49, 50, 54, 57, 58], "regress": [0, 1, 4, 5, 6, 7, 12, 20, 22, 36, 37, 38, 39, 46, 47, 49, 50, 54, 57, 58], "all": [0, 2, 3, 4, 5, 7, 9, 12, 13, 16, 20, 27, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58], "featur": [0, 6, 14, 15, 18, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58], "well": [0, 11, 14, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58], "sparsiti": [0, 49, 50, 56, 58], "constrain": [0, 5, 9, 54, 58], "variant": 0, "follow": [0, 12, 13, 39, 55], "class": [0, 9, 12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 58], "implement": [0, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 51, 52, 55], "basic": 0, "evalu": [0, 2, 3, 20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "ani": [0, 7, 19, 21, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 56, 57, 58], "condit": [0, 33, 34, 35, 43, 44, 45, 48, 50], "distribut": [0, 2, 3, 4, 5, 7, 11, 12, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 50, 51, 52, 54, 55, 56, 57], "These": 0, "ar": [0, 2, 3, 4, 5, 9, 12, 13, 14, 16, 17, 18, 24, 25, 27, 28, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56], "base": [0, 7, 9, 28, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58], "standard": 0, "like": [0, 3, 14, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56], "one": [0, 3, 5, 20, 34, 35, 36, 38, 40, 42, 43, 45, 46, 47, 48, 49, 50, 52, 56], "hidden": [0, 40, 41, 42, 49, 50, 58], "layer": [0, 11, 40, 41, 42, 48, 49, 50, 58], "neural": [0, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56], "network": [0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56], "have": [0, 9, 11, 12, 20, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "paramet": [0, 5, 9, 11, 12, 13, 17, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "assign": [0, 5, 13, 17, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "data": [0, 2, 3, 5, 9, 11, 12, 13, 17, 18, 20, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58], "sampl": [0, 2, 3, 4, 7, 8, 10, 14, 18, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58], "accord": [0, 13, 18, 52], "indic": [0, 13, 27, 46, 47, 48, 49, 50, 51], "consequ": [0, 14, 43, 44, 45], "do": [0, 9, 13, 16, 18, 20, 43, 44, 45, 55], "depend": [0, 2, 4, 5, 13, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "locat": [0, 31], "overal": [0, 55], "can": [0, 3, 9, 11, 12, 17, 20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58], "us": [0, 1, 5, 6, 7, 9, 11, 12, 13, 16, 17, 18, 20, 24, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58], "decis": [0, 7, 18, 22, 25, 57, 58], "boundari": [0, 7, 18, 22, 57, 58], "hyper": 0, "howev": 0, "underli": [0, 52], "cannot": [0, 11, 27, 54], "unseen": 0, "predict": [0, 2, 3, 4, 9, 12, 14, 15, 16, 18, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56], "train": [0, 12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56], "progress": [0, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "remov": 0, "thei": [0, 9, 20], "select": [0, 6, 28, 29, 46, 47, 48, 49, 50, 52, 57, 58], "subset": 0, "which": [0, 2, 4, 5, 12, 13, 16, 18, 25, 27, 28, 29, 30, 31, 34, 35, 46, 47, 48, 49, 50, 51, 52, 56], "mai": [0, 9, 14, 52, 55, 56], "enhanc": 0, "interpret": 0, "we": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 16, 17, 18, 20, 25, 55, 56, 58], "propos": [0, 3, 9, 11, 18, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 56, 58], "method": [0, 2, 3, 4, 5, 9, 13, 17, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 58], "architectur": [0, 49, 50, 58], "thu": [0, 2, 3, 4, 5, 27, 56], "rule": [0, 51], "simultan": [0, 46, 47, 48, 49, 50], "construct": [0, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "i": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 58], "learnt": [0, 24], "function": [0, 12, 13, 16, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58], "intend": 0, "help": [0, 14, 52, 55], "understand": 0, "structur": [0, 52, 53], "abov": 0, "print": [0, 2, 3, 4, 5, 9, 13, 17, 18, 20, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "inner": 0, "thi": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 28, 29, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58], "aim": [0, 12], "decor": [0, 9, 27], "give": [0, 7, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56], "further": [0, 56], "guidanc": [0, 9], "desir": [0, 16], "synthet": 0, "spars": [1, 5, 6, 7, 13, 16, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 54, 56, 57, 58], "mmd": [1, 3, 6, 7, 11, 22, 25, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58], "ovo": [1, 6, 7, 9, 13, 15, 17, 34, 35, 36, 38, 40, 42, 43, 45, 47, 49, 56, 57, 58], "linear": [1, 6, 7, 9, 11, 14, 16, 18, 20, 34, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58], "mi": [1, 6, 7, 12, 37, 41, 44, 46, 48, 51, 54, 57], "group": [1, 4, 6, 7, 46, 47, 48, 49, 50, 57, 58], "model": [1, 6, 7, 19, 21, 22, 24, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58], "ova": [1, 6, 7, 20, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 56, 57, 58], "go": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 55], "end": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 51, 52, 54], "download": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 55], "full": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "exampl": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 24, 25, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 54, 55, 57], "code": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 55], "In": [2, 3, 4, 5, 12, 13, 15, 18, 31, 55, 56, 58], "ask": [2, 3, 4, 5, 56], "gemclu": [2, 3, 4, 5, 7, 9, 11, 13, 14, 15, 16, 17, 18, 20, 22, 24, 25, 54, 57, 58], "sparselinearmmd": [2, 5, 46, 49], "perform": [2, 3, 4, 5, 9, 13, 20, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58], "where": [2, 3, 4, 5, 9, 14, 16, 20, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "regularis": [2, 3, 4, 5, 18, 36, 37, 38, 39], "penalti": [2, 3, 4, 5, 18, 20, 39, 46, 47, 48, 49, 50, 58], "increas": [2, 3, 4, 5, 46, 47, 48, 49, 50, 52], "until": [2, 3, 4, 5, 46, 47, 48, 49, 50, 52], "2": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25, 26, 27, 28, 29, 31, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 56, 58], "discard": [2, 3, 4, 5], "keep": [2, 3, 4, 58], "best": [2, 3, 4, 9, 46, 47, 48, 49, 50, 52], "weight": [2, 3, 4, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "minimum": [2, 3, 4, 46, 47, 48, 49, 50, 52], "number": [2, 3, 4, 9, 11, 13, 17, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55], "maintain": [2, 3, 4], "gemini": [2, 3, 4, 5, 11, 12, 13, 14, 16, 17, 21, 22, 24, 25, 27, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57], "score": [2, 3, 4, 5, 13, 17, 18, 21, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57], "close": [2, 3, 4, 9, 11, 28, 31], "90": [2, 3, 4], "maximum": [2, 3, 4, 13, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52], "valu": [2, 3, 4, 11, 13, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "encount": [2, 3, 4], "dure": [2, 3, 4, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "consist": [2, 3, 4, 5, 9, 11, 18, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56], "3": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56], "isotrop": [2, 3, 4, 12, 28], "gaussian": [2, 3, 4, 7, 11, 12, 13, 18, 20, 22, 28, 29, 30, 31, 54, 57], "so": [2, 3, 4, 14, 16, 20, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "find": [2, 3, 4, 5, 9, 14, 16, 51, 55], "5d": [2, 3], "20": [2, 3, 28, 40, 41, 42, 49, 50], "noisi": [2, 3, 4, 5, 28, 29], "variabl": [2, 3, 4, 5, 13, 28, 29, 46, 47, 48, 49, 50, 54], "optim": [2, 3, 4, 5, 11, 16], "solut": [2, 3, 4, 5, 9, 16, 46, 47, 48, 49, 50], "should": [2, 3, 4, 5, 9, 33, 34, 35, 48, 50, 51], "onli": [2, 3, 4, 5, 13, 14, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56], "5": [2, 3, 4, 5, 9, 11, 13, 14, 15, 16, 17, 18, 24, 25, 28, 46, 47, 48, 49, 50], "relev": [2, 3, 4, 5], "suffici": [2, 3, 4, 5], "get": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56], "correct": [2, 3, 4, 5, 12], "import": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 56], "numpi": [2, 3, 4, 5, 9, 11, 12, 13, 14, 16, 17, 18, 20, 55], "np": [2, 3, 4, 5, 9, 11, 12, 13, 14, 16, 17, 18, 20], "from": [2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58], "matplotlib": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18], "pyplot": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18], "plt": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18], "sklearn": [2, 3, 4, 9, 11, 13, 15, 16, 17, 18, 20, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 56, 58], "metric": [2, 3, 9, 11, 17, 20, 24, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 58], "celeux_on": [2, 3, 9], "gener": [2, 3, 4, 5, 9, 11, 12, 13, 17, 18, 20, 24, 25, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54], "separ": [2, 3, 4, 13, 17, 18, 54], "addit": [2, 3, 28, 29, 34, 35, 54, 56], "p": [2, 3, 9, 13, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56], "independ": [2, 3, 28, 56], "x": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58], "y": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58], "n": [2, 3, 5, 9, 12, 13, 14, 17, 28, 29, 30, 31, 32], "300": [2, 3, 28], "mu": [2, 3, 9, 28], "1": [2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 27, 28, 31, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 56], "7": [2, 3, 5, 25, 28], "random_st": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "0": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57], "creat": [2, 3, 4, 5, 16, 17, 18, 50], "just": [2, 3, 4, 5, 18], "call": [2, 3, 4, 5, 13, 17, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "iter": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "through": [2, 3, 4, 5, 49, 50, 52, 54, 55], "gradient": [2, 3, 4, 5, 12, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54], "descent": [2, 3, 4, 5, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "clf": [2, 3, 4, 5, 14, 15, 18, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49], "alpha": [2, 3, 4, 5, 11, 13, 14, 16, 18, 31, 46, 47, 48, 49, 50], "true": [2, 3, 4, 5, 9, 12, 13, 14, 15, 16, 17, 18, 20, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58], "search": [2, 3, 4, 5], "elimin": [2, 3, 4, 5, 49, 50], "best_weight": [2, 3, 4, 5, 46, 47, 48, 49, 50], "n_featur": [2, 3, 4, 5, 28, 29, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "take": [2, 4, 5, 9, 11, 14, 18, 56], "look": [2, 4, 5, 11, 18, 56], "how": [2, 4, 5, 7, 9, 17, 18, 20, 24, 25, 28, 31, 56, 58], "decreas": [2, 4], "f": [2, 3, 4, 5, 13, 17, 20, 31, 49, 50, 55, 56], "top": [2, 4, 5, 12, 14, 46, 48, 49, 50], "wa": [2, 4, 5, 28, 29, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56], "max": [2, 4, 5, 9, 11, 16, 18], "settl": [2, 4, 5], "an": [2, 4, 5, 7, 9, 13, 14, 16, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58], "optimum": [2, 4, 5], "9": [2, 4, 5, 46, 47, 48, 49, 50], "highlight": [2, 4], "along": [2, 4, 16], "titl": [2, 3, 4, 11, 12, 55], "plot": [2, 4, 11, 13, 14], "xlabel": [2, 4, 14, 15, 18], "ylabel": [2, 4, 14, 15, 18], "ylim": [2, 4, 11, 14], "show": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "expect": [2, 3, 12, 14, 56], "first": [2, 3, 12, 20, 40, 41, 42, 49, 50, 56], "linalg": [2, 3], "norm": [2, 3, 27, 58], "axi": [2, 3, 4, 5, 11, 12, 16], "ord": [2, 3], "8259728240495163": 2, "0249912491496707": 2, "7224921242347038": 2, "arrai": [2, 3, 4, 5, 12, 13, 17, 28, 29, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "4": [2, 3, 4, 5, 6, 11, 13, 14, 17, 25, 29], "now": [2, 3, 4, 14, 18, 20, 54], "y_pred": [2, 3, 4, 9, 12, 13, 14, 15, 16, 17, 18, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "ari": [2, 3, 9, 13, 17, 24, 25], "adjusted_rand_scor": [2, 3, 9, 13, 17, 24, 25], "83290627605772": 2, "total": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 57], "run": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56], "time": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 56], "script": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "minut": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "19": [2, 6, 55, 57], "666": [2, 6, 57], "second": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24], "jupyt": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "notebook": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "plot_feature_selection_linear": [2, 6, 57], "ipynb": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "python": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 54], "sourc": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55], "py": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 57], "galleri": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 57, 58], "sphinx": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25], "sparselinearmi": [3, 47, 54], "path": [3, 13, 16, 46, 47, 48, 49, 50, 54], "50": [3, 4, 5, 11, 13, 14, 15, 16, 18, 22, 57], "contrari": [3, 12], "guid": [3, 16, 52, 55, 56], "specif": [3, 56], "kernel": [3, 7, 9, 22, 23, 26, 33, 34, 35, 36, 37, 40, 41, 43, 44, 47, 48, 49, 51, 52, 54, 57, 58], "space": [3, 34, 35, 58], "That": 3, "why": 3, "accept": 3, "threshold": [3, 5, 16, 24], "lower": [3, 5], "instead": [3, 13, 14, 20, 54], "other": [3, 28, 37, 41, 43, 44, 45, 48, 51], "A": [3, 9, 27, 28, 29, 30, 31, 36, 38, 40, 42, 43, 45, 47, 49, 50, 51, 53, 54, 56], "veri": 3, "similar": [3, 11], "found": [3, 52, 55], "discrimin": [3, 22, 27, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 57], "brain": [3, 46], "mri": [3, 46], "segment": [3, 46], "kong": [3, 46], "et": [3, 18, 28, 29, 39, 49, 50, 56], "al": [3, 18, 28, 29, 39, 49, 50, 56], "2014": [3, 28, 29], "decomposit": 3, "keep_threshold": [3, 5, 46, 47, 48, 49, 50], "6": [3, 5, 9, 25], "11": [3, 5], "let": [3, 18, 20], "": [3, 4, 13, 15, 18, 20, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "make": [3, 13], "small": [3, 9, 46, 47, 48, 49, 50, 55], "pca": 3, "visualis": [3, 5], "purpos": 3, "distinguish": 3, "label": [3, 20, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "x_pca": 3, "n_compon": [3, 11], "fit_transform": [3, 20], "k": [3, 30, 43, 44, 45, 56], "rang": [3, 5, 9, 13], "class_indic": 3, "scatter": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18], "c": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 28, 29, 31, 55, 56], "marker": 3, "o": 3, "off": [3, 11, 16], "celeux": [3, 28, 29], "lasso": [3, 4, 46, 47, 48, 49, 50, 58], "458336976163333": 3, "848": [3, 6, 57], "plot_feature_selection_logreg_mi": [3, 6, 57], "sparsemlpmmd": [4, 48, 50], "2d": [4, 29], "48": 4, "make_blob": [4, 15, 18], "center": [4, 15, 18], "cluster_std": [4, 15, 18], "n_sampl": [4, 11, 12, 15, 16, 18, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "200": [4, 11, 14, 15, 16, 18], "add": [4, 12, 27, 58], "extra": 4, "random": [4, 5, 9, 12, 13, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "seed": [4, 5, 9, 13], "concaten": [4, 5, 12, 28], "normal": [4, 5], "scale": [4, 12, 28, 30, 32, 55], "size": [4, 5, 12, 13, 16, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54], "18": 4, "batch_siz": [4, 5, 12, 14, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51], "max_it": [4, 5, 11, 12, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "25": 4, "learning_r": [4, 5, 9, 12, 13, 16, 17, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "001": [4, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "our": [4, 5, 7, 9, 12, 13, 16, 55, 56], "figur": 4, "figsiz": 4, "10": [4, 5, 9, 14, 18, 22, 32, 46, 47, 48, 49, 50, 56, 57], "subplot": [4, 11], "tight_layout": [4, 11], "get_select": [4, 5, 46, 47, 48, 49, 50, 54], "4596486286280377": 4, "5824499242836225": 4, "4242049318552603": 4, "x_0": [4, 15, 18], "x_1": [4, 15, 18], "x_2": [4, 15, 18], "ax0": [4, 15, 18], "crimson": [4, 15, 18], "ax1": [4, 15, 18], "deepskyblu": [4, 15, 18], "ax2": [4, 15, 18], "darkgreen": [4, 15, 18], "leg": [4, 15, 18], "legend": [4, 15, 18], "loc": [4, 12, 15, 18, 30, 32], "upper": [4, 15, 18], "left": [4, 15, 18, 56], "fancybox": [4, 15, 18], "scatterpoint": [4, 15, 18], "get_fram": [4, 15, 18], "set_alpha": [4, 15, 18], "675": [4, 6, 57], "plot_feature_selection_mlp": [4, 6, 57], "moreov": [5, 56], "produc": [5, 51], "some": [5, 7, 9, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58], "categor": [5, 43, 44, 45], "hot": [5, 46, 47, 48, 49, 50], "encod": [5, 46, 47, 48, 49, 50], "consid": [5, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52], "altogeth": 5, "option": [5, 16, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "binomi": [5, 13], "cluster": [5, 10, 20, 22, 24, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58], "8": [5, 9, 13, 16, 22, 54], "inform": [5, 12, 18, 20, 29, 31, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56], "outcom": 5, "multinomi": 5, "x1_class_1": 5, "pval": [5, 12, 30], "05": [5, 6, 11, 16, 26, 46, 47, 48, 49, 50, 57], "45": 5, "x2_class_1": 5, "x_class_1": 5, "x1_class_2": 5, "x2_class_2": 5, "x_class_2": 5, "x_inform": 5, "x_nois": 5, "100": [5, 9, 12, 13, 17, 24, 51], "repeat": 5, "arang": 5, "final": [5, 9], "write": 5, "out": [5, 55], "partit": [5, 46, 47, 48, 49, 50], "shape": [5, 9, 12, 13, 16, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "def": [5, 12], "rand_jitt": 5, "return": [5, 12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "randn": 5, "len": [5, 9], "01": [5, 6, 22, 46, 47, 48, 49, 50, 51, 57], "argmax": [5, 9, 18], "red": 5, "blue": [5, 14], "12": [5, 33, 34, 35], "13": 5, "14": [5, 29], "15": 5, "1e": [5, 9, 12, 13, 16, 17, 18, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "80": 5, "4935152433868388": 5, "8084378363828286": 5, "646750269106263": 5, "822": [5, 6, 57], "plot_grouped_select": [5, 6, 57], "00": [6, 10, 21, 22, 26, 57], "30": 6, "011": 6, "execut": [6, 10, 21, 22, 26, 57], "file": [6, 10, 21, 22, 26, 57], "auto_exampl": [6, 10, 21, 22, 26], "feature_select": [6, 57], "mem": [6, 10, 21, 22, 26, 57], "mb": [6, 10, 21, 22, 26, 57], "02": [6, 57], "here": [7, 9, 11, 12, 13, 14, 20, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58], "introduc": [7, 22, 54, 57], "non": [7, 13, 22, 29, 57], "parametr": [7, 13, 22, 56, 57], "map": [7, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57], "mixtur": [7, 11, 13, 18, 22, 28, 29, 30, 31, 54, 57], "low": [7, 9, 22, 51, 57], "degre": [7, 22, 31, 32, 57], "student": [7, 22, 31, 32, 54, 57], "draw": [7, 14, 22, 28, 29, 30, 31, 32, 57], "between": [7, 22, 27, 33, 34, 35, 49, 50, 56, 57, 58], "two": [7, 11, 12, 22, 25, 34, 35, 40, 41, 42, 48, 49, 52, 56, 57], "interlac": [7, 22, 57], "moon": [7, 22, 57], "rim": [7, 22, 36, 37, 38, 57], "graph": [7, 16, 17, 22, 54, 57], "node": [7, 17, 22, 25, 52, 54, 57], "nonparametr": [7, 9, 17, 22, 54, 57], "compar": [7, 22, 28, 29, 34, 35, 56, 57], "circl": [7, 22, 57], "dataset": [7, 15, 16, 22, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 54, 56, 57], "chang": [7, 22, 57], "extend": [7, 22, 57], "build": [7, 22, 23, 26, 57], "your": [7, 22, 56, 57], "own": [7, 22, 56, 57], "link": [7, 8, 10, 27, 54, 57], "constraint": [7, 8, 10, 27, 46, 48, 49, 50, 52, 54, 57], "pair": [7, 8, 10, 13, 16, 27, 57], "differenti": [7, 23, 26, 54, 57], "unsupervis": [7, 9, 12, 23, 26, 51, 52, 54, 57], "dougla": [7, 23, 26, 54, 57], "kmean": [7, 23, 26, 52, 57], "object": [7, 12, 23, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57], "kauri": [7, 23, 26, 53, 54, 57], "auto_examples_python": 7, "zip": 7, "auto_examples_jupyt": 7, "improv": [9, 46, 47, 48, 49, 50, 56], "enforc": 9, "loos": 9, "equival": [9, 25], "ensembl": 9, "learn": [9, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56], "seek": [9, 20], "agreeanc": 9, "describ": [9, 27, 39, 46, 47, 48, 49, 50, 53], "ratio": 9, "were": [9, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "togeth": [9, 27], "provid": [9, 55, 56, 58], "Then": [9, 11], "ensur": [9, 12, 27, 46, 47, 48, 49, 50], "remain": [9, 46, 47, 48, 49, 50, 54], "apart": [9, 12, 14], "while": 9, "satisfi": [9, 27, 52], "try": [9, 15, 18, 55], "its": [9, 51, 54, 56, 58], "level": [9, 18], "supervis": 9, "input": [9, 14, 18, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 58], "advantag": 9, "requir": [9, 54, 55, 58], "knowledg": 9, "rather": [9, 20], "idea": 9, "whether": [9, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "start": [9, 11, 12, 20, 46, 47, 48, 49, 50, 55], "categoricalwasserstein": [9, 13, 43, 44], "linearmmd": [9, 37, 38, 39], "add_mlcl_constraint": [9, 54], "itertool": [9, 13], "challeng": [9, 11], "mean": [9, 11, 12, 13, 14, 17, 28, 30, 31, 34], "fit": [9, 11, 13, 16, 17, 18, 20, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56], "sever": [9, 56], "variou": [9, 46, 47, 48, 49, 50], "all_model": 9, "n_cluster": [9, 11, 12, 13, 14, 16, 17, 18, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56], "cosin": [9, 34, 35, 36, 38, 40, 42, 43, 45, 47, 49, 52], "sigmoid": [9, 12, 34, 36, 40, 43, 47, 49, 52], "rbf": [9, 11, 34, 36, 40, 43, 47, 49, 52], "sub": 9, "11914066061963555": 9, "11176053892324672": 9, "11421905413971052": 9, "22472124150185058": 9, "e": [9, 28, 29, 33, 34, 35, 55, 56], "same": [9, 12, 20, 27, 58], "consensus_matrix": 9, "zero": [9, 11, 54], "j": [9, 13], "combinations_with_replac": 9, "r": [9, 33, 34, 35, 49, 50, 56], "int": [9, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "precomput": [9, 13, 16, 20, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54], "notic": [9, 25], "api": [9, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56], "although": 9, "superflu": 9, "consensus_model": 9, "y_pred_consensu": 9, "predict_proba": [9, 18, 20, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "what": 9, "10728640074310927": 9, "simul": 9, "extrapol": 9, "real": 9, "life": 9, "situat": 9, "would": [9, 16, 55], "emphas": 9, "more": [9, 56, 58], "field": 9, "expert": 9, "most": [9, 58], "confid": 9, "sorted_confidence_sampl": 9, "sort": 9, "kei": 9, "lambda": 9, "revers": 9, "must_link": [9, 27], "unsure_sample_pair": 9, "combin": [9, 13, 34, 35, 36, 38, 40, 42, 43, 45, 47, 49, 52, 54], "next": 9, "cannot_link": [9, 27], "over": [9, 28], "base_model": 9, "line": 9, "mlcl_consensus_model": 9, "y_pred_mlcl_consensu": 9, "16976700304809886": 9, "consensus_ord": 9, "argsort": 9, "imshow": 9, "cmap": [9, 11, 14, 16], "seismic": 9, "356": [9, 10, 57], "plot_semi_supervised_consensu": [9, 10, 57], "08": [10, 22, 57], "mlcl": [10, 57], "consensu": [10, 57], "centr": 11, "algorithm": [11, 16, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 58], "unless": 11, "adequ": [11, 13], "spectralclust": 11, "gaussianmixtur": 11, "make_circl": 11, "nois": [11, 16], "factor": [11, 27, 46, 47, 48, 49, 50, 52], "normalis": 11, "std": 11, "ddof": 11, "set": [11, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58], "covari": [11, 13, 17, 30], "type": [11, 54, 56], "spheric": 11, "lighten": 11, "correspond": [11, 34, 35, 36, 38, 40, 42, 43, 45, 47, 49, 52], "symmetri": 11, "eas": 11, "job": 11, "initialis": [11, 12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "actual": [11, 52], "gm": 11, "covariance_typ": 11, "means_init": 11, "1000": [11, 12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "spectral": [11, 16], "sc": 11, "multi": [11, 58], "perceptron": [11, 58], "becaus": [11, 13, 16], "incap": 11, "euclidean_gemini": 11, "mlpmmd": [11, 15, 41, 42], "comput": [11, 12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 58], "rbf_gemini": 11, "grid": [11, 14], "x_val": [11, 14, 16, 18], "linspac": [11, 14, 16, 18], "min": [11, 16, 18], "num": [11, 14, 16, 18], "y_val": [11, 14, 16, 18], "xx": [11, 14, 16, 18], "yy": [11, 14, 16, 18], "meshgrid": [11, 14, 16, 18], "grid_input": [11, 14, 16, 18], "c_": [11, 14, 16, 18], "ravel": [11, 14, 16, 18], "contourf": [11, 14, 16, 18], "reshap": [11, 12, 14, 16, 18], "cm": [11, 16, 25], "labels_": [11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "916": [11, 22, 57], "plot_circl": [11, 22, 57], "It": [12, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 58], "possibl": [12, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 58], "wish": 12, "avail": [12, 37, 41, 44, 48, 51, 56], "among": [12, 51], "choic": [12, 52, 58], "To": [12, 13, 16, 37, 41, 44, 48, 51], "framework": [12, 39], "defin": [12, 16, 34, 35], "still": 12, "bia": [12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "less": [12, 16], "activ": [12, 51], "tell": 12, "written": [12, 55], "p_": [12, 45, 56, 58], "theta": [12, 56, 58], "text": [12, 33, 34], "discriminativemodel": [12, 58], "draw_gmm": [12, 13, 17, 54], "binaryregress": 12, "parent": 12, "__init__": [12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "self": [12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "solver": [12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "adam": [12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "none": [12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "verbos": [12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "fals": [12, 13, 16, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "super": 12, "_init_param": [12, 58], "state": 12, "in_threshold": 12, "sqrt": 12, "theta_": [12, 43, 44, 45], "uniform": 12, "_get_weight": [12, 58], "For": [12, 56, 58], "optimis": [12, 13, 17, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "need": [12, 20, 34, 35], "insid": 12, "list": [12, 27, 30, 46, 47, 48, 49, 50, 51], "_infer": [12, 58], "retain": 12, "output": [12, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 58], "you": [12, 55, 56, 58], "must": [12, 27, 33, 34, 35, 36, 38, 40, 42, 43, 45, 46, 47, 48, 49, 50, 52, 54], "probabl": [12, 13, 18, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56], "vector": [12, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "y_pred_logit": 12, "matmul": [12, 20], "exp": [12, 13], "flag": 12, "allow": [12, 55], "store": 12, "intermedi": 12, "backpropag": 12, "_y_sigmoid": 12, "As": 12, "duplic": 12, "opposit": 12, "column": 12, "up": [12, 52], "each": [12, 13, 28, 29, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "row": 12, "otherwis": [12, 20, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "work": [12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55], "_compute_grad": 12, "ha": [12, 51, 55, 56], "extens": [12, 55, 58], "appli": [12, 27], "And": 12, "finish": 12, "theta_grad": 12, "t": [12, 13, 14, 20, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54], "order": [12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "match": [12, 13, 20, 51], "goal": 12, "maximis": [12, 18, 24, 27, 36, 38, 39, 40, 42, 43, 44, 45, 51, 56], "common": 12, "minimis": [12, 27], "neg": 12, "ey": [12, 13, 17, 20], "ones": [12, 13, 17, 34, 35, 36, 38, 40, 42, 43, 45, 47, 49, 52], "custom_model": 12, "wasserstein_ovo": [12, 37, 41, 44, 48, 51], "fit_predict": [12, 13, 14, 16, 17, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "binari": [12, 53], "697": [12, 22, 57], "plot_custom_model": [12, 22, 57], "simplifi": 13, "version": [13, 34, 35, 46, 49, 56, 58], "latent": 13, "posit": [13, 32], "procedur": 13, "mani": [13, 55], "determin": [13, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "distanc": [13, 16, 20, 33, 34, 35, 38, 42, 45, 54, 56, 58], "associ": [13, 24], "note": [13, 16, 52, 58], "given": [13, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 58], "ident": 13, "matrix": [13, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "scipi": [13, 16, 55], "csgraph": [13, 16], "pairwise_dist": [13, 16, 58], "euclidean": [13, 16, 20, 35, 37, 38, 41, 42, 44, 45, 48, 51, 58], "edge_prob": 13, "adjacency_matrix": 13, "adjac": [13, 16], "symmetr": [13, 33, 34, 35], "shortest": [13, 16], "floyd_warshal": [13, 16], "direct": [13, 16], "unweight": [13, 16], "replac": [13, 16, 20], "inf": [13, 16], "isinf": [13, 16], "specifi": [13, 20, 46, 47, 48, 49, 50], "custom": [13, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 54], "pass": [13, 16, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54], "argument": [13, 34, 35, 36, 38, 40, 42, 43, 45, 47, 49, 52], "1789": [13, 17], "dummi": 13, "unnecessari": 13, "There": 13, "index": 13, "node_i": 13, "node_j": 13, "grai": 13, "linewidth": 13, "ari_scor": [13, 17], "gemini_scor": [13, 17], "3f": [13, 17, 20], "977": 13, "141": 13, "140": [13, 22, 26, 57], "plot_graph_node_clust": [13, 22, 57], "retak": [14, 16], "experi": [14, 16], "origin": [14, 16, 30, 55, 56, 58], "paper": [14, 16, 39, 58], "want": [14, 16, 58], "incorpor": [14, 37, 41, 44, 48, 51], "freedom": [14, 31, 32], "seem": 14, "outlier": 14, "unlik": 14, "done": [14, 54], "linearwasserstein": [14, 36, 37, 39], "gstm": [14, 54], "far": 14, "df": [14, 31, 32], "zz": [14, 16, 18], "reds_r": 14, "xlim": 14, "970": [14, 22, 57], "plot_gstm": [14, 22, 57], "base_gemini": 15, "densemmdovo": 15, "environ": [15, 18], "pleas": [15, 18, 52, 55, 56], "rerun": [15, 18], "cell": [15, 18], "html": [15, 18], "represent": [15, 18, 40, 41, 42, 49, 50], "trust": [15, 18], "On": [15, 18, 46, 48, 49, 50], "github": [15, 18, 55], "unabl": [15, 18], "render": [15, 18], "load": 15, "page": [15, 18], "nbviewer": [15, 18], "org": [15, 18], "mlpmmdmlpmmd": 15, "989": [15, 22, 57], "plot_intro_mlp_mmd": [15, 22, 57], "face": 16, "trick": 16, "mlpwasserstein": [16, 40, 41], "abl": [16, 48, 50], "make_moon": 16, "2023": [16, 56], "edg": 16, "than": [16, 46, 47, 48, 49, 50, 56], "quantil": 16, "564": [16, 22, 57], "plot_moon_clust": [16, 22, 57], "illustr": 17, "categoricalmmd": [17, 44, 45], "975": 17, "328": 17, "555": [17, 22, 57], "plot_nonparametric_clust": [17, 22, 57], "mutual": [18, 31, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56], "kraus": [18, 39], "2010": [18, 39], "under": [18, 46, 47, 48, 49, 50, 55], "ell_2": [18, 27, 39], "reg": [18, 39], "rimrim": 18, "u": [18, 55], "grad": 18, "grid_pr": 18, "isol": [18, 54], "4486538478231719": 18, "436": [18, 22, 57], "plot_rim": [18, 22, 57], "anoth": [20, 58], "preprocess": 20, "linear_model": [20, 25], "naive_bay": 20, "load_breast_canc": 20, "return_x_i": [20, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 56], "robustscal": 20, "differ": [20, 24, 25, 46, 47, 48, 49, 50, 51, 52], "breast": 20, "cancer": 20, "l2": [20, 35, 38, 42, 45], "clf1": 20, "logisticregress": 20, "p_y_given_x_1": 20, "naiv": 20, "bay": [20, 56], "hypothes": [20, 55], "clf2": 20, "gaussiannb": 20, "p_y_given_x_2": 20, "both": [20, 54, 58], "wassersteingemini": [20, 54], "v": [20, 34, 35, 56], "wasserstein_scor": 20, "affin": [20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "wasserstein": [20, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 58], "compute_affin": [20, 33, 34, 35], "clf1_score": 20, "clf2_score": 20, "878": 20, "005": 20, "By": [20, 58], "obtain": [20, 25], "share": 20, "y_one_hot": 20, "precomputed_dist": 20, "431": 20, "403": 20, "921": [20, 21, 57], "plot_gemini_scor": [20, 21, 57], "04": 22, "22": [22, 25, 56], "267": 22, "03": [22, 57], "few": [24, 46, 47, 48, 49, 50], "bin": [24, 51], "per": [24, 33, 34, 35, 51, 54], "iri": [24, 25], "load_iri": [24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 56], "target": [24, 25], "mmd_ova": [24, 37, 41, 44, 48, 50, 51, 56], "n_cut": [24, 51], "y_pred_linear": [24, 25], "474150686050238": 24, "5681159420289855": 24, "915": [24, 26, 57], "plot_douglas_exampl": [24, 26, 57], "accompanni": 25, "gain": [25, 52], "deriv": [25, 33, 34, 35, 48, 50, 55, 56, 58], "squar": 25, "print_kauri_tre": 25, "limit": [25, 52], "depth": [25, 52], "simplic": 25, "max_clust": [25, 52], "max_depth": [25, 52], "9459": 25, "167022308022": 25, "additive_chi2_model": 25, "additive_chi2": [25, 34, 36, 40, 43, 47, 49, 52], "y_pred_additive_chi2": 25, "43532371061057": 25, "7172759168337549": 25, "8680377279943841": 25, "feature_nam": [25, 53], "petal": 25, "width": 25, "length": [25, 46, 47, 48, 49, 50], "224": [25, 26, 57], "plot_kauri_exampl": [25, 26, 57], "06": 26, "tree": [26, 54, 57], "gemini_model": 27, "contraint": 27, "respect": [27, 28, 48, 50, 54, 56], "fulli": 27, "mlp___": 27, "linear___": 27, "categorical___": 27, "involv": [27, 37, 41, 44, 48, 51, 56], "ndarrai": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "n_constraint": 27, "default": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58], "being": 27, "i1": 27, "j1": 27, "iN": 27, "jn": 27, "If": [27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58], "float": [27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "hyperparamet": [27, 39, 51], "tupl": [28, 29, 30], "compon": [28, 29, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "dimens": 28, "excess": 28, "taken": [28, 29], "section": [28, 29], "control": [28, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54], "randomst": [28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "instanc": [28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "creation": [28, 29, 30, 31, 32], "reproduc": [28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "across": [28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "multipl": [28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "gmm": [28, 29, 30, 31], "drawn": [28, 29, 30, 31, 32, 56], "refer": [28, 29, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "g": [28, 29], "martin": [28, 29], "magniett": [28, 29], "m": [28, 29, 31, 49, 50, 55, 56], "l": [28, 29, 31, 49, 50, 55, 56], "maugi": [28, 29], "rabusseau": [28, 29], "rafteri": [28, 29], "regular": [28, 29, 39], "approach": [28, 29], "journal": [28, 29, 56], "de": [28, 29], "la": [28, 29], "societ": [28, 29], "francais": [28, 29], "statistiqu": [28, 29], "155": [28, 29], "57": [28, 29], "71": [28, 29], "2000": 29, "linearli": 29, "element": 30, "d": [30, 32, 51, 55, 56], "proport": 30, "500": 31, "articl": 31, "ohl": [31, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56], "mattei": [31, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56], "bouveyron": [31, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56], "harchaoui": [31, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56], "w": [31, 33, 34, 35, 55, 56], "leclercq": [31, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56], "droit": [31, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56], "precioso": [31, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56], "2022": [31, 55, 56], "octob": [31, 55], "generalis": [31, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56], "advanc": [31, 55, 56], "process": [31, 55, 56], "system": [31, 55, 56], "multivari": [32, 54], "semi": 32, "definit": [32, 54, 56], "spread": 32, "epsilon": [33, 34, 35], "classic": [33, 39], "complet": [33, 55], "mathcal": [33, 34, 35], "mathbb": [33, 34, 35, 56], "_": [33, 34, 35, 56], "sim": [33, 34, 35, 56], "kl": 33, "precis": [33, 34, 35], "clip": [33, 34, 35], "avoid": [33, 34, 35], "numer": [33, 34, 35], "instabl": [33, 34, 35], "unus": 33, "return_grad": [33, 34, 35], "context": [33, 34, 35], "either": [33, 34, 35, 46, 47, 48, 49, 50, 52], "result": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56], "bool": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "nabla_": [33, 34, 35], "kernel_param": [34, 36, 40, 43, 47, 49, 52], "discrep": 34, "kappa": 34, "y_a": [34, 35], "y_b": [34, 35], "chi2": [34, 36, 40, 43, 47, 49, 52], "poli": [34, 36, 40, 43, 47, 49, 52], "polynomi": [34, 36, 40, 43, 47, 49, 52], "laplacian": [34, 36, 40, 43, 47, 49, 52], "dict": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "keyword": [34, 35, 36, 38, 40, 42, 43, 45, 47], "ignor": [34, 35], "callabl": [34, 35], "case": [34, 35, 58], "metric_param": [35, 38, 42, 45], "delta": [35, 51], "l1": [35, 38, 42, 45], "manhattan": [35, 38, 42, 45], "cityblock": [35, 38, 42, 45], "paired_dist": [35, 38, 42, 45], "form": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "neuron": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "epoch": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "singl": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54], "initi": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "rate": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "step": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "updat": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55], "sgd": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "stochast": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "kingma": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "diederik": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "jimmi": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "ba": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "batch": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54], "whole": [36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50], "messag": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "stdout": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "dictionari": [36, 38, 40, 42, 43, 45, 47], "chosen": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "linearmodel": [36, 38, 39, 54], "loui": [36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55], "pierr": [36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55], "alexandr": [36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55], "charl": [36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55], "warith": [36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55], "micka\u00ebl": [36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55], "arnaud": [36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55], "freder": [36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55], "7048160115136364": 36, "attribut": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "w_": [36, 37, 38, 39, 46, 47, 48], "b_": [36, 37, 38, 39, 46, 47, 48], "bias": [36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50], "optimiser_": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "adamoptim": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "sgdoptim": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "n_iter_": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "took": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "converg": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56], "present": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 58], "convent": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56], "estim": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "get_gemini": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "get_param": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "deep": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "subobject": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "param": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "name": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "membership": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "after": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "closest": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "seen": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "test": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54], "set_param": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "nest": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "pipelin": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "latter": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "__": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "str": [37, 41, 44, 48, 51], "mmd_ovo": [37, 41, 44, 48, 51], "wasserstein_ova": [37, 41, 44, 48, 51], "available_gemini": [37, 41, 44, 48, 51], "also": [37, 41, 44, 48, 51, 55], "7550724287639448": 37, "710399298634854": 38, "n_features_in": [38, 39], "maxim": [39, 46, 47, 48, 49, 50, 52], "ryan": 39, "gome": 39, "andrea": 39, "pietro": 39, "perona": 39, "43904857546947995": 39, "n_hidden_dim": [40, 41, 42, 49, 50], "mlpmodel": [40, 42, 54, 56], "7592155845461646": 40, "w1_": [40, 41, 42, 49, 50], "b1_": [40, 41, 42, 49, 50], "w2_": [40, 41, 42, 49, 50], "b2_": [40, 41, 42, 49, 50], "h_": [40, 41, 42, 49, 50], "6325592616409484": 41, "7636482655127903": 42, "directli": [43, 44, 45, 58], "x_i": [43, 44, 45], "ki": [43, 44, 45], "contrarili": [43, 44, 45], "part": [43, 44, 45], "doe": [43, 44, 45], "support": [43, 44, 45, 54, 55], "categoricalmodel": [43, 45, 54], "tailor": [43, 44, 45], "211726751861832": 43, "logits_": [43, 44, 45], "logit": [43, 44, 45, 51], "6577369504469952": 44, "3555482569532074": 45, "vanilla": [46, 48, 49, 50], "variat": [46, 48, 49, 50, 52], "bring": [46, 48, 49, 50, 56], "via": [46, 48], "proxim": [46, 48, 49, 50, 54], "repres": [46, 47, 48, 49, 50], "typic": [46, 47, 48, 49, 50], "scheme": [46, 47, 48, 49, 50], "sparselinearmodel": [46, 47, 54, 58], "joint": [46, 47, 48, 49, 50, 56, 58], "youyong": 46, "yue": 46, "deng": 46, "qionghai": 46, "dai": 46, "5812412917247887": 46, "retriev": [46, 47, 48, 49, 50], "ind": [46, 47, 48, 49, 50], "alpha_multipli": [46, 47, 48, 49, 50], "min_featur": [46, 47, 48, 49, 50], "restore_best_weight": [46, 47, 48, 49, 50], "early_stopping_factor": [46, 47, 48, 49, 50], "99": [46, 47, 48, 49, 50], "max_pati": [46, 47, 48, 49, 50], "unfold": [46, 47, 48, 49, 50], "geometr": [46, 47, 48, 49, 50], "amount": [46, 47, 48, 49, 50], "histori": [46, 47, 48, 49, 50], "kept": [46, 47, 48, 49, 50], "certain": [46, 47, 48, 49, 50], "percentag": [46, 47, 48, 49, 50], "reduct": [46, 47, 48, 49, 50], "made": [46, 47, 48, 49, 50, 58], "retrain": [46, 47, 48, 49, 50], "greater": [46, 47, 48, 49, 50], "stop": [46, 47, 48, 49, 50], "minim": [46, 47, 48, 49, 50], "deem": [46, 47, 48, 49, 50], "offer": [46, 47, 48, 49, 50], "good": [46, 47, 48, 49, 50, 56], "restor": [46, 47, 48, 49, 50], "beyond": [46, 47, 48, 49, 50], "upgrad": [46, 47, 48, 49, 50], "too": [46, 47, 48, 49, 50], "earli": [46, 47, 48, 49, 50], "wait": [46, 47, 48, 49, 50], "without": [46, 47, 48, 49, 50, 55, 56], "befor": [46, 47, 48, 49, 50], "sequenti": [46, 47, 48, 49, 50], "group_penalti": [46, 47, 48, 49, 50], "7040618744746618": 47, "when": [48, 50], "adapt": [48, 50], "_compute_gemini": [48, 50], "sparsemlpmodel": [48, 49, 54], "skip": [49, 50, 58], "connect": [49, 50, 58], "inspir": [49, 50, 56, 58], "lassonet": [49, 50, 56, 58], "lemhadri": [49, 50, 56], "2021": [49, 50, 56], "hierarchi": [49, 50], "coeffici": [49, 50], "rel": [49, 50, 51], "strength": [49, 50], "ruan": [49, 50, 56], "abraham": [49, 50, 56], "tibshirani": [49, 50, 56], "766421183641077": 49, "w_skip_": [49, 50], "basesparsegemini": 50, "templat": 50, "feature_mask": 51, "temperatur": 51, "dndt": 51, "leverag": 51, "appris": 51, "split": [51, 52], "learnabl": 51, "wise": 51, "soft": 51, "recombin": 51, "those": [51, 52], "cut": 51, "boolean": 51, "leaf": [51, 52], "high": 51, "smoothen": 51, "wherea": 51, "closer": 51, "dirac": [51, 52], "explor": [51, 52], "preciosio": [51, 52], "find_active_point": 51, "calcul": 51, "point": 51, "fall": 51, "within": 51, "bound": 51, "contribut": [51, 55], "active_point": 51, "integ": 51, "min_samples_split": 52, "min_samples_leaf": 52, "max_featur": 52, "max_leav": 52, "reward": 52, "ideal": 52, "new": [52, 54], "refurbish": 52, "them": 52, "alreadi": 52, "exist": 52, "leav": 52, "least": 52, "logic": 52, "randomli": 52, "upon": 52, "put": 52, "tree_": 52, "_tree": 52, "repeatedli": 52, "choos": 52, "reach": 52, "onc": 52, "special": [52, 55], "henc": [52, 56], "constant": 52, "kauri_tre": 53, "parametris": 54, "string": 54, "dedic": [54, 55], "fuse": [54, 58], "mmdova": 54, "mmdovo": 54, "mmdgemini": 54, "wassersteinova": 54, "wassersteinovo": 54, "fix": 54, "mistak": 54, "ad": [54, 58], "cart": 54, "experiment": 54, "minor": 54, "document": 54, "better": 54, "compat": [54, 55], "scikit": [54, 55, 56], "regard": 54, "check": [54, 55, 56], "abcmeta": 54, "valid": 54, "problem": 54, "retrocompat": 54, "1d": 54, "extern": 54, "usag": [54, 58], "etc": 54, "spar": 54, "multivariate_student_t": 54, "divis": 54, "thank": 55, "realli": 55, "pleasur": 55, "theori": [55, 56], "user": [55, 56], "tool": 55, "http": 55, "io": 55, "main": 55, "com": 55, "instruct": 55, "pip": 55, "librari": [55, 58], "coupl": 55, "scientif": 55, "pot": 55, "repo": 55, "git": 55, "clone": 55, "cd": 55, "cite": 55, "neurip": 55, "inproceed": 55, "ohl2022generalis": 55, "author": 55, "micka": 55, "booktitl": 55, "editor": 55, "alic": 55, "h": [55, 56], "oh": [55, 56], "alekh": 55, "agarw": [55, 56], "daniel": 55, "belgrav": [55, 56], "kyunghyun": 55, "cho": [55, 56], "year": 55, "url": 55, "openreview": 55, "net": 55, "forum": 55, "id": 55, "0oy3pia": 55, "adp": 55, "been": 55, "french": 55, "govern": 55, "3ia": 55, "c\u00f4te": 55, "azur": 55, "invest": 55, "futur": 55, "project": 55, "manag": 55, "nation": 55, "research": [55, 56], "agenc": 55, "anr": 55, "p3ia": 55, "0002": 55, "franc": 55, "canada": 55, "fund": 55, "ffcr": 55, "partli": 55, "eu": 55, "horizon": 55, "2020": 55, "ai4media": 55, "contract": 55, "951911": 55, "jhonatan": 55, "torr": 55, "hi": 55, "insight": 55, "develop": 55, "short": 56, "descript": 56, "hint": 56, "about": 56, "detail": 56, "public": 56, "stand": 56, "novel": 56, "measur": 56, "custer": 56, "right": 56, "y_1": 56, "y_2": 56, "theorem": 56, "easili": 56, "tractabl": 56, "cane": 56, "valuat": 56, "assumpt": 56, "At": 56, "moment": 56, "report": 56, "fewer": 56, "practic": 56, "merg": 56, "loss": 56, "mainli": 56, "feel": 56, "interest": 56, "ed": 56, "machin": 56, "127": 56, "29": 56, "doi": 56, "48550": 56, "arxiv": 56, "2302": 56, "03391": 56, "07": 57, "695": 57, "16": 57, "mode": 58, "constructor": 58, "achiev": 58, "manner": 58, "pairwise_kernel": 58, "forc": 58, "flexibl": 58, "yet": 58, "express": 58, "enough": 58, "term": 58, "simpler": 58, "induc": 58, "rewrit": 58, "includ": 58}, "objects": {"gemclus": [[27, 0, 1, "", "add_mlcl_constraint"]], "gemclus.data": [[28, 0, 1, "", "celeux_one"], [29, 0, 1, "", "celeux_two"], [30, 0, 1, "", "draw_gmm"], [31, 0, 1, "", "gstm"], [32, 0, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[33, 1, 1, "", "MI"], [34, 1, 1, "", "MMDGEMINI"], [35, 1, 1, "", "WassersteinGEMINI"]], "gemclus.gemini.MI": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "compute_affinity"], [33, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDGEMINI": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "compute_affinity"], [34, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinGEMINI": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "compute_affinity"], [35, 2, 1, "", "evaluate"]], "gemclus.linear": [[36, 1, 1, "", "LinearMMD"], [37, 1, 1, "", "LinearModel"], [38, 1, 1, "", "LinearWasserstein"], [39, 1, 1, "", "RIM"]], "gemclus.linear.LinearMMD": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "fit"], [36, 2, 1, "", "fit_predict"], [36, 2, 1, "", "get_gemini"], [36, 2, 1, "", "get_params"], [36, 2, 1, "", "predict"], [36, 2, 1, "", "predict_proba"], [36, 2, 1, "", "score"], [36, 2, 1, "", "set_params"]], "gemclus.linear.LinearModel": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "fit"], [37, 2, 1, "", "fit_predict"], [37, 2, 1, "", "get_gemini"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "predict"], [37, 2, 1, "", "predict_proba"], [37, 2, 1, "", "score"], [37, 2, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "fit"], [38, 2, 1, "", "fit_predict"], [38, 2, 1, "", "get_gemini"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "predict_proba"], [38, 2, 1, "", "score"], [38, 2, 1, "", "set_params"]], "gemclus.linear.RIM": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "fit"], [39, 2, 1, "", "fit_predict"], [39, 2, 1, "", "get_gemini"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "predict"], [39, 2, 1, "", "predict_proba"], [39, 2, 1, "", "score"], [39, 2, 1, "", "set_params"]], "gemclus.mlp": [[40, 1, 1, "", "MLPMMD"], [41, 1, 1, "", "MLPModel"], [42, 1, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "fit"], [40, 2, 1, "", "fit_predict"], [40, 2, 1, "", "get_gemini"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "predict"], [40, 2, 1, "", "predict_proba"], [40, 2, 1, "", "score"], [40, 2, 1, "", "set_params"]], "gemclus.mlp.MLPModel": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "fit_predict"], [41, 2, 1, "", "get_gemini"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "predict"], [41, 2, 1, "", "predict_proba"], [41, 2, 1, "", "score"], [41, 2, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "fit_predict"], [42, 2, 1, "", "get_gemini"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "predict"], [42, 2, 1, "", "predict_proba"], [42, 2, 1, "", "score"], [42, 2, 1, "", "set_params"]], "gemclus.nonparametric": [[43, 1, 1, "", "CategoricalMMD"], [44, 1, 1, "", "CategoricalModel"], [45, 1, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "fit_predict"], [43, 2, 1, "", "get_gemini"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "predict"], [43, 2, 1, "", "predict_proba"], [43, 2, 1, "", "score"], [43, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalModel": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "fit_predict"], [44, 2, 1, "", "get_gemini"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "predict_proba"], [44, 2, 1, "", "score"], [44, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "fit_predict"], [45, 2, 1, "", "get_gemini"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "predict"], [45, 2, 1, "", "predict_proba"], [45, 2, 1, "", "score"], [45, 2, 1, "", "set_params"]], "gemclus.sparse": [[46, 1, 1, "", "SparseLinearMI"], [47, 1, 1, "", "SparseLinearMMD"], [48, 1, 1, "", "SparseLinearModel"], [49, 1, 1, "", "SparseMLPMMD"], [50, 1, 1, "", "SparseMLPModel"]], "gemclus.sparse.SparseLinearMI": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "fit_predict"], [46, 2, 1, "", "get_gemini"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "get_selection"], [46, 2, 1, "", "path"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "predict_proba"], [46, 2, 1, "", "score"], [46, 2, 1, "", "set_params"]], "gemclus.sparse.SparseLinearMMD": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "fit_predict"], [47, 2, 1, "", "get_gemini"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "get_selection"], [47, 2, 1, "", "path"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "predict_proba"], [47, 2, 1, "", "score"], [47, 2, 1, "", "set_params"]], "gemclus.sparse.SparseLinearModel": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "fit_predict"], [48, 2, 1, "", "get_gemini"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "get_selection"], [48, 2, 1, "", "path"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "predict_proba"], [48, 2, 1, "", "score"], [48, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "fit_predict"], [49, 2, 1, "", "get_gemini"], [49, 2, 1, "", "get_params"], [49, 2, 1, "", "get_selection"], [49, 2, 1, "", "path"], [49, 2, 1, "", "predict"], [49, 2, 1, "", "predict_proba"], [49, 2, 1, "", "score"], [49, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPModel": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "fit_predict"], [50, 2, 1, "", "get_gemini"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "get_selection"], [50, 2, 1, "", "path"], [50, 2, 1, "", "predict"], [50, 2, 1, "", "predict_proba"], [50, 2, 1, "", "score"], [50, 2, 1, "", "set_params"]], "gemclus.tree": [[51, 1, 1, "", "Douglas"], [52, 1, 1, "", "Kauri"], [53, 0, 1, "", "print_kauri_tree"]], "gemclus.tree.Douglas": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "find_active_points"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "fit_predict"], [51, 2, 1, "", "get_gemini"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "predict_proba"], [51, 2, 1, "", "score"], [51, 2, 1, "", "set_params"]], "gemclus.tree.Kauri": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "fit_predict"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "score"], [52, 2, 1, "", "set_params"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"gemclu": [0, 12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56], "api": 0, "score": [0, 7, 19, 20], "gemini": [0, 7, 15, 19, 20, 33, 34, 35, 55, 56, 58], "cluster": [0, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 55, 56], "model": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25], "dens": 0, "nonparametr": [0, 13, 43, 44, 45], "spars": [0, 2, 3, 4, 46, 47, 48, 49, 50], "tree": [0, 7, 23, 24, 25, 51, 52, 53], "constraint": [0, 9], "dataset": [0, 2, 3, 4, 5, 9, 11, 18, 20, 24, 25], "gener": [0, 7, 14, 15, 16], "featur": [1, 2, 3, 4, 5, 7, 56], "select": [1, 2, 3, 4, 5, 7, 56], "us": [2, 3, 4, 25, 55], "mmd": [2, 4, 15], "ovo": 2, "logist": [2, 3, 18], "regress": [2, 3, 18], "load": [2, 3, 4, 5, 9, 18, 20, 24, 25], "simpl": [2, 3, 4, 5, 18, 20], "synthet": [2, 3, 4, 5, 18], "train": [2, 3, 4, 5, 11, 13, 14, 16, 17, 18, 20], "path": [2, 4, 5], "result": [2, 4, 5, 9, 12], "final": [2, 3, 4, 13, 14, 15, 16, 17, 18], "linear": [3, 5, 25, 36, 37, 38, 39], "mi": [3, 33], "ova": 4, "mlp": [4, 15, 40, 41, 42], "group": 5, "comput": [6, 10, 13, 16, 21, 22, 26, 57], "time": [6, 10, 21, 22, 26, 57], "exampl": [7, 14, 15, 58], "discrimin": [7, 12, 55, 56, 58], "consensu": [7, 8, 9], "link": 9, "sampl": [9, 11, 13, 16, 17], "pair": 9, "multipl": 9, "build": [9, 12, 24, 25], "matrix": 9, "creat": [9, 12, 13, 15, 24, 25], "optimis": 9, "add": 9, "must": 9, "cannot": 9, "plot": [9, 12, 15], "compar": 11, "circl": 11, "kernel": [11, 25], "chang": [11, 54], "draw": [11, 13, 16, 17], "displai": 11, "predict": 11, "decis": [11, 14, 16], "boundari": [11, 14, 16], "extend": 12, "your": 12, "own": 12, "custom": 12, "test": 12, "fit": [12, 15, 24], "procedur": 12, "graph": 13, "node": 13, "from": [13, 17], "gmm": [13, 17], "edg": 13, "pre": [13, 16], "specif": [13, 16], "metric": [13, 16], "between": [13, 16], "map": 14, "mixtur": 14, "gaussian": 14, "low": 14, "degre": 14, "student": 14, "distribut": [14, 58], "data": [14, 15, 28, 29, 30, 31, 32], "an": [15, 25], "introduc": 15, "two": [16, 20], "interlac": 16, "moon": 16, "non": 17, "parametr": 17, "rim": [18, 39], "ani": 20, "real": 20, "supervis": 20, "differenti": 24, "unsupervis": [24, 25], "dougla": [24, 51], "kmean": 25, "object": 25, "kauri": [25, 52], "first": 25, "second": 25, "addit": 25, "chi2": 25, "evalu": 25, "perform": 25, "visualis": 25, "structur": 25, "add_mlcl_constraint": 27, "celeux_on": 28, "celeux_two": 29, "draw_gmm": 30, "gstm": 31, "multivariate_student_t": 32, "mmdgemini": 34, "wassersteingemini": 35, "linearmmd": 36, "linearmodel": 37, "linearwasserstein": 38, "mlpmmd": 40, "mlpmodel": 41, "mlpwasserstein": 42, "categoricalmmd": 43, "categoricalmodel": 44, "categoricalwasserstein": 45, "sparselinearmi": 46, "sparselinearmmd": 47, "sparselinearmodel": 48, "sparsemlpmmd": 49, "sparsemlpmodel": 50, "print_kauri_tre": 53, "releas": 54, "histori": 54, "In": 54, "develop": 54, "0": 54, "2": 54, "latest": [54, 55], "1": 54, "welcom": 55, "document": 55, "content": [55, 58], "A": 55, "packag": [55, 58], "instal": 55, "offici": 55, "version": 55, "refer": [55, 56], "acknowledg": 55, "quick": 56, "start": 56, "what": [56, 58], "i": 56, "do": 56, "user": 58, "guid": 58, "which": 58, "ar": 58, "implement": 58, "avail": 58, "basic": 58}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"GEMCLUS API": [[0, "gemclus-api"]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [7, "scoring-with-gemini"], [19, "scoring-with-gemini"], [20, "scoring-with-gemini"]], "Clustering models": [[0, "clustering-models"]], "Dense models": [[0, "dense-models"]], "Nonparametric models": [[0, "nonparametric-models"]], "Sparse models": [[0, "sparse-models"]], "Tree models": [[0, "tree-models"]], "Constraints": [[0, "constraints"]], "Dataset generation": [[0, "dataset-generation"]], "Feature selection": [[1, "feature-selection"], [7, "feature-selection"]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[2, "feature-selection-using-the-sparse-mmd-ovo-logistic-regression"]], "Load a simple synthetic dataset": [[2, "load-a-simple-synthetic-dataset"], [3, "load-a-simple-synthetic-dataset"], [4, "load-a-simple-synthetic-dataset"], [5, "load-a-simple-synthetic-dataset"], [18, "load-a-simple-synthetic-dataset"]], "Train the model": [[2, "train-the-model"], [3, "train-the-model"], [4, "train-the-model"], [5, "train-the-model"], [13, "train-the-model"], [16, "train-the-model"], [17, "train-the-model"], [18, "train-the-model"]], "Path results": [[2, "path-results"], [4, "path-results"], [5, "path-results"]], "Final Clustering": [[2, "final-clustering"], [3, "final-clustering"], [4, "final-clustering"], [13, "final-clustering"], [14, "final-clustering"], [16, "final-clustering"], [17, "final-clustering"], [18, "final-clustering"]], "Feature selection using the Sparse Linear MI (Logistic regression)": [[3, "feature-selection-using-the-sparse-linear-mi-logistic-regression"]], "Feature selection using the Sparse MMD OvA (MLP)": [[4, "feature-selection-using-the-sparse-mmd-ova-mlp"]], "Grouped Feature selection with a linear model": [[5, "grouped-feature-selection-with-a-linear-model"]], "Computation times": [[6, "computation-times"], [10, "computation-times"], [21, "computation-times"], [22, "computation-times"], [26, "computation-times"], [57, "computation-times"]], "General examples": [[7, "general-examples"]], "Discriminative clustering": [[7, "discriminative-clustering"]], "Consensus clustering": [[7, "consensus-clustering"], [8, "consensus-clustering"]], "Trees": [[7, "trees"], [23, "trees"]], "Consensus clustering with linking constraints on sample pairs": [[9, "consensus-clustering-with-linking-constraints-on-sample-pairs"]], "Load the dataset": [[9, "load-the-dataset"], [24, "load-the-dataset"], [25, "load-the-dataset"]], "Multiple model clustering": [[9, "multiple-model-clustering"]], "Build the consensus matrix": [[9, "build-the-consensus-matrix"]], "Create the consensus clustering model": [[9, "create-the-consensus-clustering-model"]], "Optimise the results with linking constraints": [[9, "optimise-the-results-with-linking-constraints"]], "Add must-link / cannot-link constraint": [[9, "add-must-link-cannot-link-constraint"]], "Plotting the consensus matrix": [[9, "plotting-the-consensus-matrix"]], "Comparative clustering of circles dataset with kernel change": [[11, "comparative-clustering-of-circles-dataset-with-kernel-change"]], "Draw samples for the circle dataset": [[11, "draw-samples-for-the-circle-dataset"]], "Training clustering models": [[11, "training-clustering-models"]], "Display predictions and decision boundaries": [[11, "display-predictions-and-decision-boundaries"]], "Extending GemClus to build your own discriminative clustering model": [[12, "extending-gemclus-to-build-your-own-discriminative-clustering-model"]], "Create the custom model": [[12, "create-the-custom-model"]], "Test the fitting procedure and plot the clustering results": [[12, "test-the-fitting-procedure-and-plot-the-clustering-results"]], "Graph node clustering with a nonparametric model": [[13, "graph-node-clustering-with-a-nonparametric-model"]], "Draw samples from a GMM": [[13, "draw-samples-from-a-gmm"], [17, "draw-samples-from-a-gmm"]], "Create the graph edges": [[13, "create-the-graph-edges"]], "Pre-compute a specific metric between samples": [[13, "pre-compute-a-specific-metric-between-samples"], [16, "pre-compute-a-specific-metric-between-samples"]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[14, "example-of-decision-boundary-map-for-a-mixture-of-gaussian-and-low-degree-student-distributions"]], "Generate the data": [[14, "generate-the-data"]], "Train the model for clustering": [[14, "train-the-model-for-clustering"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[15, "an-introducing-example-to-clustering-with-an-mlp-and-the-mmd-gemini"]], "Generate data": [[15, "generate-data"]], "Create the MLP clustering model and fit it": [[15, "create-the-mlp-clustering-model-and-fit-it"]], "Plot the final clustering": [[15, "plot-the-final-clustering"]], "Drawing a decision boundary between two interlacing moons": [[16, "drawing-a-decision-boundary-between-two-interlacing-moons"]], "Generate two interlacing moons": [[16, "generate-two-interlacing-moons"]], "Non parametric clustering": [[17, "non-parametric-clustering"]], "Simple logistic regression with RIM": [[18, "simple-logistic-regression-with-rim"]], "Scoring any model with GEMINI": [[20, "scoring-any-model-with-gemini"]], "Load a simple real dataset": [[20, "load-a-simple-real-dataset"]], "Train two supervised models": [[20, "train-two-supervised-models"]], "Supervised Scoring with GEMINI": [[20, "supervised-scoring-with-gemini"]], "Building a differentiable unsupervised tree: DOUGLAS": [[24, "building-a-differentiable-unsupervised-tree-douglas"]], "Create the douglas tree and fit it": [[24, "create-the-douglas-tree-and-fit-it"]], "Building an unsupervised tree with kernel-kmeans objective: KAURI": [[25, "building-an-unsupervised-tree-with-kernel-kmeans-objective-kauri"]], "Create a first tree using a linear kernel": [[25, "create-a-first-tree-using-a-linear-kernel"]], "Create a second tree using an additive chi2 kernel": [[25, "create-a-second-tree-using-an-additive-chi2-kernel"]], "Evaluate the performances of the model": [[25, "evaluate-the-performances-of-the-model"]], "Visualise the tree structure": [[25, "visualise-the-tree-structure"]], "gemclus.add_mlcl_constraint": [[27, "gemclus-add-mlcl-constraint"]], "gemclus.data.celeux_one": [[28, "gemclus-data-celeux-one"]], "gemclus.data.celeux_two": [[29, "gemclus-data-celeux-two"]], "gemclus.data.draw_gmm": [[30, "gemclus-data-draw-gmm"]], "gemclus.data.gstm": [[31, "gemclus-data-gstm"]], "gemclus.data.multivariate_student_t": [[32, "gemclus-data-multivariate-student-t"]], "gemclus.gemini.MI": [[33, "gemclus-gemini-mi"]], "gemclus.gemini.MMDGEMINI": [[34, "gemclus-gemini-mmdgemini"]], "gemclus.gemini.WassersteinGEMINI": [[35, "gemclus-gemini-wassersteingemini"]], "gemclus.linear.LinearMMD": [[36, "gemclus-linear-linearmmd"]], "gemclus.linear.LinearModel": [[37, "gemclus-linear-linearmodel"]], "gemclus.linear.LinearWasserstein": [[38, "gemclus-linear-linearwasserstein"]], "gemclus.linear.RIM": [[39, "gemclus-linear-rim"]], "gemclus.mlp.MLPMMD": [[40, "gemclus-mlp-mlpmmd"]], "gemclus.mlp.MLPModel": [[41, "gemclus-mlp-mlpmodel"]], "gemclus.mlp.MLPWasserstein": [[42, "gemclus-mlp-mlpwasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[43, "gemclus-nonparametric-categoricalmmd"]], "gemclus.nonparametric.CategoricalModel": [[44, "gemclus-nonparametric-categoricalmodel"]], "gemclus.nonparametric.CategoricalWasserstein": [[45, "gemclus-nonparametric-categoricalwasserstein"]], "gemclus.sparse.SparseLinearMI": [[46, "gemclus-sparse-sparselinearmi"]], "gemclus.sparse.SparseLinearMMD": [[47, "gemclus-sparse-sparselinearmmd"]], "gemclus.sparse.SparseLinearModel": [[48, "gemclus-sparse-sparselinearmodel"]], "gemclus.sparse.SparseMLPMMD": [[49, "gemclus-sparse-sparsemlpmmd"]], "gemclus.sparse.SparseMLPModel": [[50, "gemclus-sparse-sparsemlpmodel"]], "gemclus.tree.Douglas": [[51, "gemclus-tree-douglas"]], "gemclus.tree.Kauri": [[52, "gemclus-tree-kauri"]], "gemclus.tree.print_kauri_tree": [[53, "gemclus-tree-print-kauri-tree"]], "RELEASES": [[54, "releases"]], "History of changes": [[54, "history-of-changes"]], "In development": [[54, "in-development"]], "0.2.0 (Latest)": [[54, "latest"]], "0.1.1": [[54, "id1"]], "0.1.0": [[54, "id2"]], "0.0.2": [[54, "id3"]], "Welcome to GemClus documentation!": [[55, "welcome-to-gemclus-documentation"]], "Contents": [[55, "contents"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[55, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "Installation": [[55, "installation"]], "Official package": [[55, "official-package"]], "Latest version": [[55, "latest-version"]], "Reference": [[55, "reference"]], "Acknowledgements": [[55, "acknowledgements"]], "Quick start on gemclus": [[56, "quick-start-on-gemclus"]], "What is GEMINI": [[56, "what-is-gemini"]], "Doing discriminative clustering": [[56, "doing-discriminative-clustering"]], "Selecting features in clustering": [[56, "selecting-features-in-clustering"]], "References": [[56, "references"]], "User Guide": [[58, "user-guide"]], "Content of the package": [[58, "content-of-the-package"]], "Which GEMINIs are implemented": [[58, "which-geminis-are-implemented"]], "What discriminative distributions are available": [[58, "what-discriminative-distributions-are-available"]], "Basic examples": [[58, "basic-examples"]]}, "indexentries": {"add_mlcl_constraint() (in module gemclus)": [[27, "gemclus.add_mlcl_constraint"]], "celeux_one() (in module gemclus.data)": [[28, "gemclus.data.celeux_one"]], "celeux_two() (in module gemclus.data)": [[29, "gemclus.data.celeux_two"]], "draw_gmm() (in module gemclus.data)": [[30, "gemclus.data.draw_gmm"]], "gstm() (in module gemclus.data)": [[31, "gemclus.data.gstm"]], "multivariate_student_t() (in module gemclus.data)": [[32, "gemclus.data.multivariate_student_t"]], "mi (class in gemclus.gemini)": [[33, "gemclus.gemini.MI"]], "__init__() (gemclus.gemini.mi method)": [[33, "gemclus.gemini.MI.__init__"]], "compute_affinity() (gemclus.gemini.mi method)": [[33, "gemclus.gemini.MI.compute_affinity"]], "evaluate() (gemclus.gemini.mi method)": [[33, "gemclus.gemini.MI.evaluate"]], "mmdgemini (class in gemclus.gemini)": [[34, "gemclus.gemini.MMDGEMINI"]], "__init__() (gemclus.gemini.mmdgemini method)": [[34, "gemclus.gemini.MMDGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.mmdgemini method)": [[34, "gemclus.gemini.MMDGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.mmdgemini method)": [[34, "gemclus.gemini.MMDGEMINI.evaluate"]], "wassersteingemini (class in gemclus.gemini)": [[35, "gemclus.gemini.WassersteinGEMINI"]], "__init__() (gemclus.gemini.wassersteingemini method)": [[35, "gemclus.gemini.WassersteinGEMINI.__init__"]], "compute_affinity() (gemclus.gemini.wassersteingemini method)": [[35, "gemclus.gemini.WassersteinGEMINI.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteingemini method)": [[35, "gemclus.gemini.WassersteinGEMINI.evaluate"]], "linearmmd (class in gemclus.linear)": [[36, "gemclus.linear.LinearMMD"]], "__init__() (gemclus.linear.linearmmd method)": [[36, "gemclus.linear.LinearMMD.__init__"]], "fit() (gemclus.linear.linearmmd method)": [[36, "gemclus.linear.LinearMMD.fit"]], "fit_predict() (gemclus.linear.linearmmd method)": [[36, "gemclus.linear.LinearMMD.fit_predict"]], "get_gemini() (gemclus.linear.linearmmd method)": [[36, "gemclus.linear.LinearMMD.get_gemini"]], "get_params() (gemclus.linear.linearmmd method)": [[36, "gemclus.linear.LinearMMD.get_params"]], "predict() (gemclus.linear.linearmmd method)": [[36, "gemclus.linear.LinearMMD.predict"]], "predict_proba() (gemclus.linear.linearmmd method)": [[36, "gemclus.linear.LinearMMD.predict_proba"]], "score() (gemclus.linear.linearmmd method)": [[36, "gemclus.linear.LinearMMD.score"]], "set_params() (gemclus.linear.linearmmd method)": [[36, "gemclus.linear.LinearMMD.set_params"]], "linearmodel (class in gemclus.linear)": [[37, "gemclus.linear.LinearModel"]], "__init__() (gemclus.linear.linearmodel method)": [[37, "gemclus.linear.LinearModel.__init__"]], "fit() (gemclus.linear.linearmodel method)": [[37, "gemclus.linear.LinearModel.fit"]], "fit_predict() (gemclus.linear.linearmodel method)": [[37, "gemclus.linear.LinearModel.fit_predict"]], "get_gemini() (gemclus.linear.linearmodel method)": [[37, "gemclus.linear.LinearModel.get_gemini"]], "get_params() (gemclus.linear.linearmodel method)": [[37, "gemclus.linear.LinearModel.get_params"]], "predict() (gemclus.linear.linearmodel method)": [[37, "gemclus.linear.LinearModel.predict"]], "predict_proba() (gemclus.linear.linearmodel method)": [[37, "gemclus.linear.LinearModel.predict_proba"]], "score() (gemclus.linear.linearmodel method)": [[37, "gemclus.linear.LinearModel.score"]], "set_params() (gemclus.linear.linearmodel method)": [[37, "gemclus.linear.LinearModel.set_params"]], "linearwasserstein (class in gemclus.linear)": [[38, "gemclus.linear.LinearWasserstein"]], "__init__() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.__init__"]], "fit() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.fit"]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.fit_predict"]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.get_gemini"]], "get_params() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.get_params"]], "predict() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.predict"]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.predict_proba"]], "score() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.score"]], "set_params() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.set_params"]], "rim (class in gemclus.linear)": [[39, "gemclus.linear.RIM"]], "__init__() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.__init__"]], "fit() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.fit"]], "fit_predict() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.fit_predict"]], "get_gemini() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.get_gemini"]], "get_params() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.get_params"]], "predict() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.predict"]], "predict_proba() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.predict_proba"]], "score() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.score"]], "set_params() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.set_params"]], "mlpmmd (class in gemclus.mlp)": [[40, "gemclus.mlp.MLPMMD"]], "__init__() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.__init__"]], "fit() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.fit"]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.get_gemini"]], "get_params() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.get_params"]], "predict() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.predict"]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.predict_proba"]], "score() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.score"]], "set_params() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.set_params"]], "mlpmodel (class in gemclus.mlp)": [[41, "gemclus.mlp.MLPModel"]], "__init__() (gemclus.mlp.mlpmodel method)": [[41, "gemclus.mlp.MLPModel.__init__"]], "fit() (gemclus.mlp.mlpmodel method)": [[41, "gemclus.mlp.MLPModel.fit"]], "fit_predict() (gemclus.mlp.mlpmodel method)": [[41, "gemclus.mlp.MLPModel.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmodel method)": [[41, "gemclus.mlp.MLPModel.get_gemini"]], "get_params() (gemclus.mlp.mlpmodel method)": [[41, "gemclus.mlp.MLPModel.get_params"]], "predict() (gemclus.mlp.mlpmodel method)": [[41, "gemclus.mlp.MLPModel.predict"]], "predict_proba() (gemclus.mlp.mlpmodel method)": [[41, "gemclus.mlp.MLPModel.predict_proba"]], "score() (gemclus.mlp.mlpmodel method)": [[41, "gemclus.mlp.MLPModel.score"]], "set_params() (gemclus.mlp.mlpmodel method)": [[41, "gemclus.mlp.MLPModel.set_params"]], "mlpwasserstein (class in gemclus.mlp)": [[42, "gemclus.mlp.MLPWasserstein"]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.__init__"]], "fit() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.fit"]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.fit_predict"]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.get_gemini"]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.get_params"]], "predict() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.predict"]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.predict_proba"]], "score() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.score"]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[42, "gemclus.mlp.MLPWasserstein.set_params"]], "categoricalmmd (class in gemclus.nonparametric)": [[43, "gemclus.nonparametric.CategoricalMMD"]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.__init__"]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.get_params"]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.predict_proba"]], "score() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.score"]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[43, "gemclus.nonparametric.CategoricalMMD.set_params"]], "categoricalmodel (class in gemclus.nonparametric)": [[44, "gemclus.nonparametric.CategoricalModel"]], "__init__() (gemclus.nonparametric.categoricalmodel method)": [[44, "gemclus.nonparametric.CategoricalModel.__init__"]], "fit() (gemclus.nonparametric.categoricalmodel method)": [[44, "gemclus.nonparametric.CategoricalModel.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmodel method)": [[44, "gemclus.nonparametric.CategoricalModel.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmodel method)": [[44, "gemclus.nonparametric.CategoricalModel.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmodel method)": [[44, "gemclus.nonparametric.CategoricalModel.get_params"]], "predict() (gemclus.nonparametric.categoricalmodel method)": [[44, "gemclus.nonparametric.CategoricalModel.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmodel method)": [[44, "gemclus.nonparametric.CategoricalModel.predict_proba"]], "score() (gemclus.nonparametric.categoricalmodel method)": [[44, "gemclus.nonparametric.CategoricalModel.score"]], "set_params() (gemclus.nonparametric.categoricalmodel method)": [[44, "gemclus.nonparametric.CategoricalModel.set_params"]], "categoricalwasserstein (class in gemclus.nonparametric)": [[45, "gemclus.nonparametric.CategoricalWasserstein"]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[45, "gemclus.nonparametric.CategoricalWasserstein.__init__"]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[45, "gemclus.nonparametric.CategoricalWasserstein.fit"]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[45, "gemclus.nonparametric.CategoricalWasserstein.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[45, "gemclus.nonparametric.CategoricalWasserstein.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[45, "gemclus.nonparametric.CategoricalWasserstein.get_params"]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[45, "gemclus.nonparametric.CategoricalWasserstein.predict"]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[45, "gemclus.nonparametric.CategoricalWasserstein.predict_proba"]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[45, "gemclus.nonparametric.CategoricalWasserstein.score"]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[45, "gemclus.nonparametric.CategoricalWasserstein.set_params"]], "sparselinearmi (class in gemclus.sparse)": [[46, "gemclus.sparse.SparseLinearMI"]], "__init__() (gemclus.sparse.sparselinearmi method)": [[46, "gemclus.sparse.SparseLinearMI.__init__"]], "fit() (gemclus.sparse.sparselinearmi method)": [[46, "gemclus.sparse.SparseLinearMI.fit"]], "fit_predict() (gemclus.sparse.sparselinearmi method)": [[46, "gemclus.sparse.SparseLinearMI.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmi method)": [[46, "gemclus.sparse.SparseLinearMI.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmi method)": [[46, "gemclus.sparse.SparseLinearMI.get_params"]], "get_selection() (gemclus.sparse.sparselinearmi method)": [[46, "gemclus.sparse.SparseLinearMI.get_selection"]], "path() (gemclus.sparse.sparselinearmi method)": [[46, "gemclus.sparse.SparseLinearMI.path"]], "predict() (gemclus.sparse.sparselinearmi method)": [[46, "gemclus.sparse.SparseLinearMI.predict"]], "predict_proba() (gemclus.sparse.sparselinearmi method)": [[46, "gemclus.sparse.SparseLinearMI.predict_proba"]], "score() (gemclus.sparse.sparselinearmi method)": [[46, "gemclus.sparse.SparseLinearMI.score"]], "set_params() (gemclus.sparse.sparselinearmi method)": [[46, "gemclus.sparse.SparseLinearMI.set_params"]], "sparselinearmmd (class in gemclus.sparse)": [[47, "gemclus.sparse.SparseLinearMMD"]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[47, "gemclus.sparse.SparseLinearMMD.__init__"]], "fit() (gemclus.sparse.sparselinearmmd method)": [[47, "gemclus.sparse.SparseLinearMMD.fit"]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[47, "gemclus.sparse.SparseLinearMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[47, "gemclus.sparse.SparseLinearMMD.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[47, "gemclus.sparse.SparseLinearMMD.get_params"]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[47, "gemclus.sparse.SparseLinearMMD.get_selection"]], "path() (gemclus.sparse.sparselinearmmd method)": [[47, "gemclus.sparse.SparseLinearMMD.path"]], "predict() (gemclus.sparse.sparselinearmmd method)": [[47, "gemclus.sparse.SparseLinearMMD.predict"]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[47, "gemclus.sparse.SparseLinearMMD.predict_proba"]], "score() (gemclus.sparse.sparselinearmmd method)": [[47, "gemclus.sparse.SparseLinearMMD.score"]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[47, "gemclus.sparse.SparseLinearMMD.set_params"]], "sparselinearmodel (class in gemclus.sparse)": [[48, "gemclus.sparse.SparseLinearModel"]], "__init__() (gemclus.sparse.sparselinearmodel method)": [[48, "gemclus.sparse.SparseLinearModel.__init__"]], "fit() (gemclus.sparse.sparselinearmodel method)": [[48, "gemclus.sparse.SparseLinearModel.fit"]], "fit_predict() (gemclus.sparse.sparselinearmodel method)": [[48, "gemclus.sparse.SparseLinearModel.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmodel method)": [[48, "gemclus.sparse.SparseLinearModel.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmodel method)": [[48, "gemclus.sparse.SparseLinearModel.get_params"]], "get_selection() (gemclus.sparse.sparselinearmodel method)": [[48, "gemclus.sparse.SparseLinearModel.get_selection"]], "path() (gemclus.sparse.sparselinearmodel method)": [[48, "gemclus.sparse.SparseLinearModel.path"]], "predict() (gemclus.sparse.sparselinearmodel method)": [[48, "gemclus.sparse.SparseLinearModel.predict"]], "predict_proba() (gemclus.sparse.sparselinearmodel method)": [[48, "gemclus.sparse.SparseLinearModel.predict_proba"]], "score() (gemclus.sparse.sparselinearmodel method)": [[48, "gemclus.sparse.SparseLinearModel.score"]], "set_params() (gemclus.sparse.sparselinearmodel method)": [[48, "gemclus.sparse.SparseLinearModel.set_params"]], "sparsemlpmmd (class in gemclus.sparse)": [[49, "gemclus.sparse.SparseMLPMMD"]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[49, "gemclus.sparse.SparseMLPMMD.__init__"]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[49, "gemclus.sparse.SparseMLPMMD.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[49, "gemclus.sparse.SparseMLPMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[49, "gemclus.sparse.SparseMLPMMD.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[49, "gemclus.sparse.SparseMLPMMD.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[49, "gemclus.sparse.SparseMLPMMD.get_selection"]], "path() (gemclus.sparse.sparsemlpmmd method)": [[49, "gemclus.sparse.SparseMLPMMD.path"]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[49, "gemclus.sparse.SparseMLPMMD.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[49, "gemclus.sparse.SparseMLPMMD.predict_proba"]], "score() (gemclus.sparse.sparsemlpmmd method)": [[49, "gemclus.sparse.SparseMLPMMD.score"]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[49, "gemclus.sparse.SparseMLPMMD.set_params"]], "sparsemlpmodel (class in gemclus.sparse)": [[50, "gemclus.sparse.SparseMLPModel"]], "__init__() (gemclus.sparse.sparsemlpmodel method)": [[50, "gemclus.sparse.SparseMLPModel.__init__"]], "fit() (gemclus.sparse.sparsemlpmodel method)": [[50, "gemclus.sparse.SparseMLPModel.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmodel method)": [[50, "gemclus.sparse.SparseMLPModel.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmodel method)": [[50, "gemclus.sparse.SparseMLPModel.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmodel method)": [[50, "gemclus.sparse.SparseMLPModel.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmodel method)": [[50, "gemclus.sparse.SparseMLPModel.get_selection"]], "path() (gemclus.sparse.sparsemlpmodel method)": [[50, "gemclus.sparse.SparseMLPModel.path"]], "predict() (gemclus.sparse.sparsemlpmodel method)": [[50, "gemclus.sparse.SparseMLPModel.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmodel method)": [[50, "gemclus.sparse.SparseMLPModel.predict_proba"]], "score() (gemclus.sparse.sparsemlpmodel method)": [[50, "gemclus.sparse.SparseMLPModel.score"]], "set_params() (gemclus.sparse.sparsemlpmodel method)": [[50, "gemclus.sparse.SparseMLPModel.set_params"]], "douglas (class in gemclus.tree)": [[51, "gemclus.tree.Douglas"]], "__init__() (gemclus.tree.douglas method)": [[51, "gemclus.tree.Douglas.__init__"]], "find_active_points() (gemclus.tree.douglas method)": [[51, "gemclus.tree.Douglas.find_active_points"]], "fit() (gemclus.tree.douglas method)": [[51, "gemclus.tree.Douglas.fit"]], "fit_predict() (gemclus.tree.douglas method)": [[51, "gemclus.tree.Douglas.fit_predict"]], "get_gemini() (gemclus.tree.douglas method)": [[51, "gemclus.tree.Douglas.get_gemini"]], "get_params() (gemclus.tree.douglas method)": [[51, "gemclus.tree.Douglas.get_params"]], "predict() (gemclus.tree.douglas method)": [[51, "gemclus.tree.Douglas.predict"]], "predict_proba() (gemclus.tree.douglas method)": [[51, "gemclus.tree.Douglas.predict_proba"]], "score() (gemclus.tree.douglas method)": [[51, "gemclus.tree.Douglas.score"]], "set_params() (gemclus.tree.douglas method)": [[51, "gemclus.tree.Douglas.set_params"]], "kauri (class in gemclus.tree)": [[52, "gemclus.tree.Kauri"]], "__init__() (gemclus.tree.kauri method)": [[52, "gemclus.tree.Kauri.__init__"]], "fit() (gemclus.tree.kauri method)": [[52, "gemclus.tree.Kauri.fit"]], "fit_predict() (gemclus.tree.kauri method)": [[52, "gemclus.tree.Kauri.fit_predict"]], "get_params() (gemclus.tree.kauri method)": [[52, "gemclus.tree.Kauri.get_params"]], "predict() (gemclus.tree.kauri method)": [[52, "gemclus.tree.Kauri.predict"]], "score() (gemclus.tree.kauri method)": [[52, "gemclus.tree.Kauri.score"]], "set_params() (gemclus.tree.kauri method)": [[52, "gemclus.tree.Kauri.set_params"]], "print_kauri_tree() (in module gemclus.tree)": [[53, "gemclus.tree.print_kauri_tree"]]}})