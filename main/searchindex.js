Search.setIndex({"docnames": ["api", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_feature_selection_linear", "auto_examples/feature_selection/plot_feature_selection_logreg_mi", "auto_examples/feature_selection/plot_feature_selection_mlp", "auto_examples/feature_selection/plot_grouped_selection", "auto_examples/feature_selection/sg_execution_times", "auto_examples/index", "auto_examples/mlcl/index", "auto_examples/mlcl/plot_semi_supervised_consensus", "auto_examples/mlcl/sg_execution_times", "auto_examples/plot_circles", "auto_examples/plot_graph_node_clustering", "auto_examples/plot_gstm", "auto_examples/plot_intro_mlp_mmd", "auto_examples/plot_moon_clustering", "auto_examples/plot_nonparametric_clustering", "auto_examples/plot_rim", "auto_examples/scoring/index", "auto_examples/scoring/plot_gemini_scoring", "auto_examples/scoring/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/trees/index", "auto_examples/trees/plot_douglas_example", "auto_examples/trees/plot_kauri_example", "auto_examples/trees/sg_execution_times", "generated/gemclus.add_mlcl_constraint", "generated/gemclus.data.celeux_one", "generated/gemclus.data.celeux_two", "generated/gemclus.data.draw_gmm", "generated/gemclus.data.gstm", "generated/gemclus.data.multivariate_student_t", "generated/gemclus.gemini.MI", "generated/gemclus.gemini.MMDOvA", "generated/gemclus.gemini.MMDOvO", "generated/gemclus.gemini.WassersteinOvA", "generated/gemclus.gemini.WassersteinOvO", "generated/gemclus.linear.LinearMMD", "generated/gemclus.linear.LinearWasserstein", "generated/gemclus.linear.RIM", "generated/gemclus.mlp.MLPMMD", "generated/gemclus.mlp.MLPWasserstein", "generated/gemclus.nonparametric.CategoricalMMD", "generated/gemclus.nonparametric.CategoricalWasserstein", "generated/gemclus.sparse.SparseLinearMMD", "generated/gemclus.sparse.SparseMLPMMD", "generated/gemclus.tree.Douglas", "generated/gemclus.tree.Kauri", "generated/gemclus.tree.print_kauri_tree", "index", "quick_start", "user_guide"], "filenames": ["api.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_feature_selection_linear.rst", "auto_examples/feature_selection/plot_feature_selection_logreg_mi.rst", "auto_examples/feature_selection/plot_feature_selection_mlp.rst", "auto_examples/feature_selection/plot_grouped_selection.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/mlcl/index.rst", "auto_examples/mlcl/plot_semi_supervised_consensus.rst", "auto_examples/mlcl/sg_execution_times.rst", "auto_examples/plot_circles.rst", "auto_examples/plot_graph_node_clustering.rst", "auto_examples/plot_gstm.rst", "auto_examples/plot_intro_mlp_mmd.rst", "auto_examples/plot_moon_clustering.rst", "auto_examples/plot_nonparametric_clustering.rst", "auto_examples/plot_rim.rst", "auto_examples/scoring/index.rst", "auto_examples/scoring/plot_gemini_scoring.rst", "auto_examples/scoring/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/trees/index.rst", "auto_examples/trees/plot_douglas_example.rst", "auto_examples/trees/plot_kauri_example.rst", "auto_examples/trees/sg_execution_times.rst", "generated/gemclus.add_mlcl_constraint.rst", "generated/gemclus.data.celeux_one.rst", "generated/gemclus.data.celeux_two.rst", "generated/gemclus.data.draw_gmm.rst", "generated/gemclus.data.gstm.rst", "generated/gemclus.data.multivariate_student_t.rst", "generated/gemclus.gemini.MI.rst", "generated/gemclus.gemini.MMDOvA.rst", "generated/gemclus.gemini.MMDOvO.rst", "generated/gemclus.gemini.WassersteinOvA.rst", "generated/gemclus.gemini.WassersteinOvO.rst", "generated/gemclus.linear.LinearMMD.rst", "generated/gemclus.linear.LinearWasserstein.rst", "generated/gemclus.linear.RIM.rst", "generated/gemclus.mlp.MLPMMD.rst", "generated/gemclus.mlp.MLPWasserstein.rst", "generated/gemclus.nonparametric.CategoricalMMD.rst", "generated/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/gemclus.sparse.SparseLinearMMD.rst", "generated/gemclus.sparse.SparseMLPMMD.rst", "generated/gemclus.tree.Douglas.rst", "generated/gemclus.tree.Kauri.rst", "generated/gemclus.tree.print_kauri_tree.rst", "index.rst", "quick_start.rst", "user_guide.rst"], "titles": ["GEMCLUS API", "Feature selection", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse Linear MI (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Grouped Feature selection with a linear model", "Computation times", "General examples", "Consensus clustering", "Consensus clustering with linking constraints on sample pairs", "Computation times", "Comparative clustering of circles dataset with kernel change", "Graph node clustering with a nonparametric model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Scoring with GEMINI", "Scoring any model with GEMINI", "Computation times", "Computation times", "Trees", "Building a differentiable unsupervised tree: DOUGLAS", "Building an unsupervised tree with kernel-kmeans objective: KAURI", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.add_mlcl_constraint", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinOvO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Douglas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Kauri", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.print_kauri_tree", "Welcome to GemClus documentation!", "Quick start on gemclus", "User guide : contents"], "terms": {"The": [0, 2, 3, 4, 5, 9, 19, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "packag": [0, 50], "current": [0, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 51], "contain": [0, 29, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "simpl": [0, 7, 9, 11, 12, 16, 21, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51], "mlp": [0, 1, 6, 7, 11, 13, 15, 21, 45, 50], "logist": [0, 1, 4, 5, 6, 7, 19, 21, 27, 37, 38, 39, 44, 45, 51], "regress": [0, 1, 4, 5, 6, 7, 19, 21, 27, 37, 38, 39, 44, 45, 51], "all": [0, 2, 3, 4, 5, 7, 9, 12, 15, 19, 26, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51], "featur": [0, 6, 13, 14, 17, 23, 27, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51], "well": [0, 11, 13, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51], "sparsiti": [0, 45, 50, 51], "constrain": [0, 5, 9, 51], "variant": 0, "follow": [0, 12, 39, 49], "class": [0, 9, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51], "implement": [0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 49], "basic": 0, "evalu": [0, 2, 3, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "ani": [0, 7, 18, 20, 32, 35, 44, 45, 50, 51], "condit": [0, 32, 33, 34, 35, 36, 42, 43], "distribut": [0, 2, 3, 4, 5, 7, 11, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 46, 47, 49, 50], "These": 0, "ar": [0, 2, 3, 4, 5, 9, 12, 13, 15, 16, 17, 23, 24, 26, 27, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50], "base": [0, 7, 9, 27, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51], "standard": 0, "like": [0, 3, 13, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50], "one": [0, 3, 5, 19, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51], "hidden": [0, 40, 41, 45, 51], "layer": [0, 11, 40, 41, 44, 45, 51], "neural": [0, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50], "network": [0, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50], "have": [0, 9, 11, 19, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "paramet": [0, 5, 9, 11, 12, 16, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "assign": [0, 5, 12, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "data": [0, 2, 3, 5, 9, 11, 12, 16, 17, 19, 23, 24, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51], "sampl": [0, 2, 3, 4, 7, 8, 10, 13, 17, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51], "accord": [0, 12, 17, 47], "indic": [0, 12, 26, 44, 45, 46], "consequ": [0, 13, 42, 43], "do": [0, 9, 12, 15, 17, 19, 42, 43, 49], "depend": [0, 2, 4, 5, 12, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "locat": [0, 30], "overal": [0, 49], "can": [0, 3, 9, 11, 16, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51], "us": [0, 1, 5, 6, 7, 9, 11, 12, 15, 16, 17, 19, 23, 34, 36, 50, 51], "decis": [0, 7, 17, 21, 24, 30, 38, 41, 51], "boundari": [0, 7, 17, 21, 30, 38, 41, 51], "hyper": 0, "howev": [0, 51], "underli": [0, 47], "cannot": [0, 11, 26], "unseen": 0, "predict": [0, 2, 3, 4, 9, 13, 14, 15, 17, 19, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50], "train": [0, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50], "progress": [0, 2, 3, 4, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "remov": 0, "thei": [0, 9, 19], "select": [0, 6, 27, 28, 44, 45, 47, 51], "subset": 0, "which": [0, 2, 4, 5, 12, 15, 17, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 44, 45, 46, 47, 50], "mai": [0, 9, 13, 47, 49, 50], "enhanc": 0, "interpret": 0, "we": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 15, 16, 17, 19, 24, 49, 50, 51], "propos": [0, 3, 9, 11, 17, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51], "method": [0, 2, 3, 4, 5, 9, 12, 16, 24, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51], "architectur": [0, 45, 51], "thu": [0, 2, 3, 4, 5, 26, 50], "rule": [0, 46], "simultan": [0, 44, 45], "construct": [0, 23, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "i": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51], "learnt": [0, 23], "function": [0, 12, 15, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51], "intend": 0, "help": [0, 13, 47, 49], "understand": 0, "structur": [0, 47, 48], "abov": 0, "print": [0, 2, 3, 4, 5, 9, 12, 16, 17, 19, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "inner": 0, "thi": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 27, 28, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51], "aim": 0, "decor": [0, 9, 26], "give": [0, 7, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50], "further": [0, 50], "guidanc": [0, 9], "desir": [0, 15], "synthet": 0, "spars": [1, 5, 6, 7, 12, 15, 27, 37, 38, 39, 40, 41, 42, 43, 46, 47, 50, 51], "mmd": [1, 3, 6, 7, 11, 21, 24, 27, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 47, 51], "ovo": [1, 6, 7, 9, 12, 14, 16, 27, 37, 38, 40, 41, 42, 43, 44, 45, 50, 51], "linear": [1, 6, 7, 9, 11, 13, 15, 17, 19, 27, 33, 34, 40, 41, 42, 44, 45, 47, 51], "mi": [1, 6, 7, 27, 46], "group": [1, 4, 6, 7, 44, 45, 51], "model": [1, 6, 7, 18, 20, 21, 23, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51], "ova": [1, 6, 7, 19, 37, 38, 40, 41, 42, 43, 44, 45, 50, 51], "go": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 49], "end": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 46, 47], "download": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 49], "full": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24], "exampl": [2, 3, 4, 5, 9, 11, 12, 15, 16, 17, 19, 21, 23, 24, 49], "code": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 49], "In": [2, 3, 4, 5, 12, 14, 17, 30, 49, 50, 51], "ask": [2, 3, 4, 5, 50], "gemclu": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 51], "sparselinearmmd": [2, 5, 45, 51], "perform": [2, 3, 4, 5, 9, 12, 19, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51], "where": [2, 3, 4, 5, 9, 13, 15, 19, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "regularis": [2, 3, 4, 5, 17, 39], "penalti": [2, 3, 4, 5, 17, 19, 39, 44, 45, 51], "increas": [2, 3, 4, 5, 44, 45, 47], "until": [2, 3, 4, 5, 44, 45, 47], "2": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 24, 26, 27, 28, 30, 37, 38, 39, 40, 41, 44, 45, 46, 47, 50, 51], "discard": [2, 3, 4, 5], "keep": [2, 3, 4, 51], "best": [2, 3, 4, 9, 44, 45, 47], "weight": [2, 3, 4, 26, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "minimum": [2, 3, 4, 44, 45, 47], "number": [2, 3, 4, 9, 11, 12, 16, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49], "maintain": [2, 3, 4], "gemini": [2, 3, 4, 5, 11, 12, 13, 15, 16, 20, 21, 23, 24, 26, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "score": [2, 3, 4, 5, 12, 16, 17, 20, 23, 24, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50], "close": [2, 3, 4, 9, 11, 27, 30], "90": [2, 3, 4], "maximum": [2, 3, 4, 12, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "valu": [2, 3, 4, 11, 12, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "encount": [2, 3, 4], "dure": [2, 3, 4, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "consist": [2, 3, 4, 5, 9, 11, 17, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50], "3": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 27, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50], "isotrop": [2, 3, 4, 27], "gaussian": [2, 3, 4, 7, 11, 12, 17, 19, 21, 27, 28, 29, 30, 38], "so": [2, 3, 4, 13, 15, 19, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51], "find": [2, 3, 4, 5, 9, 13, 15, 46, 49], "5d": [2, 3], "20": [2, 3, 27, 40, 41, 45], "noisi": [2, 3, 4, 5, 27, 28], "variabl": [2, 3, 4, 5, 12, 27, 28, 44, 45], "optim": [2, 3, 4, 5, 11, 15], "solut": [2, 3, 4, 5, 9, 15, 44, 45], "should": [2, 3, 4, 5, 9, 32, 33, 34, 35, 36, 46], "onli": [2, 3, 4, 5, 12, 13, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51], "5": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 23, 24, 27, 44, 45], "relev": [2, 3, 4, 5], "suffici": [2, 3, 4, 5], "get": [2, 3, 4, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50], "correct": [2, 3, 4, 5], "import": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 37, 38, 39, 40, 41, 44, 45, 46, 50], "numpi": [2, 3, 4, 5, 9, 11, 12, 13, 15, 16, 17, 19, 49], "np": [2, 3, 4, 5, 9, 11, 12, 13, 15, 16, 17, 19], "from": [2, 3, 4, 5, 9, 11, 13, 14, 15, 17, 19, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 49, 50, 51], "matplotlib": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17], "pyplot": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17], "plt": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17], "sklearn": [2, 3, 4, 9, 11, 12, 14, 15, 16, 17, 19, 23, 24, 37, 38, 39, 40, 41, 44, 45, 47, 50, 51], "metric": [2, 3, 9, 11, 16, 19, 23, 24, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51], "celeux_on": [2, 3, 9], "gener": [2, 3, 4, 5, 9, 11, 12, 16, 17, 19, 23, 24, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "separ": [2, 3, 4, 12, 16, 17], "addit": [2, 3, 27, 28, 50], "p": [2, 3, 9, 12, 27, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50], "independ": [2, 3, 27, 50], "x": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51], "y": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51], "n": [2, 3, 5, 9, 12, 13, 16, 27, 28, 29, 30, 31], "300": [2, 3, 27], "mu": [2, 3, 9, 27], "1": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 26, 27, 30, 37, 38, 39, 40, 41, 44, 45, 46, 47, 50], "7": [2, 3, 5, 12, 15, 24, 27], "random_st": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "0": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "creat": [2, 3, 4, 5, 15, 16, 17], "just": [2, 3, 4, 5, 17], "call": [2, 3, 4, 5, 12, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "iter": [2, 3, 4, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "through": [2, 3, 4, 5, 45, 47, 49], "gradient": [2, 3, 4, 5, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "descent": [2, 3, 4, 5, 26, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "clf": [2, 3, 4, 5, 13, 14, 17, 37, 38, 39, 40, 41, 44, 45], "alpha": [2, 3, 4, 5, 11, 12, 13, 15, 17, 30, 44, 45], "true": [2, 3, 4, 5, 9, 12, 13, 14, 15, 16, 17, 19, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51], "search": [2, 3, 4, 5], "elimin": [2, 3, 4, 5, 45], "best_weight": [2, 3, 4, 5, 44, 45], "n_featur": [2, 3, 4, 5, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "take": [2, 4, 5, 9, 11, 13, 17, 50], "look": [2, 4, 5, 11, 17, 50], "how": [2, 4, 5, 7, 9, 16, 17, 19, 23, 24, 27, 30, 50, 51], "decreas": [2, 4], "f": [2, 3, 4, 5, 12, 16, 19, 30, 45, 49, 50], "top": [2, 4, 5, 13, 44, 45], "wa": [2, 4, 5, 27, 28, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "max": [2, 4, 5, 9, 11, 15, 17], "settl": [2, 4, 5], "an": [2, 4, 5, 7, 9, 12, 13, 15, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51], "optimum": [2, 4, 5], "9": [2, 4, 5, 44, 45], "highlight": [2, 4], "along": [2, 4, 15], "titl": [2, 3, 4, 11, 49], "plot": [2, 4, 11, 12, 13], "xlabel": [2, 4, 13, 14, 17], "ylabel": [2, 4, 13, 14, 17], "ylim": [2, 4, 11, 13], "show": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24], "expect": [2, 3, 13, 50], "first": [2, 3, 19, 40, 41, 45, 50], "linalg": [2, 3], "norm": [2, 3, 26, 51], "axi": [2, 3, 4, 5, 11, 15], "ord": [2, 3], "730431446195361": 2, "0285492563142022": 2, "725694330682782": 2, "arrai": [2, 3, 4, 5, 12, 16, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "4": [2, 3, 4, 5, 11, 12, 13, 16, 24, 28], "now": [2, 3, 4, 13, 17, 19], "y_pred": [2, 3, 4, 9, 12, 13, 14, 15, 16, 17, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "ari": [2, 3, 9, 12, 16, 23, 24], "adjusted_rand_scor": [2, 3, 9, 12, 16, 23, 24], "8752937655453139": 2, "total": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25], "run": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50], "time": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 50], "script": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24], "minut": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24], "19": [2, 6, 49], "807": [2, 6], "second": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23], "python": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24], "sourc": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "plot_feature_selection_linear": [2, 6], "py": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25], "jupyt": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24], "notebook": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24], "ipynb": [2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24], "galleri": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 51], "sphinx": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24], "sparselinearmi": 3, "path": [3, 12, 15, 44, 45], "50": [3, 4, 5, 11, 12, 13, 14, 15, 17], "contrari": 3, "guid": [3, 15, 47, 49, 50], "specif": [3, 50, 51], "kernel": [3, 7, 9, 21, 22, 25, 32, 33, 34, 35, 36, 37, 40, 42, 44, 45, 47, 48, 51], "space": [3, 33, 34, 35, 36, 51], "That": 3, "why": 3, "accept": 3, "threshold": [3, 5, 15, 23], "lower": [3, 5], "instead": [3, 12, 13, 19], "other": [3, 27, 42, 43], "A": [3, 9, 26, 27, 28, 29, 30, 45, 46, 48, 50], "veri": 3, "similar": [3, 11], "found": [3, 47, 49], "discrimin": [3, 26, 30, 37, 38, 39, 40, 41, 44, 45], "brain": 3, "mri": 3, "segment": 3, "kong": 3, "et": [3, 17, 27, 28, 39, 45, 50], "al": [3, 17, 27, 28, 39, 45, 50], "2014": [3, 27, 28], "decomposit": 3, "keep_threshold": [3, 5, 44, 45], "let": [3, 17, 19], "": [3, 4, 12, 14, 17, 19, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "make": [3, 12], "small": [3, 9, 44, 45, 49], "pca": 3, "visualis": [3, 5], "purpos": 3, "distinguish": 3, "label": [3, 19, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "x_pca": 3, "n_compon": [3, 11], "fit_transform": [3, 19], "k": [3, 29, 42, 43, 50], "rang": [3, 5, 9, 12], "class_indic": 3, "scatter": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17], "c": [3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 27, 28, 30, 49, 50], "marker": 3, "o": 3, "off": [3, 11, 15], "celeux": [3, 27, 28], "lasso": [3, 4, 44, 45, 51], "6627924906594319": 3, "552": [3, 6], "plot_feature_selection_logreg_mi": [3, 6], "sparsemlpmmd": [4, 44], "2d": [4, 28], "48": 4, "make_blob": [4, 14, 17], "center": [4, 14, 17], "cluster_std": [4, 14, 17], "n_sampl": [4, 11, 14, 15, 17, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "200": [4, 11, 13, 14, 15, 17], "add": [4, 26, 51], "extra": 4, "random": [4, 5, 9, 12, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "seed": [4, 5, 9, 12], "concaten": [4, 5, 27], "normal": [4, 5], "scale": [4, 27, 29, 31, 49], "size": [4, 5, 12, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45], "18": [4, 21], "batch_siz": [4, 5, 13, 37, 38, 39, 40, 41, 44, 45, 46], "max_it": [4, 5, 11, 23, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "25": 4, "learning_r": [4, 5, 9, 12, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "001": [4, 37, 38, 39, 40, 41, 42, 43, 44, 45], "our": [4, 5, 7, 9, 12, 15, 49, 50], "figur": 4, "figsiz": 4, "10": [4, 5, 9, 13, 17, 31, 44, 45, 50], "subplot": [4, 11], "tight_layout": [4, 11], "get_select": [4, 5, 44, 45], "4596486286280377": 4, "5824499242836225": 4, "4242049318552603": 4, "x_0": [4, 14, 17], "x_1": [4, 14, 17], "x_2": [4, 14, 17], "ax0": [4, 14, 17], "crimson": [4, 14, 17], "ax1": [4, 14, 17], "deepskyblu": [4, 14, 17], "ax2": [4, 14, 17], "darkgreen": [4, 14, 17], "leg": [4, 14, 17], "legend": [4, 14, 17], "loc": [4, 14, 17, 29, 31], "upper": [4, 14, 17], "left": [4, 14, 17, 50], "fancybox": [4, 14, 17], "scatterpoint": [4, 14, 17], "get_fram": [4, 14, 17], "set_alpha": [4, 14, 17], "584": [4, 6], "plot_feature_selection_mlp": [4, 6], "moreov": [5, 50], "produc": [5, 46], "some": [5, 7, 9, 11, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51], "categor": [5, 42, 43], "hot": [5, 44, 45], "encod": [5, 44, 45], "consid": [5, 37, 38, 39, 40, 41, 44, 45, 46, 47], "altogeth": 5, "option": [5, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "binomi": [5, 12], "cluster": [5, 10, 19, 21, 23, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51], "8": [5, 9, 13], "inform": [5, 17, 19, 28, 30, 32, 37, 38, 39, 40, 41, 44, 45, 46, 49, 50], "outcom": 5, "multinomi": 5, "x1_class_1": 5, "pval": [5, 29], "05": [5, 6, 11, 15, 25, 44, 45], "45": 5, "x2_class_1": 5, "x_class_1": 5, "x1_class_2": 5, "x2_class_2": 5, "x_class_2": 5, "x_inform": 5, "x_nois": 5, "100": [5, 9, 12, 16, 23, 46], "repeat": 5, "arang": 5, "final": [5, 9], "write": 5, "out": [5, 49], "partit": [5, 44, 45], "shape": [5, 9, 12, 15, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "def": 5, "rand_jitt": 5, "return": [5, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "randn": 5, "len": [5, 9], "01": [5, 6, 21, 44, 45, 46], "argmax": [5, 9, 17], "red": 5, "blue": [5, 13], "6": [5, 9, 24], "11": 5, "12": [5, 32, 33, 34, 35, 36], "13": 5, "14": [5, 28], "15": 5, "1e": [5, 9, 12, 15, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "80": 5, "4323062818447518": 5, "8434561566009591": 5, "6747649252807673": 5, "667": [5, 6], "plot_grouped_select": [5, 6], "00": [6, 10, 20, 21, 25], "30": 6, "609": 6, "execut": [6, 10, 20, 21, 25], "auto_examples_feature_select": 6, "file": [6, 10, 20, 21, 25], "mb": [6, 10, 20, 21, 25], "03": 6, "here": [7, 9, 11, 12, 13, 19, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50], "introduc": [7, 21, 40], "non": [7, 12, 21, 28, 29, 42], "parametr": [7, 12, 21, 29, 42, 50], "map": [7, 21, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "mixtur": [7, 11, 12, 17, 21, 27, 28, 29, 30, 38], "low": [7, 9, 21, 30, 38, 46], "degre": [7, 21, 30, 31, 38], "student": [7, 21, 30, 31, 38], "draw": [7, 13, 21, 27, 28, 29, 30, 31, 41], "between": [7, 21, 26, 32, 33, 34, 35, 36, 41, 45, 50, 51], "two": [7, 11, 21, 24, 34, 36, 40, 41, 44, 47, 50], "interlac": [7, 21, 41], "moon": [7, 21, 41], "rim": [7, 21], "graph": [7, 15, 16, 21, 29, 43], "node": [7, 16, 21, 24, 29, 43, 47], "nonparametr": [7, 9, 16, 21, 29], "compar": [7, 21, 27, 28, 33, 34, 35, 36, 40, 50], "circl": [7, 21, 40], "dataset": [7, 14, 15, 21, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 44, 45, 50], "chang": [7, 21, 40], "link": [7, 8, 10, 26, 27, 37, 43], "constraint": [7, 8, 10, 26, 27, 37, 43, 44, 45, 47], "pair": [7, 8, 10, 12, 15, 26, 27, 37, 43], "build": [7, 22, 25, 33, 46, 47, 48], "differenti": [7, 22, 25, 33, 46], "unsupervis": [7, 9, 22, 25, 33, 46, 47, 48], "dougla": [7, 22, 25, 33], "kmean": [7, 22, 25, 47, 48], "object": [7, 22, 25, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50], "kauri": [7, 22, 25, 48], "auto_examples_python": 7, "zip": 7, "auto_examples_jupyt": 7, "improv": [9, 44, 45, 50], "enforc": 9, "loos": 9, "equival": [9, 24], "ensembl": 9, "learn": [9, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50], "seek": [9, 19], "agreeanc": 9, "describ": [9, 26, 39, 44, 45, 48], "ratio": 9, "were": [9, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "togeth": [9, 26], "provid": [9, 49, 50, 51], "Then": [9, 11], "ensur": [9, 26, 44, 45], "remain": [9, 44, 45], "apart": [9, 13], "while": 9, "satisfi": [9, 26, 47], "try": [9, 14, 17, 49], "its": [9, 46, 50], "level": [9, 17], "supervis": 9, "input": [9, 13, 17, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51], "advantag": 9, "requir": [9, 49, 51], "knowledg": 9, "rather": [9, 19], "idea": 9, "whether": [9, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "start": [9, 11, 19, 44, 45, 49], "categoricalwasserstein": [9, 12], "linearmmd": [9, 38, 39, 44], "add_mlcl_constraint": 9, "itertool": [9, 12], "challeng": [9, 11], "mean": [9, 11, 12, 13, 16, 27, 29, 30, 33, 34], "fit": [9, 11, 12, 15, 16, 17, 19, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50], "sever": [9, 50], "variou": [9, 44, 45], "all_model": 9, "n_cluster": [9, 11, 12, 13, 15, 16, 17, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50], "cosin": [9, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47], "sigmoid": [9, 33, 34, 37, 40, 42, 44, 45, 47], "rbf": [9, 11, 33, 34, 37, 40, 42, 44, 45, 47], "sub": 9, "12303001585156739": 9, "1283284165744985": 9, "12182895336472732": 9, "2306942272279108": 9, "e": [9, 27, 28, 32, 33, 34, 35, 36, 49, 50], "same": [9, 19, 26, 51], "consensus_matrix": 9, "zero": [9, 11], "j": [9, 12], "combinations_with_replac": 9, "r": [9, 32, 33, 34, 35, 36, 45, 46, 50], "int": [9, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "precomput": [9, 12, 15, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "notic": [9, 24], "api": [9, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50], "although": 9, "superflu": 9, "consensus_model": 9, "y_pred_consensu": 9, "predict_proba": [9, 17, 19, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "what": 9, "0874162803551509": 9, "simul": 9, "extrapol": 9, "real": 9, "life": 9, "situat": 9, "would": [9, 15, 49], "emphas": 9, "more": [9, 50, 51], "field": 9, "expert": 9, "most": 9, "confid": 9, "sorted_confidence_sampl": 9, "sort": 9, "kei": 9, "lambda": 9, "revers": 9, "must_link": [9, 26], "unsure_sample_pair": 9, "combin": [9, 12, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47], "next": 9, "cannot_link": [9, 26], "over": [9, 27], "base_model": 9, "line": 9, "mlcl_consensus_model": 9, "y_pred_mlcl_consensu": 9, "31701486004565943": 9, "consensus_ord": 9, "argsort": 9, "imshow": 9, "cmap": [9, 11, 13, 15], "seismic": 9, "109": [9, 10], "plot_semi_supervised_consensu": [9, 10], "08": [10, 21], "auto_examples_mlcl": 10, "consensu": [10, 26, 27, 37, 43], "centr": 11, "algorithm": [11, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51], "unless": 11, "adequ": [11, 12], "spectralclust": 11, "gaussianmixtur": 11, "make_circl": 11, "nois": [11, 15], "factor": [11, 26, 44, 45, 47], "normalis": 11, "std": 11, "ddof": 11, "set": [11, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51], "covari": [11, 12, 16, 29], "type": [11, 50], "spheric": 11, "lighten": 11, "correspond": [11, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47], "symmetri": 11, "eas": 11, "job": 11, "initialis": [11, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "actual": [11, 47], "gm": 11, "covariance_typ": 11, "means_init": 11, "1000": [11, 37, 38, 39, 40, 41, 42, 43, 44, 45], "spectral": [11, 15], "sc": 11, "multi": [11, 51], "perceptron": [11, 51], "becaus": [11, 12, 15, 51], "incap": 11, "euclidean_gemini": 11, "mlpmmd": [11, 14, 41, 50], "comput": [11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51], "rbf_gemini": 11, "grid": [11, 13], "x_val": [11, 13, 15, 17], "linspac": [11, 13, 15, 17], "min": [11, 15, 17], "num": [11, 13, 15, 17], "y_val": [11, 13, 15, 17], "xx": [11, 13, 15, 17], "yy": [11, 13, 15, 17], "meshgrid": [11, 13, 15, 17], "grid_input": [11, 13, 15, 17], "c_": [11, 13, 15, 17], "ravel": [11, 13, 15, 17], "contourf": [11, 13, 15, 17], "reshap": [11, 13, 15, 17], "cm": [11, 15, 24], "labels_": [11, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "53": [11, 21], "749": [11, 21], "plot_circl": [11, 21], "simplifi": 12, "version": [12, 44, 45, 50, 51], "latent": 12, "posit": [12, 31], "procedur": 12, "To": [12, 15], "mani": [12, 49], "determin": [12, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "probabl": [12, 17, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50], "distanc": [12, 15, 19, 32, 33, 34, 35, 36, 38, 41, 43, 50, 51], "associ": [12, 23], "each": [12, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "note": [12, 15, 47, 51], "given": [12, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "ident": 12, "matrix": [12, 15, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "scipi": [12, 15, 49], "csgraph": [12, 15], "ey": [12, 16, 19], "draw_gmm": [12, 16], "ones": [12, 16, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47], "pairwise_dist": [12, 15, 51], "euclidean": [12, 15, 19, 35, 36, 38, 41, 43, 51], "edge_prob": 12, "exp": 12, "adjacency_matrix": 12, "adjac": [12, 15], "symmetr": [12, 32, 33, 34, 35, 36], "t": [12, 13, 19, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "shortest": [12, 15], "floyd_warshal": [12, 15], "direct": [12, 15], "fals": [12, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "unweight": [12, 15], "replac": [12, 15, 19], "inf": [12, 15], "isinf": [12, 15], "optimis": [12, 16, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "specifi": [12, 19, 44, 45], "custom": [12, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47], "pass": [12, 15, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "argument": [12, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47], "1789": [12, 16], "dummi": 12, "unnecessari": 12, "There": 12, "index": 12, "match": [12, 19, 46], "fit_predict": [12, 13, 15, 16, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "node_i": 12, "node_j": 12, "grai": 12, "linewidth": 12, "ari_scor": [12, 16], "gemini_scor": [12, 16], "3f": [12, 16, 19], "977": 12, "141": 12, "247": [12, 21], "plot_graph_node_clust": [12, 21], "retak": [13, 15], "experi": [13, 15], "origin": [13, 15, 29, 49, 50, 51], "paper": [13, 15, 39, 51], "want": [13, 15, 51], "incorpor": 13, "freedom": [13, 30, 31], "seem": [13, 51], "outlier": 13, "unlik": 13, "done": 13, "linearwasserstein": [13, 37], "gstm": 13, "far": [13, 51], "df": [13, 30, 31], "zz": [13, 15, 17], "reds_r": 13, "xlim": 13, "747": [13, 21], "plot_gstm": [13, 21], "base_gemini": 14, "densemmdovo": 14, "environ": [14, 17], "pleas": [14, 17, 47, 49, 50], "rerun": [14, 17], "cell": [14, 17], "html": [14, 17], "represent": [14, 17, 40, 41, 45], "trust": [14, 17], "On": [14, 17, 44, 45], "github": [14, 17, 49], "unabl": [14, 17], "render": [14, 17], "load": 14, "page": [14, 17], "nbviewer": [14, 17], "org": [14, 17], "mlpmmdmlpmmd": 14, "705": [14, 21], "plot_intro_mlp_mmd": [14, 21], "face": 15, "trick": 15, "mlpwasserstein": [15, 40], "abl": 15, "make_moon": 15, "2023": [15, 50], "edg": 15, "defin": [15, 33, 34, 35, 36], "less": 15, "than": [15, 44, 45, 50], "quantil": 15, "320": [15, 21], "plot_moon_clust": [15, 21], "illustr": 16, "categoricalmmd": 16, "975": 16, "328": 16, "323": [16, 21], "plot_nonparametric_clust": [16, 21], "mutual": [17, 30, 32, 37, 38, 39, 40, 41, 44, 45, 46, 49, 50], "kraus": [17, 39], "2010": [17, 39], "maximis": [17, 23, 26, 37, 38, 39, 40, 41, 42, 43, 46, 50], "under": [17, 44, 45, 49], "ell_2": [17, 26, 39], "rimrim": 17, "u": [17, 49], "grad": 17, "grid_pr": 17, "isol": 17, "02139604932056094": 17, "294": [17, 21], "plot_rim": [17, 21], "anoth": [19, 51], "preprocess": 19, "linear_model": [19, 24], "naive_bay": 19, "load_breast_canc": 19, "return_x_i": [19, 37, 38, 39, 40, 41, 44, 45, 50], "robustscal": 19, "differ": [19, 23, 24, 44, 45, 46, 47], "breast": 19, "cancer": 19, "l2": [19, 35, 36, 38, 41, 43], "clf1": 19, "logisticregress": 19, "p_y_given_x_1": 19, "naiv": 19, "bay": [19, 50], "hypothes": [19, 49], "clf2": 19, "gaussiannb": 19, "p_y_given_x_2": 19, "both": [19, 51], "wassersteingemini": [19, 46], "v": [19, 33, 34, 35, 36, 46, 50], "wasserstein_scor": 19, "wassersteinova": 19, "need": [19, 32, 33, 34, 35, 36], "affin": [19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "wasserstein": [19, 35, 36, 37, 38, 40, 41, 43, 46, 51], "compute_affin": [19, 32, 33, 34, 35, 36], "clf1_score": 19, "clf2_score": 19, "878": 19, "005": 19, "By": [19, 51], "obtain": [19, 24], "share": 19, "otherwis": [19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "y_one_hot": 19, "precomputed_dist": 19, "matmul": 19, "431": 19, "403": 19, "712": [19, 20], "plot_gemini_scor": [19, 20], "auto_examples_scor": 20, "385": 21, "auto_exampl": 21, "07": 21, "few": [23, 44, 45], "bin": [23, 46], "per": [23, 32, 33, 34, 35, 36, 46], "mmdova": 23, "iri": [23, 24], "load_iri": [23, 24, 37, 38, 39, 40, 41, 44, 45, 50], "target": [23, 24], "n_cut": [23, 46], "y_pred_linear": [23, 24], "474150686050238": 23, "5681159420289855": 23, "027": [23, 25], "plot_douglas_exampl": [23, 25], "accompanni": 24, "gain": [24, 47], "deriv": [24, 32, 33, 34, 35, 36, 49, 50, 51], "squar": 24, "print_kauri_tre": 24, "limit": [24, 47], "depth": [24, 47], "simplic": 24, "max_clust": [24, 47], "max_depth": [24, 47], "9459": 24, "167022308022": 24, "additive_chi2_model": 24, "additive_chi2": [24, 33, 34, 37, 40, 42, 44, 45, 47], "y_pred_additive_chi2": 24, "22": [24, 50], "43532371061057": 24, "7172759168337549": 24, "8680377279943841": 24, "feature_nam": [24, 48], "petal": 24, "width": 24, "length": [24, 44, 45], "034": [24, 25], "plot_kauri_exampl": [24, 25], "061": 25, "auto_examples_tre": 25, "tree": [25, 33], "gemini_model": 26, "none": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "must": [26, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47], "contraint": 26, "respect": [26, 27, 50], "minimis": 26, "vector": [26, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "It": [26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 50], "possibl": [26, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "fulli": 26, "mlp___": 26, "linear___": 26, "categorical___": 26, "involv": [26, 50], "ndarrai": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "n_constraint": 26, "default": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51], "being": 26, "list": [26, 29, 44, 45, 46], "i1": 26, "j1": 26, "iN": 26, "jn": 26, "If": [26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "appli": 26, "float": [26, 27, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "hyperparamet": [26, 39, 46], "tupl": [27, 28, 29], "compon": [27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "dimens": 27, "excess": 27, "taken": [27, 28], "section": [27, 28], "control": [27, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "randomst": [27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "instanc": [27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "creation": [27, 28, 29, 30, 31], "reproduc": [27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "output": [27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51], "across": [27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "multipl": [27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "gmm": [27, 28, 29, 30], "drawn": [27, 28, 29, 30, 31, 50], "refer": [27, 28, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "g": [27, 28], "martin": [27, 28], "magniett": [27, 28], "m": [27, 28, 30, 45, 49, 50], "l": [27, 28, 30, 45, 49, 50], "maugi": [27, 28], "rabusseau": [27, 28], "rafteri": [27, 28], "regular": [27, 28, 39], "approach": [27, 28], "journal": [27, 28, 50], "de": [27, 28], "la": [27, 28], "societ": [27, 28], "francais": [27, 28], "statistiqu": [27, 28], "155": [27, 28], "57": [27, 28], "71": [27, 28], "2000": 28, "linearli": 28, "element": 29, "d": [29, 31, 46, 49, 50], "proport": 29, "500": 30, "articl": 30, "ohl": [30, 37, 38, 40, 41, 44, 45, 46, 47, 49, 50], "mattei": [30, 37, 38, 40, 41, 44, 45, 46, 47, 49, 50], "bouveyron": [30, 37, 38, 40, 41, 44, 45, 49, 50], "harchaoui": [30, 37, 38, 40, 41, 44, 45, 49, 50], "w": [30, 32, 33, 34, 35, 36, 46, 49, 50], "leclercq": [30, 37, 38, 40, 41, 44, 45, 46, 47, 49, 50], "droit": [30, 37, 38, 40, 41, 44, 45, 46, 47, 49, 50], "precioso": [30, 37, 38, 40, 41, 44, 45, 49, 50], "2022": [30, 49, 50], "octob": [30, 49], "generalis": [30, 37, 38, 40, 41, 44, 45, 46, 49, 50], "advanc": [30, 49, 50], "process": [30, 49, 50], "system": [30, 49, 50], "multivari": 31, "semi": 31, "definit": [31, 50], "spread": 31, "epsilon": [32, 33, 34, 35, 36], "classic": [32, 39], "complet": [32, 49], "mathcal": [32, 33, 34, 35, 36], "mathbb": [32, 33, 34, 35, 36, 50], "_": [32, 33, 34, 35, 36, 50], "sim": [32, 33, 34, 35, 36, 50], "text": [32, 33, 34], "kl": 32, "precis": [32, 33, 34, 35, 36], "clip": [32, 33, 34, 35, 36], "order": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "avoid": [32, 33, 34, 35, 36], "numer": [32, 33, 34, 35, 36], "instabl": [32, 33, 34, 35, 36], "__init__": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "doe": [32, 42, 43], "case": [32, 33, 34, 35, 36, 51], "ignor": [32, 33, 34, 35, 36], "return_grad": [32, 33, 34, 35, 36], "context": [32, 33, 34, 35, 36], "either": [32, 33, 34, 35, 36, 44, 45, 47], "result": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50], "bool": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "nabla_": [32, 33, 34, 35, 36], "discrep": [33, 34], "kappa": [33, 34], "chi2": [33, 34, 37, 40, 42, 44, 45, 47], "poli": [33, 34, 37, 40, 42, 44, 45, 47], "polynomi": [33, 34, 37, 40, 42, 44, 45, 47], "laplacian": [33, 34, 37, 40, 42, 44, 45, 47], "kernel_param": [33, 34, 37, 40, 42, 44, 45, 47], "y_a": [34, 36], "y_b": [34, 36], "delta": [35, 36, 46], "l1": [35, 36, 38, 41, 43], "manhattan": [35, 36, 38, 41, 43], "cityblock": [35, 36, 38, 41, 43], "paired_dist": [35, 36, 38, 41, 43], "solver": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "adam": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "verbos": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "form": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "neuron": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "epoch": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "singl": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "initi": [37, 38, 39, 40, 41, 42, 43, 44, 45], "rate": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "step": [37, 38, 39, 40, 41, 42, 43, 44, 45], "updat": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49], "sgd": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "stochast": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "kingma": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "diederik": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "jimmi": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "ba": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "batch": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "whole": [37, 38, 39, 40, 41, 44, 45], "messag": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "stdout": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "bia": [37, 38, 39, 40, 41, 42, 43, 44, 45], "loui": [37, 38, 40, 41, 44, 45, 46, 47, 49], "pierr": [37, 38, 40, 41, 44, 45, 46, 47, 49], "alexandr": [37, 38, 40, 41, 44, 45, 46, 47, 49], "charl": [37, 38, 40, 41, 44, 45, 49], "warith": [37, 38, 40, 41, 44, 45, 49], "micka\u00ebl": [37, 38, 40, 41, 44, 45, 46, 47, 49], "arnaud": [37, 38, 40, 41, 44, 45, 46, 47, 49], "freder": [37, 38, 40, 41, 44, 45, 46, 47, 49], "6949190522657067": 37, "attribut": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "w_": [37, 38, 39, 44], "b_": [37, 38, 39, 44], "bias": [37, 38, 39, 40, 41, 44, 45], "optimiser_": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "adamoptim": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "sgdoptim": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "chosen": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "n_iter_": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "took": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "converg": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50], "present": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51], "convent": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50], "self": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "estim": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "get_gemini": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "get_param": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "deep": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "subobject": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "param": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "dict": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "name": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "membership": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "after": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "closest": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "seen": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "test": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "set_param": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "work": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49], "nest": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "pipelin": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "latter": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "__": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "6993348362264595": 38, "n_features_in": [38, 39], "reg": 39, "framework": 39, "maxim": [39, 44, 45, 47], "ryan": 39, "gome": 39, "andrea": 39, "pietro": 39, "perona": 39, "00962912118121384": 39, "n_hidden_dim": [40, 41, 45], "7592155845461646": 40, "w1_": [40, 41, 45], "b1_": [40, 41, 45], "w2_": [40, 41, 45], "b2_": [40, 41, 45], "h_": [40, 41, 45], "7636482655127903": 41, "directli": [42, 43, 51], "x_i": [42, 43], "theta_": [42, 43], "ki": [42, 43], "contrarili": [42, 43], "part": [42, 43], "support": [42, 43, 49], "p_": [43, 50, 51], "vanilla": [44, 45], "variat": [44, 45, 47], "bring": [44, 45, 50], "via": 44, "proxim": [44, 45], "repres": [44, 45], "typic": [44, 45], "scheme": [44, 45], "joint": [44, 45, 50, 51], "6940342321220005": 44, "retriev": [44, 45], "ind": [44, 45], "alpha_multipli": [44, 45], "min_featur": [44, 45], "restore_best_weight": [44, 45], "early_stopping_factor": [44, 45], "99": [44, 45], "max_pati": [44, 45], "unfold": [44, 45], "geometr": [44, 45], "amount": [44, 45], "histori": [44, 45], "kept": [44, 45], "certain": [44, 45], "percentag": [44, 45], "reduct": [44, 45], "made": [44, 45, 51], "retrain": [44, 45], "greater": [44, 45], "stop": [44, 45], "minim": [44, 45], "deem": [44, 45], "offer": [44, 45], "good": [44, 45, 50], "restor": [44, 45], "beyond": [44, 45], "upgrad": [44, 45], "too": [44, 45], "earli": [44, 45], "wait": [44, 45], "without": [44, 45, 49, 50], "befor": [44, 45], "sequenti": [44, 45], "group_penalti": [44, 45], "skip": [45, 51], "connect": [45, 51], "inspir": [45, 50, 51], "lassonet": [45, 50, 51], "lemhadri": [45, 50], "2021": [45, 50], "hierarchi": 45, "coeffici": 45, "rel": [45, 46], "strength": 45, "ruan": [45, 50], "abraham": [45, 50], "tibshirani": [45, 50], "766421183641077": 45, "w_skip_": 45, "feature_mask": 46, "temperatur": 46, "dndt": 46, "leverag": 46, "appris": 46, "split": [46, 47], "learnabl": 46, "wise": 46, "soft": 46, "recombin": 46, "those": [46, 47], "cut": 46, "boolean": 46, "among": 46, "logit": 46, "leaf": [46, 47], "high": 46, "smoothen": 46, "wherea": 46, "closer": 46, "dirac": [46, 47], "mmdgemini": 46, "explor": [46, 47], "preciosio": [46, 47], "find_active_point": 46, "calcul": 46, "point": 46, "activ": 46, "fall": 46, "within": 46, "bound": 46, "contribut": [46, 49], "active_point": 46, "integ": 46, "ha": [46, 49, 50], "min_samples_split": 47, "min_samples_leaf": 47, "max_featur": 47, "max_leav": 47, "reward": 47, "ideal": 47, "new": 47, "refurbish": 47, "them": 47, "alreadi": 47, "exist": 47, "leav": 47, "least": 47, "logic": 47, "randomli": 47, "upon": 47, "choic": [47, 51], "put": 47, "tree_": 47, "_tree": 47, "repeatedli": 47, "choos": 47, "reach": 47, "onc": 47, "special": [47, 49], "henc": [47, 50], "up": 47, "constant": 47, "kauri_tre": 48, "binari": 48, "thank": 49, "you": [49, 50, 51], "check": [49, 50], "realli": 49, "pleasur": 49, "dedic": 49, "theori": [49, 50], "allow": 49, "user": [49, 50], "tool": 49, "written": 49, "scikit": [49, 50], "compat": 49, "extens": [49, 51], "http": 49, "io": 49, "main": 49, "com": 49, "instruct": 49, "pip": 49, "librari": [49, 51], "coupl": 49, "scientif": 49, "pot": 49, "repo": 49, "git": 49, "clone": 49, "cd": 49, "cite": 49, "neurip": 49, "inproceed": 49, "ohl2022generalis": 49, "author": 49, "micka": 49, "booktitl": 49, "editor": 49, "alic": 49, "h": [49, 50], "oh": [49, 50], "alekh": 49, "agarw": [49, 50], "daniel": 49, "belgrav": [49, 50], "kyunghyun": 49, "cho": [49, 50], "year": 49, "url": 49, "openreview": 49, "net": 49, "forum": 49, "id": 49, "0oy3pia": 49, "adp": 49, "been": 49, "french": 49, "govern": 49, "3ia": 49, "c\u00f4te": 49, "azur": 49, "invest": 49, "futur": 49, "project": 49, "manag": 49, "nation": 49, "research": [49, 50], "agenc": 49, "anr": 49, "p3ia": 49, "0002": 49, "also": 49, "franc": 49, "canada": 49, "fund": 49, "ffcr": 49, "partli": 49, "eu": 49, "horizon": 49, "2020": 49, "ai4media": 49, "contract": 49, "951911": 49, "jhonatan": 49, "torr": 49, "hi": 49, "insight": 49, "develop": 49, "short": 50, "descript": 50, "hint": 50, "about": 50, "For": [50, 51], "detail": 50, "public": 50, "stand": 50, "novel": 50, "measur": 50, "custer": 50, "theta": [50, 51], "right": 50, "y_1": 50, "y_2": 50, "theorem": 50, "easili": 50, "tractabl": 50, "cane": 50, "valuat": 50, "assumpt": 50, "At": 50, "moment": 50, "report": 50, "fewer": 50, "practic": 50, "merg": 50, "avail": 50, "loss": 50, "your": 50, "own": 50, "mainli": 50, "feel": 50, "interest": 50, "ed": 50, "machin": 50, "127": 50, "29": 50, "doi": 50, "48550": 50, "arxiv": 50, "2302": 50, "03391": 50, "mode": 51, "ad": 51, "constructor": 51, "achiev": 51, "regard": 51, "chose": 51, "yield": 51, "worst": 51, "manner": 51, "pairwise_kernel": 51, "forc": 51, "usag": 51, "flexibl": 51, "yet": 51, "express": 51, "enough": 51, "term": 51, "simpler": 51, "induc": 51, "_basemmd": 51, "_basewasserstein": 51, "rewrit": 51, "_infer": 51, "_get_weight": 51, "_init_param": 51, "includ": 51}, "objects": {"gemclus": [[26, 0, 1, "", "add_mlcl_constraint"]], "gemclus.data": [[27, 0, 1, "", "celeux_one"], [28, 0, 1, "", "celeux_two"], [29, 0, 1, "", "draw_gmm"], [30, 0, 1, "", "gstm"], [31, 0, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[32, 1, 1, "", "MI"], [33, 1, 1, "", "MMDOvA"], [34, 1, 1, "", "MMDOvO"], [35, 1, 1, "", "WassersteinOvA"], [36, 1, 1, "", "WassersteinOvO"]], "gemclus.gemini.MI": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "compute_affinity"], [32, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvA": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "compute_affinity"], [33, 2, 1, "", "evaluate"]], "gemclus.gemini.MMDOvO": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "compute_affinity"], [34, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvA": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "compute_affinity"], [35, 2, 1, "", "evaluate"]], "gemclus.gemini.WassersteinOvO": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "compute_affinity"], [36, 2, 1, "", "evaluate"]], "gemclus.linear": [[37, 1, 1, "", "LinearMMD"], [38, 1, 1, "", "LinearWasserstein"], [39, 1, 1, "", "RIM"]], "gemclus.linear.LinearMMD": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "fit"], [37, 2, 1, "", "fit_predict"], [37, 2, 1, "", "get_gemini"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "predict"], [37, 2, 1, "", "predict_proba"], [37, 2, 1, "", "score"], [37, 2, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "fit"], [38, 2, 1, "", "fit_predict"], [38, 2, 1, "", "get_gemini"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "predict_proba"], [38, 2, 1, "", "score"], [38, 2, 1, "", "set_params"]], "gemclus.linear.RIM": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "fit"], [39, 2, 1, "", "fit_predict"], [39, 2, 1, "", "get_gemini"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "predict"], [39, 2, 1, "", "predict_proba"], [39, 2, 1, "", "score"], [39, 2, 1, "", "set_params"]], "gemclus.mlp": [[40, 1, 1, "", "MLPMMD"], [41, 1, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "fit"], [40, 2, 1, "", "fit_predict"], [40, 2, 1, "", "get_gemini"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "predict"], [40, 2, 1, "", "predict_proba"], [40, 2, 1, "", "score"], [40, 2, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "fit_predict"], [41, 2, 1, "", "get_gemini"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "predict"], [41, 2, 1, "", "predict_proba"], [41, 2, 1, "", "score"], [41, 2, 1, "", "set_params"]], "gemclus.nonparametric": [[42, 1, 1, "", "CategoricalMMD"], [43, 1, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "fit_predict"], [42, 2, 1, "", "get_gemini"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "predict"], [42, 2, 1, "", "predict_proba"], [42, 2, 1, "", "score"], [42, 2, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "fit_predict"], [43, 2, 1, "", "get_gemini"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "predict"], [43, 2, 1, "", "predict_proba"], [43, 2, 1, "", "score"], [43, 2, 1, "", "set_params"]], "gemclus.sparse": [[44, 1, 1, "", "SparseLinearMMD"], [45, 1, 1, "", "SparseMLPMMD"]], "gemclus.sparse.SparseLinearMMD": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "fit_predict"], [44, 2, 1, "", "get_gemini"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "get_selection"], [44, 2, 1, "", "path"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "predict_proba"], [44, 2, 1, "", "score"], [44, 2, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "fit_predict"], [45, 2, 1, "", "get_gemini"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "get_selection"], [45, 2, 1, "", "path"], [45, 2, 1, "", "predict"], [45, 2, 1, "", "predict_proba"], [45, 2, 1, "", "score"], [45, 2, 1, "", "set_params"]], "gemclus.tree": [[46, 1, 1, "", "Douglas"], [47, 1, 1, "", "Kauri"], [48, 0, 1, "", "print_kauri_tree"]], "gemclus.tree.Douglas": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "find_active_points"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "fit_predict"], [46, 2, 1, "", "get_gemini"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "predict_proba"], [46, 2, 1, "", "score"], [46, 2, 1, "", "set_params"]], "gemclus.tree.Kauri": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "fit_predict"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "score"], [47, 2, 1, "", "set_params"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"gemclu": [0, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "api": 0, "score": [0, 7, 18, 19], "gemini": [0, 7, 14, 18, 19, 32, 33, 34, 35, 36, 49, 50, 51], "cluster": [0, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 49, 50], "model": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 24], "dens": 0, "nonparametr": [0, 12, 42, 43], "spars": [0, 2, 3, 4, 44, 45], "tree": [0, 7, 22, 23, 24, 46, 47, 48], "constraint": [0, 9], "dataset": [0, 2, 3, 4, 5, 9, 11, 17, 19, 23, 24], "gener": [0, 7, 13, 14, 15], "featur": [1, 2, 3, 4, 5, 7, 50], "select": [1, 2, 3, 4, 5, 7, 50], "us": [2, 3, 4, 24, 26, 27, 29, 30, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "mmd": [2, 4, 14], "ovo": 2, "logist": [2, 3, 17], "regress": [2, 3, 17], "load": [2, 3, 4, 5, 9, 17, 19, 23, 24], "simpl": [2, 3, 4, 5, 17, 19], "synthet": [2, 3, 4, 5, 17], "train": [2, 3, 4, 5, 11, 12, 13, 15, 16, 17, 19], "path": [2, 4, 5], "result": [2, 4, 5, 9], "final": [2, 3, 4, 12, 13, 14, 15, 16, 17], "linear": [3, 5, 24, 37, 38, 39], "mi": [3, 32], "ova": 4, "mlp": [4, 14, 40, 41], "group": 5, "comput": [6, 10, 12, 15, 20, 21, 25], "time": [6, 10, 20, 21, 25], "exampl": [7, 13, 14, 26, 27, 29, 30, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51], "discrimin": [7, 49, 50, 51], "consensu": [7, 8, 9], "link": 9, "sampl": [9, 11, 12, 15, 16], "pair": 9, "multipl": 9, "build": [9, 23, 24], "matrix": 9, "creat": [9, 12, 14, 23, 24], "optimis": 9, "add": 9, "must": 9, "cannot": 9, "plot": [9, 14], "compar": 11, "circl": 11, "kernel": [11, 24], "chang": 11, "draw": [11, 12, 15, 16], "displai": 11, "predict": 11, "decis": [11, 13, 15], "boundari": [11, 13, 15], "graph": 12, "node": 12, "from": [12, 16], "gmm": [12, 16], "edg": 12, "pre": [12, 15], "specif": [12, 15], "metric": [12, 15], "between": [12, 15], "map": 13, "mixtur": 13, "gaussian": 13, "low": 13, "degre": 13, "student": 13, "distribut": [13, 51], "data": [13, 14, 27, 28, 29, 30, 31], "an": [14, 24], "introduc": 14, "fit": [14, 23], "two": [15, 19], "interlac": 15, "moon": 15, "non": 16, "parametr": 16, "rim": [17, 39], "ani": 19, "real": 19, "supervis": 19, "differenti": 23, "unsupervis": [23, 24], "dougla": [23, 46], "kmean": 24, "object": 24, "kauri": [24, 47], "first": 24, "second": 24, "addit": 24, "chi2": 24, "evalu": 24, "perform": 24, "visualis": 24, "structur": 24, "add_mlcl_constraint": 26, "celeux_on": 27, "celeux_two": 28, "draw_gmm": 29, "gstm": 30, "multivariate_student_t": 31, "mmdova": 33, "mmdovo": 34, "wassersteinova": 35, "wassersteinovo": 36, "linearmmd": 37, "linearwasserstein": 38, "mlpmmd": 40, "mlpwasserstein": 41, "categoricalmmd": 42, "categoricalwasserstein": 43, "sparselinearmmd": 44, "sparsemlpmmd": 45, "print_kauri_tre": 48, "welcom": 49, "document": 49, "content": [49, 51], "A": 49, "packag": [49, 51], "instal": 49, "offici": 49, "latest": 49, "version": 49, "refer": [49, 50], "acknowledg": 49, "quick": 50, "start": 50, "what": [50, 51], "i": 50, "do": 50, "user": 51, "guid": 51, "which": 51, "ar": 51, "implement": 51, "avail": 51, "basic": 51}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"GEMCLUS API": [[0, "gemclus-api"]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [7, "scoring-with-gemini"], [18, "scoring-with-gemini"], [19, "scoring-with-gemini"]], "Clustering models": [[0, "clustering-models"]], "Dense models": [[0, "dense-models"]], "Nonparametric models": [[0, "nonparametric-models"]], "Sparse models": [[0, "sparse-models"]], "Tree models": [[0, "tree-models"]], "Constraints": [[0, "constraints"]], "Dataset generation": [[0, "dataset-generation"]], "Feature selection": [[1, "feature-selection"], [7, "feature-selection"]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[2, "feature-selection-using-the-sparse-mmd-ovo-logistic-regression"]], "Load a simple synthetic dataset": [[2, "load-a-simple-synthetic-dataset"], [3, "load-a-simple-synthetic-dataset"], [4, "load-a-simple-synthetic-dataset"], [5, "load-a-simple-synthetic-dataset"], [17, "load-a-simple-synthetic-dataset"]], "Train the model": [[2, "train-the-model"], [3, "train-the-model"], [4, "train-the-model"], [5, "train-the-model"], [12, "train-the-model"], [15, "train-the-model"], [16, "train-the-model"], [17, "train-the-model"]], "Path results": [[2, "path-results"], [4, "path-results"], [5, "path-results"]], "Final Clustering": [[2, "final-clustering"], [3, "final-clustering"], [4, "final-clustering"], [12, "final-clustering"], [13, "final-clustering"], [15, "final-clustering"], [16, "final-clustering"], [17, "final-clustering"]], "Feature selection using the Sparse Linear MI (Logistic regression)": [[3, "feature-selection-using-the-sparse-linear-mi-logistic-regression"]], "Feature selection using the Sparse MMD OvA (MLP)": [[4, "feature-selection-using-the-sparse-mmd-ova-mlp"]], "Grouped Feature selection with a linear model": [[5, "grouped-feature-selection-with-a-linear-model"]], "Computation times": [[6, "computation-times"], [10, "computation-times"], [20, "computation-times"], [21, "computation-times"], [25, "computation-times"]], "General examples": [[7, "general-examples"]], "Discriminative clustering": [[7, "discriminative-clustering"]], "Consensus clustering": [[7, "consensus-clustering"], [8, "consensus-clustering"]], "Trees": [[7, "trees"], [22, "trees"]], "Consensus clustering with linking constraints on sample pairs": [[9, "consensus-clustering-with-linking-constraints-on-sample-pairs"]], "Load the dataset": [[9, "load-the-dataset"], [23, "load-the-dataset"], [24, "load-the-dataset"]], "Multiple model clustering": [[9, "multiple-model-clustering"]], "Build the consensus matrix": [[9, "build-the-consensus-matrix"]], "Create the consensus clustering model": [[9, "create-the-consensus-clustering-model"]], "Optimise the results with linking constraints": [[9, "optimise-the-results-with-linking-constraints"]], "Add must-link / cannot-link constraint": [[9, "add-must-link-cannot-link-constraint"]], "Plotting the consensus matrix": [[9, "plotting-the-consensus-matrix"]], "Comparative clustering of circles dataset with kernel change": [[11, "comparative-clustering-of-circles-dataset-with-kernel-change"]], "Draw samples for the circle dataset": [[11, "draw-samples-for-the-circle-dataset"]], "Training clustering models": [[11, "training-clustering-models"]], "Display predictions and decision boundaries": [[11, "display-predictions-and-decision-boundaries"]], "Graph node clustering with a nonparametric model": [[12, "graph-node-clustering-with-a-nonparametric-model"]], "Draw samples from a GMM": [[12, "draw-samples-from-a-gmm"], [16, "draw-samples-from-a-gmm"]], "Create the graph edges": [[12, "create-the-graph-edges"]], "Pre-compute a specific metric between samples": [[12, "pre-compute-a-specific-metric-between-samples"], [15, "pre-compute-a-specific-metric-between-samples"]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[13, "example-of-decision-boundary-map-for-a-mixture-of-gaussian-and-low-degree-student-distributions"]], "Generate the data": [[13, "generate-the-data"]], "Train the model for clustering": [[13, "train-the-model-for-clustering"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[14, "an-introducing-example-to-clustering-with-an-mlp-and-the-mmd-gemini"]], "Generate data": [[14, "generate-data"]], "Create the MLP clustering model and fit it": [[14, "create-the-mlp-clustering-model-and-fit-it"]], "Plot the final clustering": [[14, "plot-the-final-clustering"]], "Drawing a decision boundary between two interlacing moons": [[15, "drawing-a-decision-boundary-between-two-interlacing-moons"]], "Generate two interlacing moons": [[15, "generate-two-interlacing-moons"]], "Non parametric clustering": [[16, "non-parametric-clustering"]], "Simple logistic regression with RIM": [[17, "simple-logistic-regression-with-rim"]], "Scoring any model with GEMINI": [[19, "scoring-any-model-with-gemini"]], "Load a simple real dataset": [[19, "load-a-simple-real-dataset"]], "Train two supervised models": [[19, "train-two-supervised-models"]], "Supervised Scoring with GEMINI": [[19, "supervised-scoring-with-gemini"]], "Building a differentiable unsupervised tree: DOUGLAS": [[23, "building-a-differentiable-unsupervised-tree-douglas"]], "Create the douglas tree and fit it": [[23, "create-the-douglas-tree-and-fit-it"]], "Building an unsupervised tree with kernel-kmeans objective: KAURI": [[24, "building-an-unsupervised-tree-with-kernel-kmeans-objective-kauri"]], "Create a first tree using a linear kernel": [[24, "create-a-first-tree-using-a-linear-kernel"]], "Create a second tree using an additive chi2 kernel": [[24, "create-a-second-tree-using-an-additive-chi2-kernel"]], "Evaluate the performances of the model": [[24, "evaluate-the-performances-of-the-model"]], "Visualise the tree structure": [[24, "visualise-the-tree-structure"]], "gemclus.add_mlcl_constraint": [[26, "gemclus-add-mlcl-constraint"]], "Examples using gemclus.add_mlcl_constraint": [[26, "examples-using-gemclus-add-mlcl-constraint"]], "gemclus.data.celeux_one": [[27, "gemclus-data-celeux-one"]], "Examples using gemclus.data.celeux_one": [[27, "examples-using-gemclus-data-celeux-one"]], "gemclus.data.celeux_two": [[28, "gemclus-data-celeux-two"]], "gemclus.data.draw_gmm": [[29, "gemclus-data-draw-gmm"]], "Examples using gemclus.data.draw_gmm": [[29, "examples-using-gemclus-data-draw-gmm"]], "gemclus.data.gstm": [[30, "gemclus-data-gstm"]], "Examples using gemclus.data.gstm": [[30, "examples-using-gemclus-data-gstm"]], "gemclus.data.multivariate_student_t": [[31, "gemclus-data-multivariate-student-t"]], "gemclus.gemini.MI": [[32, "gemclus-gemini-mi"]], "gemclus.gemini.MMDOvA": [[33, "gemclus-gemini-mmdova"]], "Examples using gemclus.gemini.MMDOvA": [[33, "examples-using-gemclus-gemini-mmdova"]], "gemclus.gemini.MMDOvO": [[34, "gemclus-gemini-mmdovo"]], "gemclus.gemini.WassersteinOvA": [[35, "gemclus-gemini-wassersteinova"]], "Examples using gemclus.gemini.WassersteinOvA": [[35, "examples-using-gemclus-gemini-wassersteinova"]], "gemclus.gemini.WassersteinOvO": [[36, "gemclus-gemini-wassersteinovo"]], "gemclus.linear.LinearMMD": [[37, "gemclus-linear-linearmmd"]], "Examples using gemclus.linear.LinearMMD": [[37, "examples-using-gemclus-linear-linearmmd"]], "gemclus.linear.LinearWasserstein": [[38, "gemclus-linear-linearwasserstein"]], "Examples using gemclus.linear.LinearWasserstein": [[38, "examples-using-gemclus-linear-linearwasserstein"]], "gemclus.linear.RIM": [[39, "gemclus-linear-rim"]], "Examples using gemclus.linear.RIM": [[39, "examples-using-gemclus-linear-rim"]], "gemclus.mlp.MLPMMD": [[40, "gemclus-mlp-mlpmmd"]], "Examples using gemclus.mlp.MLPMMD": [[40, "examples-using-gemclus-mlp-mlpmmd"]], "gemclus.mlp.MLPWasserstein": [[41, "gemclus-mlp-mlpwasserstein"]], "Examples using gemclus.mlp.MLPWasserstein": [[41, "examples-using-gemclus-mlp-mlpwasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[42, "gemclus-nonparametric-categoricalmmd"]], "Examples using gemclus.nonparametric.CategoricalMMD": [[42, "examples-using-gemclus-nonparametric-categoricalmmd"]], "gemclus.nonparametric.CategoricalWasserstein": [[43, "gemclus-nonparametric-categoricalwasserstein"]], "Examples using gemclus.nonparametric.CategoricalWasserstein": [[43, "examples-using-gemclus-nonparametric-categoricalwasserstein"]], "gemclus.sparse.SparseLinearMMD": [[44, "gemclus-sparse-sparselinearmmd"]], "Examples using gemclus.sparse.SparseLinearMMD": [[44, "examples-using-gemclus-sparse-sparselinearmmd"]], "gemclus.sparse.SparseMLPMMD": [[45, "gemclus-sparse-sparsemlpmmd"]], "Examples using gemclus.sparse.SparseMLPMMD": [[45, "examples-using-gemclus-sparse-sparsemlpmmd"]], "gemclus.tree.Douglas": [[46, "gemclus-tree-douglas"]], "Examples using gemclus.tree.Douglas": [[46, "examples-using-gemclus-tree-douglas"]], "gemclus.tree.Kauri": [[47, "gemclus-tree-kauri"]], "Examples using gemclus.tree.Kauri": [[47, "examples-using-gemclus-tree-kauri"]], "gemclus.tree.print_kauri_tree": [[48, "gemclus-tree-print-kauri-tree"]], "Examples using gemclus.tree.print_kauri_tree": [[48, "examples-using-gemclus-tree-print-kauri-tree"]], "Welcome to GemClus documentation!": [[49, "welcome-to-gemclus-documentation"]], "Contents": [[49, "contents"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[49, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "Installation": [[49, "installation"]], "Official package": [[49, "official-package"]], "Latest version": [[49, "latest-version"]], "Reference": [[49, "reference"]], "Acknowledgements": [[49, "acknowledgements"]], "Quick start on gemclus": [[50, "quick-start-on-gemclus"]], "What is GEMINI": [[50, "what-is-gemini"]], "Doing discriminative clustering": [[50, "doing-discriminative-clustering"]], "Selecting features in clustering": [[50, "selecting-features-in-clustering"]], "References": [[50, "references"]], "User Guide": [[51, "user-guide"]], "Content of the package": [[51, "content-of-the-package"]], "Which GEMINIs are implemented": [[51, "which-geminis-are-implemented"]], "What discriminative distributions are available": [[51, "what-discriminative-distributions-are-available"]], "Basic examples": [[51, "basic-examples"]]}, "indexentries": {"add_mlcl_constraint() (in module gemclus)": [[26, "gemclus.add_mlcl_constraint"]], "celeux_one() (in module gemclus.data)": [[27, "gemclus.data.celeux_one"]], "celeux_two() (in module gemclus.data)": [[28, "gemclus.data.celeux_two"]], "draw_gmm() (in module gemclus.data)": [[29, "gemclus.data.draw_gmm"]], "gstm() (in module gemclus.data)": [[30, "gemclus.data.gstm"]], "multivariate_student_t() (in module gemclus.data)": [[31, "gemclus.data.multivariate_student_t"]], "mi (class in gemclus.gemini)": [[32, "gemclus.gemini.MI"]], "__init__() (gemclus.gemini.mi method)": [[32, "gemclus.gemini.MI.__init__"]], "compute_affinity() (gemclus.gemini.mi method)": [[32, "gemclus.gemini.MI.compute_affinity"]], "evaluate() (gemclus.gemini.mi method)": [[32, "gemclus.gemini.MI.evaluate"]], "mmdova (class in gemclus.gemini)": [[33, "gemclus.gemini.MMDOvA"]], "__init__() (gemclus.gemini.mmdova method)": [[33, "gemclus.gemini.MMDOvA.__init__"]], "compute_affinity() (gemclus.gemini.mmdova method)": [[33, "gemclus.gemini.MMDOvA.compute_affinity"]], "evaluate() (gemclus.gemini.mmdova method)": [[33, "gemclus.gemini.MMDOvA.evaluate"]], "mmdovo (class in gemclus.gemini)": [[34, "gemclus.gemini.MMDOvO"]], "__init__() (gemclus.gemini.mmdovo method)": [[34, "gemclus.gemini.MMDOvO.__init__"]], "compute_affinity() (gemclus.gemini.mmdovo method)": [[34, "gemclus.gemini.MMDOvO.compute_affinity"]], "evaluate() (gemclus.gemini.mmdovo method)": [[34, "gemclus.gemini.MMDOvO.evaluate"]], "wassersteinova (class in gemclus.gemini)": [[35, "gemclus.gemini.WassersteinOvA"]], "__init__() (gemclus.gemini.wassersteinova method)": [[35, "gemclus.gemini.WassersteinOvA.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinova method)": [[35, "gemclus.gemini.WassersteinOvA.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinova method)": [[35, "gemclus.gemini.WassersteinOvA.evaluate"]], "wassersteinovo (class in gemclus.gemini)": [[36, "gemclus.gemini.WassersteinOvO"]], "__init__() (gemclus.gemini.wassersteinovo method)": [[36, "gemclus.gemini.WassersteinOvO.__init__"]], "compute_affinity() (gemclus.gemini.wassersteinovo method)": [[36, "gemclus.gemini.WassersteinOvO.compute_affinity"]], "evaluate() (gemclus.gemini.wassersteinovo method)": [[36, "gemclus.gemini.WassersteinOvO.evaluate"]], "linearmmd (class in gemclus.linear)": [[37, "gemclus.linear.LinearMMD"]], "__init__() (gemclus.linear.linearmmd method)": [[37, "gemclus.linear.LinearMMD.__init__"]], "fit() (gemclus.linear.linearmmd method)": [[37, "gemclus.linear.LinearMMD.fit"]], "fit_predict() (gemclus.linear.linearmmd method)": [[37, "gemclus.linear.LinearMMD.fit_predict"]], "get_gemini() (gemclus.linear.linearmmd method)": [[37, "gemclus.linear.LinearMMD.get_gemini"]], "get_params() (gemclus.linear.linearmmd method)": [[37, "gemclus.linear.LinearMMD.get_params"]], "predict() (gemclus.linear.linearmmd method)": [[37, "gemclus.linear.LinearMMD.predict"]], "predict_proba() (gemclus.linear.linearmmd method)": [[37, "gemclus.linear.LinearMMD.predict_proba"]], "score() (gemclus.linear.linearmmd method)": [[37, "gemclus.linear.LinearMMD.score"]], "set_params() (gemclus.linear.linearmmd method)": [[37, "gemclus.linear.LinearMMD.set_params"]], "linearwasserstein (class in gemclus.linear)": [[38, "gemclus.linear.LinearWasserstein"]], "__init__() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.__init__"]], "fit() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.fit"]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.fit_predict"]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.get_gemini"]], "get_params() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.get_params"]], "predict() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.predict"]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.predict_proba"]], "score() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.score"]], "set_params() (gemclus.linear.linearwasserstein method)": [[38, "gemclus.linear.LinearWasserstein.set_params"]], "rim (class in gemclus.linear)": [[39, "gemclus.linear.RIM"]], "__init__() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.__init__"]], "fit() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.fit"]], "fit_predict() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.fit_predict"]], "get_gemini() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.get_gemini"]], "get_params() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.get_params"]], "predict() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.predict"]], "predict_proba() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.predict_proba"]], "score() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.score"]], "set_params() (gemclus.linear.rim method)": [[39, "gemclus.linear.RIM.set_params"]], "mlpmmd (class in gemclus.mlp)": [[40, "gemclus.mlp.MLPMMD"]], "__init__() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.__init__"]], "fit() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.fit"]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.fit_predict"]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.get_gemini"]], "get_params() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.get_params"]], "predict() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.predict"]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.predict_proba"]], "score() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.score"]], "set_params() (gemclus.mlp.mlpmmd method)": [[40, "gemclus.mlp.MLPMMD.set_params"]], "mlpwasserstein (class in gemclus.mlp)": [[41, "gemclus.mlp.MLPWasserstein"]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[41, "gemclus.mlp.MLPWasserstein.__init__"]], "fit() (gemclus.mlp.mlpwasserstein method)": [[41, "gemclus.mlp.MLPWasserstein.fit"]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[41, "gemclus.mlp.MLPWasserstein.fit_predict"]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[41, "gemclus.mlp.MLPWasserstein.get_gemini"]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[41, "gemclus.mlp.MLPWasserstein.get_params"]], "predict() (gemclus.mlp.mlpwasserstein method)": [[41, "gemclus.mlp.MLPWasserstein.predict"]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[41, "gemclus.mlp.MLPWasserstein.predict_proba"]], "score() (gemclus.mlp.mlpwasserstein method)": [[41, "gemclus.mlp.MLPWasserstein.score"]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[41, "gemclus.mlp.MLPWasserstein.set_params"]], "categoricalmmd (class in gemclus.nonparametric)": [[42, "gemclus.nonparametric.CategoricalMMD"]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[42, "gemclus.nonparametric.CategoricalMMD.__init__"]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[42, "gemclus.nonparametric.CategoricalMMD.fit"]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[42, "gemclus.nonparametric.CategoricalMMD.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[42, "gemclus.nonparametric.CategoricalMMD.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[42, "gemclus.nonparametric.CategoricalMMD.get_params"]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[42, "gemclus.nonparametric.CategoricalMMD.predict"]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[42, "gemclus.nonparametric.CategoricalMMD.predict_proba"]], "score() (gemclus.nonparametric.categoricalmmd method)": [[42, "gemclus.nonparametric.CategoricalMMD.score"]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[42, "gemclus.nonparametric.CategoricalMMD.set_params"]], "categoricalwasserstein (class in gemclus.nonparametric)": [[43, "gemclus.nonparametric.CategoricalWasserstein"]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[43, "gemclus.nonparametric.CategoricalWasserstein.__init__"]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[43, "gemclus.nonparametric.CategoricalWasserstein.fit"]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[43, "gemclus.nonparametric.CategoricalWasserstein.fit_predict"]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[43, "gemclus.nonparametric.CategoricalWasserstein.get_gemini"]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[43, "gemclus.nonparametric.CategoricalWasserstein.get_params"]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[43, "gemclus.nonparametric.CategoricalWasserstein.predict"]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[43, "gemclus.nonparametric.CategoricalWasserstein.predict_proba"]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[43, "gemclus.nonparametric.CategoricalWasserstein.score"]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[43, "gemclus.nonparametric.CategoricalWasserstein.set_params"]], "sparselinearmmd (class in gemclus.sparse)": [[44, "gemclus.sparse.SparseLinearMMD"]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[44, "gemclus.sparse.SparseLinearMMD.__init__"]], "fit() (gemclus.sparse.sparselinearmmd method)": [[44, "gemclus.sparse.SparseLinearMMD.fit"]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[44, "gemclus.sparse.SparseLinearMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[44, "gemclus.sparse.SparseLinearMMD.get_gemini"]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[44, "gemclus.sparse.SparseLinearMMD.get_params"]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[44, "gemclus.sparse.SparseLinearMMD.get_selection"]], "path() (gemclus.sparse.sparselinearmmd method)": [[44, "gemclus.sparse.SparseLinearMMD.path"]], "predict() (gemclus.sparse.sparselinearmmd method)": [[44, "gemclus.sparse.SparseLinearMMD.predict"]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[44, "gemclus.sparse.SparseLinearMMD.predict_proba"]], "score() (gemclus.sparse.sparselinearmmd method)": [[44, "gemclus.sparse.SparseLinearMMD.score"]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[44, "gemclus.sparse.SparseLinearMMD.set_params"]], "sparsemlpmmd (class in gemclus.sparse)": [[45, "gemclus.sparse.SparseMLPMMD"]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[45, "gemclus.sparse.SparseMLPMMD.__init__"]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[45, "gemclus.sparse.SparseMLPMMD.fit"]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[45, "gemclus.sparse.SparseMLPMMD.fit_predict"]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[45, "gemclus.sparse.SparseMLPMMD.get_gemini"]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[45, "gemclus.sparse.SparseMLPMMD.get_params"]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[45, "gemclus.sparse.SparseMLPMMD.get_selection"]], "path() (gemclus.sparse.sparsemlpmmd method)": [[45, "gemclus.sparse.SparseMLPMMD.path"]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[45, "gemclus.sparse.SparseMLPMMD.predict"]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[45, "gemclus.sparse.SparseMLPMMD.predict_proba"]], "score() (gemclus.sparse.sparsemlpmmd method)": [[45, "gemclus.sparse.SparseMLPMMD.score"]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[45, "gemclus.sparse.SparseMLPMMD.set_params"]], "douglas (class in gemclus.tree)": [[46, "gemclus.tree.Douglas"]], "__init__() (gemclus.tree.douglas method)": [[46, "gemclus.tree.Douglas.__init__"]], "find_active_points() (gemclus.tree.douglas method)": [[46, "gemclus.tree.Douglas.find_active_points"]], "fit() (gemclus.tree.douglas method)": [[46, "gemclus.tree.Douglas.fit"]], "fit_predict() (gemclus.tree.douglas method)": [[46, "gemclus.tree.Douglas.fit_predict"]], "get_gemini() (gemclus.tree.douglas method)": [[46, "gemclus.tree.Douglas.get_gemini"]], "get_params() (gemclus.tree.douglas method)": [[46, "gemclus.tree.Douglas.get_params"]], "predict() (gemclus.tree.douglas method)": [[46, "gemclus.tree.Douglas.predict"]], "predict_proba() (gemclus.tree.douglas method)": [[46, "gemclus.tree.Douglas.predict_proba"]], "score() (gemclus.tree.douglas method)": [[46, "gemclus.tree.Douglas.score"]], "set_params() (gemclus.tree.douglas method)": [[46, "gemclus.tree.Douglas.set_params"]], "kauri (class in gemclus.tree)": [[47, "gemclus.tree.Kauri"]], "__init__() (gemclus.tree.kauri method)": [[47, "gemclus.tree.Kauri.__init__"]], "fit() (gemclus.tree.kauri method)": [[47, "gemclus.tree.Kauri.fit"]], "fit_predict() (gemclus.tree.kauri method)": [[47, "gemclus.tree.Kauri.fit_predict"]], "get_params() (gemclus.tree.kauri method)": [[47, "gemclus.tree.Kauri.get_params"]], "predict() (gemclus.tree.kauri method)": [[47, "gemclus.tree.Kauri.predict"]], "score() (gemclus.tree.kauri method)": [[47, "gemclus.tree.Kauri.score"]], "set_params() (gemclus.tree.kauri method)": [[47, "gemclus.tree.Kauri.set_params"]], "print_kauri_tree() (in module gemclus.tree)": [[48, "gemclus.tree.print_kauri_tree"]]}})