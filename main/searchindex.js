Search.setIndex({"alltitles": {"0.0.2": [[60, "id5"]], "0.1.0": [[60, "id4"]], "0.1.1": [[60, "id3"]], "0.2.0": [[60, "id2"]], "1.0.0": [[60, "id1"]], "1.1.0 (Latest)": [[60, "latest"]], "A summary of what is implemented": [[64, "a-summary-of-what-is-implemented"]], "About the package": [[61, "about-the-package"]], "Acknowledgements": [[61, "acknowledgements"]], "Add must-link / cannot-link constraint": [[19, "add-must-link-cannot-link-constraint"]], "An introducing example to clustering with an MLP and the MMD GEMINI": [[5, null]], "Basic examples": [[64, "basic-examples"]], "Build the consensus matrix": [[19, "build-the-consensus-matrix"]], "Building a differentiable unsupervised tree: DOUGLAS": [[24, null]], "Building an unsupervised tree with kernel-kmeans objective: KAURI": [[25, null]], "Choosing a model": [[64, "choosing-a-model"]], "Clustering circles with kernel RIM": [[7, null]], "Clustering models": [[0, "clustering-models"]], "Clustering with the squared-loss mutual information": [[11, null]], "Comparative clustering of circles dataset with kernel change": [[1, null]], "Computation times": [[12, null], [17, null], [20, null], [22, null], [23, null], [26, null], [63, null]], "Consensus clustering": [[18, "consensus-clustering"]], "Consensus clustering with linking constraints on sample pairs": [[19, null]], "Constraints": [[0, "constraints"]], "Content of the package": [[64, "content-of-the-package"]], "Contents": [[61, "contents"]], "Contributing": [[61, "contributing"]], "Create a first tree using a linear kernel": [[25, "create-a-first-tree-using-a-linear-kernel"]], "Create a second tree using an additive chi2 kernel": [[25, "create-a-second-tree-using-an-additive-chi2-kernel"]], "Create the MLP clustering model and fit it": [[5, "create-the-mlp-clustering-model-and-fit-it"]], "Create the consensus clustering model": [[19, "create-the-consensus-clustering-model"]], "Create the custom model": [[2, "create-the-custom-model"]], "Create the douglas tree and fit it": [[24, "create-the-douglas-tree-and-fit-it"]], "Create the graph edges": [[3, "create-the-graph-edges"]], "Dataset": [[64, "id33"]], "Dataset generation": [[0, "dataset-generation"]], "Definition": [[64, "definition"]], "Dense models": [[0, "dense-models"]], "Discriminative clustering": [[64, "discriminative-clustering"]], "Display predictions and decision boundaries": [[1, "display-predictions-and-decision-boundaries"]], "Draw samples for the circle dataset": [[1, "draw-samples-for-the-circle-dataset"], [7, "draw-samples-for-the-circle-dataset"]], "Draw samples from a GMM": [[3, "draw-samples-from-a-gmm"], [9, "draw-samples-from-a-gmm"]], "Draw samples from a circular dataset": [[6, "draw-samples-from-a-circular-dataset"]], "Drawing a decision boundary between two interlacing moons": [[8, null]], "Evaluate the performances of the model": [[25, "evaluate-the-performances-of-the-model"]], "Example gallery": [[18, null]], "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions": [[4, null]], "Examples using gemclus.DiscriminativeModel": [[27, "examples-using-gemclus-discriminativemodel"]], "Examples using gemclus.add_mlcl_constraint": [[28, "examples-using-gemclus-add-mlcl-constraint"]], "Examples using gemclus.data.celeux_one": [[29, "examples-using-gemclus-data-celeux-one"]], "Examples using gemclus.data.draw_gmm": [[31, "examples-using-gemclus-data-draw-gmm"]], "Examples using gemclus.data.gstm": [[32, "examples-using-gemclus-data-gstm"]], "Examples using gemclus.gemini.ChiSquareGEMINI": [[34, "examples-using-gemclus-gemini-chisquaregemini"]], "Examples using gemclus.gemini.WassersteinGEMINI": [[40, "examples-using-gemclus-gemini-wassersteingemini"]], "Examples using gemclus.linear.KernelRIM": [[41, "examples-using-gemclus-linear-kernelrim"]], "Examples using gemclus.linear.LinearMMD": [[42, "examples-using-gemclus-linear-linearmmd"]], "Examples using gemclus.linear.LinearModel": [[43, "examples-using-gemclus-linear-linearmodel"]], "Examples using gemclus.linear.LinearWasserstein": [[44, "examples-using-gemclus-linear-linearwasserstein"]], "Examples using gemclus.linear.RIM": [[45, "examples-using-gemclus-linear-rim"]], "Examples using gemclus.mlp.MLPMMD": [[46, "examples-using-gemclus-mlp-mlpmmd"]], "Examples using gemclus.mlp.MLPModel": [[47, "examples-using-gemclus-mlp-mlpmodel"]], "Examples using gemclus.mlp.MLPWasserstein": [[48, "examples-using-gemclus-mlp-mlpwasserstein"]], "Examples using gemclus.nonparametric.CategoricalMMD": [[49, "examples-using-gemclus-nonparametric-categoricalmmd"]], "Examples using gemclus.nonparametric.CategoricalModel": [[50, "examples-using-gemclus-nonparametric-categoricalmodel"]], "Examples using gemclus.nonparametric.CategoricalWasserstein": [[51, "examples-using-gemclus-nonparametric-categoricalwasserstein"]], "Examples using gemclus.sparse.SparseLinearMI": [[52, "examples-using-gemclus-sparse-sparselinearmi"]], "Examples using gemclus.sparse.SparseLinearMMD": [[53, "examples-using-gemclus-sparse-sparselinearmmd"]], "Examples using gemclus.sparse.SparseLinearModel": [[54, "examples-using-gemclus-sparse-sparselinearmodel"]], "Examples using gemclus.sparse.SparseMLPMMD": [[55, "examples-using-gemclus-sparse-sparsemlpmmd"]], "Examples using gemclus.sparse.SparseMLPModel": [[56, "examples-using-gemclus-sparse-sparsemlpmodel"]], "Examples using gemclus.tree.Douglas": [[57, "examples-using-gemclus-tree-douglas"]], "Examples using gemclus.tree.Kauri": [[58, "examples-using-gemclus-tree-kauri"]], "Examples using gemclus.tree.print_kauri_tree": [[59, "examples-using-gemclus-tree-print-kauri-tree"]], "Extending / Regularising models": [[64, "extending-regularising-models"]], "Extending GemClus to build your own discriminative clustering model": [[2, null]], "Feature selection": [[18, "feature-selection"]], "Feature selection using the Sparse Linear MI (Logistic regression)": [[14, null]], "Feature selection using the Sparse MMD OvA (MLP)": [[15, null]], "Feature selection using the Sparse MMD OvO (Logistic regression)": [[13, null]], "Final Clustering": [[3, "final-clustering"], [4, "final-clustering"], [6, "final-clustering"], [8, "final-clustering"], [9, "final-clustering"], [10, "final-clustering"], [13, "final-clustering"], [14, "final-clustering"], [15, "final-clustering"]], "GEMCLUS - A package for discriminative clustering using GEMINI": [[61, "gemclus-a-package-for-discriminative-clustering-using-gemini"]], "GemClus API": [[0, null]], "General examples": [[18, "general-examples"]], "Generate data": [[5, "generate-data"]], "Generate the data": [[4, "generate-the-data"]], "Generate two interlacing moons": [[8, "generate-two-interlacing-moons"]], "Generic models": [[0, "generic-models"]], "Graph node clustering with a nonparametric model": [[3, null]], "Grouped Feature selection with a linear model": [[16, null]], "History of changes": [[60, "history-of-changes"]], "Installation": [[61, "installation"]], "Kernel KMeans clustering with GEMINI": [[6, null]], "Latest version": [[61, "latest-version"]], "Load a simple real dataset": [[21, "load-a-simple-real-dataset"]], "Load a simple synthetic dataset": [[10, "load-a-simple-synthetic-dataset"], [13, "load-a-simple-synthetic-dataset"], [14, "load-a-simple-synthetic-dataset"], [15, "load-a-simple-synthetic-dataset"], [16, "load-a-simple-synthetic-dataset"]], "Load the dataset": [[19, "load-the-dataset"], [24, "load-the-dataset"], [25, "load-the-dataset"]], "Models": [[64, "id31"]], "Multiple model clustering": [[19, "multiple-model-clustering"]], "Non parametric clustering": [[9, null]], "Nonparametric models": [[0, "nonparametric-models"]], "Objective functions": [[64, "id32"]], "Official package": [[61, "official-package"]], "Optimise the results with linking constraints": [[19, "optimise-the-results-with-linking-constraints"]], "Path results": [[13, "path-results"], [15, "path-results"], [16, "path-results"]], "Plot the final clustering": [[5, "plot-the-final-clustering"]], "Plotting the consensus matrix": [[19, "plotting-the-consensus-matrix"]], "Pre-compute a specific metric between samples": [[3, "pre-compute-a-specific-metric-between-samples"], [8, "pre-compute-a-specific-metric-between-samples"]], "Quick start on GemClus": [[62, null]], "RELEASES": [[60, null]], "References": [[61, "references"], [64, "references"]], "Related paper": [[61, "related-paper"]], "Scope of GemClus": [[61, "scope-of-gemclus"]], "Scoring any model with GEMINI": [[21, null]], "Scoring with GEMINI": [[0, "scoring-with-gemini"], [18, "scoring-with-gemini"], [21, "scoring-with-gemini"]], "Show predictions on similar samples": [[7, "show-predictions-on-similar-samples"]], "Simple logistic regression with RIM": [[10, null]], "Sparse models": [[0, "sparse-models"]], "Supervised Scoring with GEMINI": [[21, "supervised-scoring-with-gemini"]], "Test the fitting procedure and plot the clustering results": [[2, "test-the-fitting-procedure-and-plot-the-clustering-results"]], "The GEMINI approach": [[64, "the-gemini-approach"]], "Train the model": [[3, "train-the-model"], [6, "train-the-model"], [8, "train-the-model"], [9, "train-the-model"], [10, "train-the-model"], [13, "train-the-model"], [14, "train-the-model"], [15, "train-the-model"], [16, "train-the-model"]], "Train the model for clustering": [[4, "train-the-model-for-clustering"]], "Train two supervised models": [[21, "train-two-supervised-models"]], "Training clustering model": [[7, "training-clustering-model"]], "Training clustering models": [[1, "training-clustering-models"]], "Tree models": [[0, "tree-models"]], "Trees": [[18, "trees"]], "User Guide": [[64, null]], "Visualise the tree structure": [[25, "visualise-the-tree-structure"]], "Welcome to GemClus documentation!": [[61, null]], "What discriminative distributions are available": [[64, "what-discriminative-distributions-are-available"]], "What is GemClus?": [[61, "what-is-gemclus"]], "Which GEMINIs are implemented": [[64, "which-geminis-are-implemented"]], "Why GemClus?": [[61, "why-gemclus"]], "gemclus.DiscriminativeModel": [[27, null]], "gemclus.add_mlcl_constraint": [[28, null]], "gemclus.data.celeux_one": [[29, null]], "gemclus.data.celeux_two": [[30, null]], "gemclus.data.draw_gmm": [[31, null]], "gemclus.data.gstm": [[32, null]], "gemclus.data.multivariate_student_t": [[33, null]], "gemclus.gemini.ChiSquareGEMINI": [[34, null]], "gemclus.gemini.HellingerGEMINI": [[35, null]], "gemclus.gemini.KLGEMINI": [[36, null]], "gemclus.gemini.MI": [[37, null]], "gemclus.gemini.MMDGEMINI": [[38, null]], "gemclus.gemini.TVGEMINI": [[39, null]], "gemclus.gemini.WassersteinGEMINI": [[40, null]], "gemclus.linear.KernelRIM": [[41, null]], "gemclus.linear.LinearMMD": [[42, null]], "gemclus.linear.LinearModel": [[43, null]], "gemclus.linear.LinearWasserstein": [[44, null]], "gemclus.linear.RIM": [[45, null]], "gemclus.mlp.MLPMMD": [[46, null]], "gemclus.mlp.MLPModel": [[47, null]], "gemclus.mlp.MLPWasserstein": [[48, null]], "gemclus.nonparametric.CategoricalMMD": [[49, null]], "gemclus.nonparametric.CategoricalModel": [[50, null]], "gemclus.nonparametric.CategoricalWasserstein": [[51, null]], "gemclus.sparse.SparseLinearMI": [[52, null]], "gemclus.sparse.SparseLinearMMD": [[53, null]], "gemclus.sparse.SparseLinearModel": [[54, null]], "gemclus.sparse.SparseMLPMMD": [[55, null]], "gemclus.sparse.SparseMLPModel": [[56, null]], "gemclus.tree.Douglas": [[57, null]], "gemclus.tree.Kauri": [[58, null]], "gemclus.tree.print_kauri_tree": [[59, null]]}, "docnames": ["api", "auto_examples/_general/plot_circles", "auto_examples/_general/plot_custom_model", "auto_examples/_general/plot_graph_node_clustering", "auto_examples/_general/plot_gstm", "auto_examples/_general/plot_intro_mlp_mmd", "auto_examples/_general/plot_kernel_kmeans", "auto_examples/_general/plot_kernel_rim", "auto_examples/_general/plot_moon_clustering", "auto_examples/_general/plot_nonparametric_clustering", "auto_examples/_general/plot_rim", "auto_examples/_general/plot_squared_loss_mi", "auto_examples/_general/sg_execution_times", "auto_examples/feature_selection/plot_feature_selection_linear", "auto_examples/feature_selection/plot_feature_selection_logreg_mi", "auto_examples/feature_selection/plot_feature_selection_mlp", "auto_examples/feature_selection/plot_grouped_selection", "auto_examples/feature_selection/sg_execution_times", "auto_examples/index", "auto_examples/mlcl/plot_semi_supervised_consensus", "auto_examples/mlcl/sg_execution_times", "auto_examples/scoring/plot_gemini_scoring", "auto_examples/scoring/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/trees/plot_douglas_example", "auto_examples/trees/plot_kauri_example", "auto_examples/trees/sg_execution_times", "generated/gemclus.DiscriminativeModel", "generated/gemclus.add_mlcl_constraint", "generated/gemclus.data.celeux_one", "generated/gemclus.data.celeux_two", "generated/gemclus.data.draw_gmm", "generated/gemclus.data.gstm", "generated/gemclus.data.multivariate_student_t", "generated/gemclus.gemini.ChiSquareGEMINI", "generated/gemclus.gemini.HellingerGEMINI", "generated/gemclus.gemini.KLGEMINI", "generated/gemclus.gemini.MI", "generated/gemclus.gemini.MMDGEMINI", "generated/gemclus.gemini.TVGEMINI", "generated/gemclus.gemini.WassersteinGEMINI", "generated/gemclus.linear.KernelRIM", "generated/gemclus.linear.LinearMMD", "generated/gemclus.linear.LinearModel", "generated/gemclus.linear.LinearWasserstein", "generated/gemclus.linear.RIM", "generated/gemclus.mlp.MLPMMD", "generated/gemclus.mlp.MLPModel", "generated/gemclus.mlp.MLPWasserstein", "generated/gemclus.nonparametric.CategoricalMMD", "generated/gemclus.nonparametric.CategoricalModel", "generated/gemclus.nonparametric.CategoricalWasserstein", "generated/gemclus.sparse.SparseLinearMI", "generated/gemclus.sparse.SparseLinearMMD", "generated/gemclus.sparse.SparseLinearModel", "generated/gemclus.sparse.SparseMLPMMD", "generated/gemclus.sparse.SparseMLPModel", "generated/gemclus.tree.Douglas", "generated/gemclus.tree.Kauri", "generated/gemclus.tree.print_kauri_tree", "history", "index", "quick_start", "sg_execution_times", "user_guide"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["api.rst", "auto_examples/_general/plot_circles.rst", "auto_examples/_general/plot_custom_model.rst", "auto_examples/_general/plot_graph_node_clustering.rst", "auto_examples/_general/plot_gstm.rst", "auto_examples/_general/plot_intro_mlp_mmd.rst", "auto_examples/_general/plot_kernel_kmeans.rst", "auto_examples/_general/plot_kernel_rim.rst", "auto_examples/_general/plot_moon_clustering.rst", "auto_examples/_general/plot_nonparametric_clustering.rst", "auto_examples/_general/plot_rim.rst", "auto_examples/_general/plot_squared_loss_mi.rst", "auto_examples/_general/sg_execution_times.rst", "auto_examples/feature_selection/plot_feature_selection_linear.rst", "auto_examples/feature_selection/plot_feature_selection_logreg_mi.rst", "auto_examples/feature_selection/plot_feature_selection_mlp.rst", "auto_examples/feature_selection/plot_grouped_selection.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/mlcl/plot_semi_supervised_consensus.rst", "auto_examples/mlcl/sg_execution_times.rst", "auto_examples/scoring/plot_gemini_scoring.rst", "auto_examples/scoring/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/trees/plot_douglas_example.rst", "auto_examples/trees/plot_kauri_example.rst", "auto_examples/trees/sg_execution_times.rst", "generated/gemclus.DiscriminativeModel.rst", "generated/gemclus.add_mlcl_constraint.rst", "generated/gemclus.data.celeux_one.rst", "generated/gemclus.data.celeux_two.rst", "generated/gemclus.data.draw_gmm.rst", "generated/gemclus.data.gstm.rst", "generated/gemclus.data.multivariate_student_t.rst", "generated/gemclus.gemini.ChiSquareGEMINI.rst", "generated/gemclus.gemini.HellingerGEMINI.rst", "generated/gemclus.gemini.KLGEMINI.rst", "generated/gemclus.gemini.MI.rst", "generated/gemclus.gemini.MMDGEMINI.rst", "generated/gemclus.gemini.TVGEMINI.rst", "generated/gemclus.gemini.WassersteinGEMINI.rst", "generated/gemclus.linear.KernelRIM.rst", "generated/gemclus.linear.LinearMMD.rst", "generated/gemclus.linear.LinearModel.rst", "generated/gemclus.linear.LinearWasserstein.rst", "generated/gemclus.linear.RIM.rst", "generated/gemclus.mlp.MLPMMD.rst", "generated/gemclus.mlp.MLPModel.rst", "generated/gemclus.mlp.MLPWasserstein.rst", "generated/gemclus.nonparametric.CategoricalMMD.rst", "generated/gemclus.nonparametric.CategoricalModel.rst", "generated/gemclus.nonparametric.CategoricalWasserstein.rst", "generated/gemclus.sparse.SparseLinearMI.rst", "generated/gemclus.sparse.SparseLinearMMD.rst", "generated/gemclus.sparse.SparseLinearModel.rst", "generated/gemclus.sparse.SparseMLPMMD.rst", "generated/gemclus.sparse.SparseMLPModel.rst", "generated/gemclus.tree.Douglas.rst", "generated/gemclus.tree.Kauri.rst", "generated/gemclus.tree.print_kauri_tree.rst", "history.rst", "index.rst", "quick_start.rst", "sg_execution_times.rst", "user_guide.rst"], "indexentries": {"__init__() (gemclus.discriminativemodel method)": [[27, "gemclus.DiscriminativeModel.__init__", false]], "__init__() (gemclus.gemini.chisquaregemini method)": [[34, "gemclus.gemini.ChiSquareGEMINI.__init__", false]], "__init__() (gemclus.gemini.hellingergemini method)": [[35, "gemclus.gemini.HellingerGEMINI.__init__", false]], "__init__() (gemclus.gemini.klgemini method)": [[36, "gemclus.gemini.KLGEMINI.__init__", false]], "__init__() (gemclus.gemini.mi method)": [[37, "gemclus.gemini.MI.__init__", false]], "__init__() (gemclus.gemini.mmdgemini method)": [[38, "gemclus.gemini.MMDGEMINI.__init__", false]], "__init__() (gemclus.gemini.tvgemini method)": [[39, "gemclus.gemini.TVGEMINI.__init__", false]], "__init__() (gemclus.gemini.wassersteingemini method)": [[40, "gemclus.gemini.WassersteinGEMINI.__init__", false]], "__init__() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.__init__", false]], "__init__() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.__init__", false]], "__init__() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.__init__", false]], "__init__() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.__init__", false]], "__init__() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.__init__", false]], "__init__() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.__init__", false]], "__init__() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.__init__", false]], "__init__() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.__init__", false]], "__init__() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.__init__", false]], "__init__() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.__init__", false]], "__init__() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.__init__", false]], "__init__() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.__init__", false]], "__init__() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.__init__", false]], "__init__() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.__init__", false]], "__init__() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.__init__", false]], "__init__() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.__init__", false]], "__init__() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.__init__", false]], "__init__() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.__init__", false]], "add_mlcl_constraint() (in module gemclus)": [[28, "gemclus.add_mlcl_constraint", false]], "categoricalmmd (class in gemclus.nonparametric)": [[49, "gemclus.nonparametric.CategoricalMMD", false]], "categoricalmodel (class in gemclus.nonparametric)": [[50, "gemclus.nonparametric.CategoricalModel", false]], "categoricalwasserstein (class in gemclus.nonparametric)": [[51, "gemclus.nonparametric.CategoricalWasserstein", false]], "celeux_one() (in module gemclus.data)": [[29, "gemclus.data.celeux_one", false]], "celeux_two() (in module gemclus.data)": [[30, "gemclus.data.celeux_two", false]], "chisquaregemini (class in gemclus.gemini)": [[34, "gemclus.gemini.ChiSquareGEMINI", false]], "compute_affinity() (gemclus.gemini.chisquaregemini method)": [[34, "gemclus.gemini.ChiSquareGEMINI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.hellingergemini method)": [[35, "gemclus.gemini.HellingerGEMINI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.klgemini method)": [[36, "gemclus.gemini.KLGEMINI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.mi method)": [[37, "gemclus.gemini.MI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.mmdgemini method)": [[38, "gemclus.gemini.MMDGEMINI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.tvgemini method)": [[39, "gemclus.gemini.TVGEMINI.compute_affinity", false]], "compute_affinity() (gemclus.gemini.wassersteingemini method)": [[40, "gemclus.gemini.WassersteinGEMINI.compute_affinity", false]], "discriminativemodel (class in gemclus)": [[27, "gemclus.DiscriminativeModel", false]], "douglas (class in gemclus.tree)": [[57, "gemclus.tree.Douglas", false]], "draw_gmm() (in module gemclus.data)": [[31, "gemclus.data.draw_gmm", false]], "evaluate() (gemclus.gemini.chisquaregemini method)": [[34, "gemclus.gemini.ChiSquareGEMINI.evaluate", false]], "evaluate() (gemclus.gemini.hellingergemini method)": [[35, "gemclus.gemini.HellingerGEMINI.evaluate", false]], "evaluate() (gemclus.gemini.klgemini method)": [[36, "gemclus.gemini.KLGEMINI.evaluate", false]], "evaluate() (gemclus.gemini.mi method)": [[37, "gemclus.gemini.MI.evaluate", false]], "evaluate() (gemclus.gemini.mmdgemini method)": [[38, "gemclus.gemini.MMDGEMINI.evaluate", false]], "evaluate() (gemclus.gemini.tvgemini method)": [[39, "gemclus.gemini.TVGEMINI.evaluate", false]], "evaluate() (gemclus.gemini.wassersteingemini method)": [[40, "gemclus.gemini.WassersteinGEMINI.evaluate", false]], "find_active_points() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.find_active_points", false]], "fit() (gemclus.discriminativemodel method)": [[27, "gemclus.DiscriminativeModel.fit", false]], "fit() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.fit", false]], "fit() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.fit", false]], "fit() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.fit", false]], "fit() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.fit", false]], "fit() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.fit", false]], "fit() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.fit", false]], "fit() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.fit", false]], "fit() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.fit", false]], "fit() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.fit", false]], "fit() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.fit", false]], "fit() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.fit", false]], "fit() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.fit", false]], "fit() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.fit", false]], "fit() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.fit", false]], "fit() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.fit", false]], "fit() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.fit", false]], "fit() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.fit", false]], "fit() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.fit", false]], "fit_predict() (gemclus.discriminativemodel method)": [[27, "gemclus.DiscriminativeModel.fit_predict", false]], "fit_predict() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.fit_predict", false]], "fit_predict() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.fit_predict", false]], "fit_predict() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.fit_predict", false]], "fit_predict() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.fit_predict", false]], "fit_predict() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.fit_predict", false]], "fit_predict() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.fit_predict", false]], "fit_predict() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.fit_predict", false]], "fit_predict() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.fit_predict", false]], "fit_predict() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.fit_predict", false]], "fit_predict() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.fit_predict", false]], "fit_predict() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.fit_predict", false]], "fit_predict() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.fit_predict", false]], "fit_predict() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.fit_predict", false]], "fit_predict() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.fit_predict", false]], "fit_predict() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.fit_predict", false]], "fit_predict() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.fit_predict", false]], "fit_predict() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.fit_predict", false]], "fit_predict() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.fit_predict", false]], "get_gemini() (gemclus.discriminativemodel method)": [[27, "gemclus.DiscriminativeModel.get_gemini", false]], "get_gemini() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.get_gemini", false]], "get_gemini() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.get_gemini", false]], "get_gemini() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.get_gemini", false]], "get_gemini() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.get_gemini", false]], "get_gemini() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.get_gemini", false]], "get_gemini() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.get_gemini", false]], "get_gemini() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.get_gemini", false]], "get_gemini() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.get_gemini", false]], "get_gemini() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.get_gemini", false]], "get_gemini() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.get_gemini", false]], "get_gemini() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.get_gemini", false]], "get_gemini() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.get_gemini", false]], "get_gemini() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.get_gemini", false]], "get_gemini() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.get_gemini", false]], "get_gemini() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.get_gemini", false]], "get_gemini() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.get_gemini", false]], "get_gemini() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.get_gemini", false]], "get_metadata_routing() (gemclus.discriminativemodel method)": [[27, "gemclus.DiscriminativeModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.get_metadata_routing", false]], "get_metadata_routing() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.get_metadata_routing", false]], "get_metadata_routing() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.get_metadata_routing", false]], "get_metadata_routing() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.get_metadata_routing", false]], "get_metadata_routing() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.get_metadata_routing", false]], "get_metadata_routing() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.get_metadata_routing", false]], "get_metadata_routing() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.get_metadata_routing", false]], "get_metadata_routing() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.get_metadata_routing", false]], "get_metadata_routing() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.get_metadata_routing", false]], "get_metadata_routing() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.get_metadata_routing", false]], "get_metadata_routing() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.get_metadata_routing", false]], "get_metadata_routing() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.get_metadata_routing", false]], "get_metadata_routing() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.get_metadata_routing", false]], "get_metadata_routing() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.get_metadata_routing", false]], "get_params() (gemclus.discriminativemodel method)": [[27, "gemclus.DiscriminativeModel.get_params", false]], "get_params() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.get_params", false]], "get_params() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.get_params", false]], "get_params() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.get_params", false]], "get_params() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.get_params", false]], "get_params() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.get_params", false]], "get_params() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.get_params", false]], "get_params() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.get_params", false]], "get_params() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.get_params", false]], "get_params() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.get_params", false]], "get_params() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.get_params", false]], "get_params() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.get_params", false]], "get_params() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.get_params", false]], "get_params() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.get_params", false]], "get_params() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.get_params", false]], "get_params() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.get_params", false]], "get_params() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.get_params", false]], "get_params() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.get_params", false]], "get_params() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.get_params", false]], "get_selection() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.get_selection", false]], "get_selection() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.get_selection", false]], "get_selection() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.get_selection", false]], "get_selection() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.get_selection", false]], "get_selection() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.get_selection", false]], "gstm() (in module gemclus.data)": [[32, "gemclus.data.gstm", false]], "hellingergemini (class in gemclus.gemini)": [[35, "gemclus.gemini.HellingerGEMINI", false]], "kauri (class in gemclus.tree)": [[58, "gemclus.tree.Kauri", false]], "kernelrim (class in gemclus.linear)": [[41, "gemclus.linear.KernelRIM", false]], "klgemini (class in gemclus.gemini)": [[36, "gemclus.gemini.KLGEMINI", false]], "linearmmd (class in gemclus.linear)": [[42, "gemclus.linear.LinearMMD", false]], "linearmodel (class in gemclus.linear)": [[43, "gemclus.linear.LinearModel", false]], "linearwasserstein (class in gemclus.linear)": [[44, "gemclus.linear.LinearWasserstein", false]], "mi (class in gemclus.gemini)": [[37, "gemclus.gemini.MI", false]], "mlpmmd (class in gemclus.mlp)": [[46, "gemclus.mlp.MLPMMD", false]], "mlpmodel (class in gemclus.mlp)": [[47, "gemclus.mlp.MLPModel", false]], "mlpwasserstein (class in gemclus.mlp)": [[48, "gemclus.mlp.MLPWasserstein", false]], "mmdgemini (class in gemclus.gemini)": [[38, "gemclus.gemini.MMDGEMINI", false]], "multivariate_student_t() (in module gemclus.data)": [[33, "gemclus.data.multivariate_student_t", false]], "path() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.path", false]], "path() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.path", false]], "path() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.path", false]], "path() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.path", false]], "path() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.path", false]], "predict() (gemclus.discriminativemodel method)": [[27, "gemclus.DiscriminativeModel.predict", false]], "predict() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.predict", false]], "predict() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.predict", false]], "predict() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.predict", false]], "predict() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.predict", false]], "predict() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.predict", false]], "predict() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.predict", false]], "predict() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.predict", false]], "predict() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.predict", false]], "predict() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.predict", false]], "predict() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.predict", false]], "predict() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.predict", false]], "predict() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.predict", false]], "predict() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.predict", false]], "predict() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.predict", false]], "predict() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.predict", false]], "predict() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.predict", false]], "predict() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.predict", false]], "predict() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.predict", false]], "predict_proba() (gemclus.discriminativemodel method)": [[27, "gemclus.DiscriminativeModel.predict_proba", false]], "predict_proba() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.predict_proba", false]], "predict_proba() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.predict_proba", false]], "predict_proba() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.predict_proba", false]], "predict_proba() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.predict_proba", false]], "predict_proba() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.predict_proba", false]], "predict_proba() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.predict_proba", false]], "predict_proba() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.predict_proba", false]], "predict_proba() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.predict_proba", false]], "predict_proba() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.predict_proba", false]], "predict_proba() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.predict_proba", false]], "predict_proba() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.predict_proba", false]], "predict_proba() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.predict_proba", false]], "predict_proba() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.predict_proba", false]], "predict_proba() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.predict_proba", false]], "predict_proba() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.predict_proba", false]], "predict_proba() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.predict_proba", false]], "predict_proba() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.predict_proba", false]], "print_kauri_tree() (in module gemclus.tree)": [[59, "gemclus.tree.print_kauri_tree", false]], "rim (class in gemclus.linear)": [[45, "gemclus.linear.RIM", false]], "score() (gemclus.discriminativemodel method)": [[27, "gemclus.DiscriminativeModel.score", false]], "score() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.score", false]], "score() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.score", false]], "score() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.score", false]], "score() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.score", false]], "score() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.score", false]], "score() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.score", false]], "score() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.score", false]], "score() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.score", false]], "score() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.score", false]], "score() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.score", false]], "score() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.score", false]], "score() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.score", false]], "score() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.score", false]], "score() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.score", false]], "score() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.score", false]], "score() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.score", false]], "score() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.score", false]], "score() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.score", false]], "set_params() (gemclus.discriminativemodel method)": [[27, "gemclus.DiscriminativeModel.set_params", false]], "set_params() (gemclus.linear.kernelrim method)": [[41, "gemclus.linear.KernelRIM.set_params", false]], "set_params() (gemclus.linear.linearmmd method)": [[42, "gemclus.linear.LinearMMD.set_params", false]], "set_params() (gemclus.linear.linearmodel method)": [[43, "gemclus.linear.LinearModel.set_params", false]], "set_params() (gemclus.linear.linearwasserstein method)": [[44, "gemclus.linear.LinearWasserstein.set_params", false]], "set_params() (gemclus.linear.rim method)": [[45, "gemclus.linear.RIM.set_params", false]], "set_params() (gemclus.mlp.mlpmmd method)": [[46, "gemclus.mlp.MLPMMD.set_params", false]], "set_params() (gemclus.mlp.mlpmodel method)": [[47, "gemclus.mlp.MLPModel.set_params", false]], "set_params() (gemclus.mlp.mlpwasserstein method)": [[48, "gemclus.mlp.MLPWasserstein.set_params", false]], "set_params() (gemclus.nonparametric.categoricalmmd method)": [[49, "gemclus.nonparametric.CategoricalMMD.set_params", false]], "set_params() (gemclus.nonparametric.categoricalmodel method)": [[50, "gemclus.nonparametric.CategoricalModel.set_params", false]], "set_params() (gemclus.nonparametric.categoricalwasserstein method)": [[51, "gemclus.nonparametric.CategoricalWasserstein.set_params", false]], "set_params() (gemclus.sparse.sparselinearmi method)": [[52, "gemclus.sparse.SparseLinearMI.set_params", false]], "set_params() (gemclus.sparse.sparselinearmmd method)": [[53, "gemclus.sparse.SparseLinearMMD.set_params", false]], "set_params() (gemclus.sparse.sparselinearmodel method)": [[54, "gemclus.sparse.SparseLinearModel.set_params", false]], "set_params() (gemclus.sparse.sparsemlpmmd method)": [[55, "gemclus.sparse.SparseMLPMMD.set_params", false]], "set_params() (gemclus.sparse.sparsemlpmodel method)": [[56, "gemclus.sparse.SparseMLPModel.set_params", false]], "set_params() (gemclus.tree.douglas method)": [[57, "gemclus.tree.Douglas.set_params", false]], "set_params() (gemclus.tree.kauri method)": [[58, "gemclus.tree.Kauri.set_params", false]], "sparselinearmi (class in gemclus.sparse)": [[52, "gemclus.sparse.SparseLinearMI", false]], "sparselinearmmd (class in gemclus.sparse)": [[53, "gemclus.sparse.SparseLinearMMD", false]], "sparselinearmodel (class in gemclus.sparse)": [[54, "gemclus.sparse.SparseLinearModel", false]], "sparsemlpmmd (class in gemclus.sparse)": [[55, "gemclus.sparse.SparseMLPMMD", false]], "sparsemlpmodel (class in gemclus.sparse)": [[56, "gemclus.sparse.SparseMLPModel", false]], "tvgemini (class in gemclus.gemini)": [[39, "gemclus.gemini.TVGEMINI", false]], "wassersteingemini (class in gemclus.gemini)": [[40, "gemclus.gemini.WassersteinGEMINI", false]]}, "objects": {"gemclus": [[27, 0, 1, "", "DiscriminativeModel"], [28, 2, 1, "", "add_mlcl_constraint"]], "gemclus.DiscriminativeModel": [[27, 1, 1, "", "__init__"], [27, 1, 1, "", "fit"], [27, 1, 1, "", "fit_predict"], [27, 1, 1, "", "get_gemini"], [27, 1, 1, "", "get_metadata_routing"], [27, 1, 1, "", "get_params"], [27, 1, 1, "", "predict"], [27, 1, 1, "", "predict_proba"], [27, 1, 1, "", "score"], [27, 1, 1, "", "set_params"]], "gemclus.data": [[29, 2, 1, "", "celeux_one"], [30, 2, 1, "", "celeux_two"], [31, 2, 1, "", "draw_gmm"], [32, 2, 1, "", "gstm"], [33, 2, 1, "", "multivariate_student_t"]], "gemclus.gemini": [[34, 0, 1, "", "ChiSquareGEMINI"], [35, 0, 1, "", "HellingerGEMINI"], [36, 0, 1, "", "KLGEMINI"], [37, 0, 1, "", "MI"], [38, 0, 1, "", "MMDGEMINI"], [39, 0, 1, "", "TVGEMINI"], [40, 0, 1, "", "WassersteinGEMINI"]], "gemclus.gemini.ChiSquareGEMINI": [[34, 1, 1, "", "__init__"], [34, 1, 1, "", "compute_affinity"], [34, 1, 1, "", "evaluate"]], "gemclus.gemini.HellingerGEMINI": [[35, 1, 1, "", "__init__"], [35, 1, 1, "", "compute_affinity"], [35, 1, 1, "", "evaluate"]], "gemclus.gemini.KLGEMINI": [[36, 1, 1, "", "__init__"], [36, 1, 1, "", "compute_affinity"], [36, 1, 1, "", "evaluate"]], "gemclus.gemini.MI": [[37, 1, 1, "", "__init__"], [37, 1, 1, "", "compute_affinity"], [37, 1, 1, "", "evaluate"]], "gemclus.gemini.MMDGEMINI": [[38, 1, 1, "", "__init__"], [38, 1, 1, "", "compute_affinity"], [38, 1, 1, "", "evaluate"]], "gemclus.gemini.TVGEMINI": [[39, 1, 1, "", "__init__"], [39, 1, 1, "", "compute_affinity"], [39, 1, 1, "", "evaluate"]], "gemclus.gemini.WassersteinGEMINI": [[40, 1, 1, "", "__init__"], [40, 1, 1, "", "compute_affinity"], [40, 1, 1, "", "evaluate"]], "gemclus.linear": [[41, 0, 1, "", "KernelRIM"], [42, 0, 1, "", "LinearMMD"], [43, 0, 1, "", "LinearModel"], [44, 0, 1, "", "LinearWasserstein"], [45, 0, 1, "", "RIM"]], "gemclus.linear.KernelRIM": [[41, 1, 1, "", "__init__"], [41, 1, 1, "", "fit"], [41, 1, 1, "", "fit_predict"], [41, 1, 1, "", "get_gemini"], [41, 1, 1, "", "get_metadata_routing"], [41, 1, 1, "", "get_params"], [41, 1, 1, "", "predict"], [41, 1, 1, "", "predict_proba"], [41, 1, 1, "", "score"], [41, 1, 1, "", "set_params"]], "gemclus.linear.LinearMMD": [[42, 1, 1, "", "__init__"], [42, 1, 1, "", "fit"], [42, 1, 1, "", "fit_predict"], [42, 1, 1, "", "get_gemini"], [42, 1, 1, "", "get_metadata_routing"], [42, 1, 1, "", "get_params"], [42, 1, 1, "", "predict"], [42, 1, 1, "", "predict_proba"], [42, 1, 1, "", "score"], [42, 1, 1, "", "set_params"]], "gemclus.linear.LinearModel": [[43, 1, 1, "", "__init__"], [43, 1, 1, "", "fit"], [43, 1, 1, "", "fit_predict"], [43, 1, 1, "", "get_gemini"], [43, 1, 1, "", "get_metadata_routing"], [43, 1, 1, "", "get_params"], [43, 1, 1, "", "predict"], [43, 1, 1, "", "predict_proba"], [43, 1, 1, "", "score"], [43, 1, 1, "", "set_params"]], "gemclus.linear.LinearWasserstein": [[44, 1, 1, "", "__init__"], [44, 1, 1, "", "fit"], [44, 1, 1, "", "fit_predict"], [44, 1, 1, "", "get_gemini"], [44, 1, 1, "", "get_metadata_routing"], [44, 1, 1, "", "get_params"], [44, 1, 1, "", "predict"], [44, 1, 1, "", "predict_proba"], [44, 1, 1, "", "score"], [44, 1, 1, "", "set_params"]], "gemclus.linear.RIM": [[45, 1, 1, "", "__init__"], [45, 1, 1, "", "fit"], [45, 1, 1, "", "fit_predict"], [45, 1, 1, "", "get_gemini"], [45, 1, 1, "", "get_metadata_routing"], [45, 1, 1, "", "get_params"], [45, 1, 1, "", "predict"], [45, 1, 1, "", "predict_proba"], [45, 1, 1, "", "score"], [45, 1, 1, "", "set_params"]], "gemclus.mlp": [[46, 0, 1, "", "MLPMMD"], [47, 0, 1, "", "MLPModel"], [48, 0, 1, "", "MLPWasserstein"]], "gemclus.mlp.MLPMMD": [[46, 1, 1, "", "__init__"], [46, 1, 1, "", "fit"], [46, 1, 1, "", "fit_predict"], [46, 1, 1, "", "get_gemini"], [46, 1, 1, "", "get_metadata_routing"], [46, 1, 1, "", "get_params"], [46, 1, 1, "", "predict"], [46, 1, 1, "", "predict_proba"], [46, 1, 1, "", "score"], [46, 1, 1, "", "set_params"]], "gemclus.mlp.MLPModel": [[47, 1, 1, "", "__init__"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_predict"], [47, 1, 1, "", "get_gemini"], [47, 1, 1, "", "get_metadata_routing"], [47, 1, 1, "", "get_params"], [47, 1, 1, "", "predict"], [47, 1, 1, "", "predict_proba"], [47, 1, 1, "", "score"], [47, 1, 1, "", "set_params"]], "gemclus.mlp.MLPWasserstein": [[48, 1, 1, "", "__init__"], [48, 1, 1, "", "fit"], [48, 1, 1, "", "fit_predict"], [48, 1, 1, "", "get_gemini"], [48, 1, 1, "", "get_metadata_routing"], [48, 1, 1, "", "get_params"], [48, 1, 1, "", "predict"], [48, 1, 1, "", "predict_proba"], [48, 1, 1, "", "score"], [48, 1, 1, "", "set_params"]], "gemclus.nonparametric": [[49, 0, 1, "", "CategoricalMMD"], [50, 0, 1, "", "CategoricalModel"], [51, 0, 1, "", "CategoricalWasserstein"]], "gemclus.nonparametric.CategoricalMMD": [[49, 1, 1, "", "__init__"], [49, 1, 1, "", "fit"], [49, 1, 1, "", "fit_predict"], [49, 1, 1, "", "get_gemini"], [49, 1, 1, "", "get_metadata_routing"], [49, 1, 1, "", "get_params"], [49, 1, 1, "", "predict"], [49, 1, 1, "", "predict_proba"], [49, 1, 1, "", "score"], [49, 1, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalModel": [[50, 1, 1, "", "__init__"], [50, 1, 1, "", "fit"], [50, 1, 1, "", "fit_predict"], [50, 1, 1, "", "get_gemini"], [50, 1, 1, "", "get_metadata_routing"], [50, 1, 1, "", "get_params"], [50, 1, 1, "", "predict"], [50, 1, 1, "", "predict_proba"], [50, 1, 1, "", "score"], [50, 1, 1, "", "set_params"]], "gemclus.nonparametric.CategoricalWasserstein": [[51, 1, 1, "", "__init__"], [51, 1, 1, "", "fit"], [51, 1, 1, "", "fit_predict"], [51, 1, 1, "", "get_gemini"], [51, 1, 1, "", "get_metadata_routing"], [51, 1, 1, "", "get_params"], [51, 1, 1, "", "predict"], [51, 1, 1, "", "predict_proba"], [51, 1, 1, "", "score"], [51, 1, 1, "", "set_params"]], "gemclus.sparse": [[52, 0, 1, "", "SparseLinearMI"], [53, 0, 1, "", "SparseLinearMMD"], [54, 0, 1, "", "SparseLinearModel"], [55, 0, 1, "", "SparseMLPMMD"], [56, 0, 1, "", "SparseMLPModel"]], "gemclus.sparse.SparseLinearMI": [[52, 1, 1, "", "__init__"], [52, 1, 1, "", "fit"], [52, 1, 1, "", "fit_predict"], [52, 1, 1, "", "get_gemini"], [52, 1, 1, "", "get_metadata_routing"], [52, 1, 1, "", "get_params"], [52, 1, 1, "", "get_selection"], [52, 1, 1, "", "path"], [52, 1, 1, "", "predict"], [52, 1, 1, "", "predict_proba"], [52, 1, 1, "", "score"], [52, 1, 1, "", "set_params"]], "gemclus.sparse.SparseLinearMMD": [[53, 1, 1, "", "__init__"], [53, 1, 1, "", "fit"], [53, 1, 1, "", "fit_predict"], [53, 1, 1, "", "get_gemini"], [53, 1, 1, "", "get_metadata_routing"], [53, 1, 1, "", "get_params"], [53, 1, 1, "", "get_selection"], [53, 1, 1, "", "path"], [53, 1, 1, "", "predict"], [53, 1, 1, "", "predict_proba"], [53, 1, 1, "", "score"], [53, 1, 1, "", "set_params"]], "gemclus.sparse.SparseLinearModel": [[54, 1, 1, "", "__init__"], [54, 1, 1, "", "fit"], [54, 1, 1, "", "fit_predict"], [54, 1, 1, "", "get_gemini"], [54, 1, 1, "", "get_metadata_routing"], [54, 1, 1, "", "get_params"], [54, 1, 1, "", "get_selection"], [54, 1, 1, "", "path"], [54, 1, 1, "", "predict"], [54, 1, 1, "", "predict_proba"], [54, 1, 1, "", "score"], [54, 1, 1, "", "set_params"]], "gemclus.sparse.SparseMLPMMD": [[55, 1, 1, "", "__init__"], [55, 1, 1, "", "fit"], [55, 1, 1, "", "fit_predict"], [55, 1, 1, "", "get_gemini"], [55, 1, 1, "", "get_metadata_routing"], [55, 1, 1, "", "get_params"], [55, 1, 1, "", "get_selection"], [55, 1, 1, "", "path"], [55, 1, 1, "", "predict"], [55, 1, 1, "", "predict_proba"], [55, 1, 1, "", "score"], [55, 1, 1, "", "set_params"]], "gemclus.sparse.SparseMLPModel": [[56, 1, 1, "", "__init__"], [56, 1, 1, "", "fit"], [56, 1, 1, "", "fit_predict"], [56, 1, 1, "", "get_gemini"], [56, 1, 1, "", "get_metadata_routing"], [56, 1, 1, "", "get_params"], [56, 1, 1, "", "get_selection"], [56, 1, 1, "", "path"], [56, 1, 1, "", "predict"], [56, 1, 1, "", "predict_proba"], [56, 1, 1, "", "score"], [56, 1, 1, "", "set_params"]], "gemclus.tree": [[57, 0, 1, "", "Douglas"], [58, 0, 1, "", "Kauri"], [59, 2, 1, "", "print_kauri_tree"]], "gemclus.tree.Douglas": [[57, 1, 1, "", "__init__"], [57, 1, 1, "", "find_active_points"], [57, 1, 1, "", "fit"], [57, 1, 1, "", "fit_predict"], [57, 1, 1, "", "get_gemini"], [57, 1, 1, "", "get_metadata_routing"], [57, 1, 1, "", "get_params"], [57, 1, 1, "", "predict"], [57, 1, 1, "", "predict_proba"], [57, 1, 1, "", "score"], [57, 1, 1, "", "set_params"]], "gemclus.tree.Kauri": [[58, 1, 1, "", "__init__"], [58, 1, 1, "", "fit"], [58, 1, 1, "", "fit_predict"], [58, 1, 1, "", "get_metadata_routing"], [58, 1, 1, "", "get_params"], [58, 1, 1, "", "predict"], [58, 1, 1, "", "score"], [58, 1, 1, "", "set_params"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function"}, "terms": {"": [3, 5, 10, 14, 15, 21, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64], "0": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63], "00": [12, 17, 20, 22, 23, 26, 63], "000": [6, 23], "0002": 61, "001": [15, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "005": 21, "01": [16, 26, 52, 53, 54, 55, 56, 57, 63], "019": [25, 26, 63], "02": [12, 17, 63], "024991249149671": 13, "029": [13, 17, 63], "03": [17, 63], "036": [24, 26, 63], "04": [12, 63], "05": [1, 6, 7, 8, 11, 16, 52, 53, 54, 55, 56], "055": 26, "07": [17, 63], "08": [12, 17, 63], "09": [12, 20, 63], "0oy3pia": 61, "1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 28, 29, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64], "10": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 33, 52, 53, 54, 55, 56, 64], "100": [2, 3, 9, 16, 19, 24, 57], "1000": [1, 2, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "10728640074310927": 19, "11": [12, 14, 34, 64], "11176053892324672": 19, "11421905413971052": 19, "11914066061963555": 19, "12": [34, 35, 36, 37, 38, 39, 40, 64], "12232": 64, "126": [3, 12, 63], "127": 64, "14": 30, "141": 3, "144": [61, 64], "15": 16, "155": [29, 30, 64], "167022308022": 25, "16976700304809886": 19, "1789": [3, 9], "18": [1, 12, 15, 63], "19": [61, 63], "1991": 64, "1d": 60, "1e": [2, 3, 8, 9, 10, 16, 19, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "2": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 25, 26, 28, 29, 30, 32, 34, 35, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 62, 64], "20": [13, 14, 29, 46, 47, 48, 55, 56], "200": [1, 4, 5, 6, 7, 8, 10, 11, 15], "2000": 30, "2005": [61, 64], "2010": [10, 41, 45, 64], "2011": [11, 34, 64], "2014": [14, 29, 30, 64], "2020": [61, 64], "2021": [55, 56, 64], "2022": [32, 61, 64], "2023": 8, "2024": 64, "21": 17, "2117267518": 49, "22": [25, 64], "22472124150185058": 19, "23": 64, "2402": 64, "25": 15, "28": 63, "28th": [34, 64], "29": 64, "291": [2, 9, 12, 63], "292": 63, "2d": [15, 30], "3": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 27, 29, 30, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64], "300": [13, 14, 29], "328": 9, "330": [6, 10, 12, 63], "337": [14, 17, 63], "3377": 64, "3390": 64, "34": 64, "35": 64, "3555482569": 51, "379": 12, "3f": [3, 6, 9, 21], "3ia": 61, "4": [1, 3, 4, 6, 9, 13, 14, 15, 16, 17, 25, 30, 64], "400": [4, 12, 63], "403": 21, "418": [11, 12, 63], "4242049318552605": 15, "43": 64, "431": 21, "43532371061057": 25, "4390485754": 45, "4411": 64, "4425": 64, "44865384782317197": 10, "45": 16, "452": [7, 12, 63], "458336976163333": 14, "4596486286280357": 15, "474": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "4741506860502334": 24, "48": 15, "4935152433868386": 16, "5": [1, 3, 4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 19, 25, 29, 52, 53, 54, 55, 56, 64], "50": [1, 3, 4, 5, 8, 10, 11, 14, 15, 16], "500": 32, "507": [21, 22, 63], "525": [15, 17, 63], "55": 12, "564": [19, 20, 63], "5681159420289855": 24, "57": [29, 30, 64], "573": 64, "577": 64, "5812412917": 52, "5824499242836227": 15, "5d": [13, 14], "6": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 64], "6325592616": 47, "646750269106263": 16, "65": [34, 64], "6577369504": 50, "673": [5, 12, 63], "7": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 29, 64], "7040618744": 53, "7048160115": 42, "71": [29, 30, 64], "7103992986": 44, "7172759168337549": 25, "72": [34, 64], "722492124234704": 13, "7550724287": 43, "7592155845": 46, "7636482655": 48, "7664211836": 55, "773": [1, 12, 63], "780": [8, 12, 63], "787": 17, "8": [8, 15, 16, 60, 64], "80": 16, "8084378363828287": 16, "825972824049516": 13, "83290627605772": 13, "846": [6, 12, 63], "8680377279943841": 25, "878": 21, "896": [16, 17, 63], "9": [3, 4, 13, 15, 19, 52, 53, 54, 55, 56, 64], "90": [13, 14, 15], "9459": 25, "951911": 61, "975": 9, "977": 3, "99": [52, 53, 54, 55, 56], "A": [14, 19, 23, 27, 28, 29, 30, 31, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "And": 2, "As": 2, "By": [21, 64], "For": [2, 52, 53, 54, 55, 56, 62, 64], "If": [27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64], "In": [2, 3, 5, 10, 11, 13, 14, 15, 16, 32, 34, 61, 62, 64], "It": [2, 27, 28, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62, 64], "No": 60, "On": [5, 10, 11, 34, 52, 54, 55, 56, 64], "That": 14, "The": [0, 2, 5, 6, 9, 11, 13, 14, 15, 16, 19, 21, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], "Then": [1, 19, 64], "There": 3, "These": [0, 61, 62, 64], "To": [2, 3, 8, 27, 43, 47, 50, 54, 57, 62], "_": [34, 35, 36, 37, 38, 39, 40, 64], "__": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "__init__": [2, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "_compute_gemini": 54, "_compute_grad": [2, 64], "_gener": [12, 63], "_get_weight": [2, 64], "_infer": [2, 64], "_init_param": [2, 64], "_tree": 58, "_validate_data": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "_y_sigmoid": 2, "abcmeta": 60, "abl": [8, 54], "abov": [0, 62], "abraham": [55, 56, 64], "absenc": 64, "accept": [14, 52, 53, 54, 55, 56], "access": 62, "accompanni": 25, "accord": [0, 3, 10, 58], "achiev": 64, "across": [27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "activ": [2, 57, 60, 64], "active_point": 57, "actual": [1, 58], "ad": [60, 64], "adam": [2, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "adamoptim": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "adapt": 54, "add": [2, 15, 28, 64], "add_mlcl_constraint": [19, 60], "addit": [13, 14, 29, 30, 38, 40, 60], "additive_chi2": [25, 38, 41, 42, 46, 49, 53, 55, 58], "additive_chi2_model": 25, "adequ": [1, 3], "adjac": [3, 8], "adjacency_matrix": 3, "adjusted_rand_scor": [3, 6, 7, 9, 11, 13, 14, 19, 24, 25], "adp": 61, "advanc": [32, 61, 64], "advantag": 19, "affin": [21, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "after": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "agarw": 61, "agenc": 61, "agreeanc": 19, "ai4media": 61, "aim": [0, 2, 61], "al": [10, 14, 29, 30, 41, 45, 55, 56, 64], "alekh": 61, "alexandr": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "algorithm": [1, 6, 7, 8, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "alic": 61, "all": [2, 3, 8, 13, 14, 15, 16, 18, 19, 21, 27, 28, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64], "all_model": 19, "allow": [2, 61], "alon": [52, 53, 54, 55, 56], "along": [8, 13, 15, 64], "alpha": [1, 3, 4, 8, 10, 11, 13, 14, 15, 16, 32, 52, 53, 54, 55, 56], "alpha_multipli": [52, 53, 54, 55, 56], "alreadi": 58, "also": [11, 27, 43, 47, 50, 54, 57, 61, 64], "although": 19, "altogeth": 16, "alwai": 9, "among": [2, 57, 62], "amount": [52, 53, 54, 55, 56], "an": [3, 4, 8, 12, 13, 15, 16, 18, 19, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64], "analysi": 64, "analyt": [11, 34, 64], "andrea": [41, 45], "ani": [0, 11, 18, 22, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64], "anoth": [21, 62, 64], "anr": 61, "apart": [2, 4, 19], "api": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61], "appli": [2, 28], "appris": 57, "approach": [29, 30, 62], "ar": [0, 2, 3, 4, 8, 9, 10, 13, 14, 15, 16, 19, 24, 25, 27, 28, 29, 32, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62], "arang": 16, "architectur": [0, 5, 11, 55, 56, 64], "argmax": [10, 16, 19], "argsort": 19, "argument": [3, 38, 40, 41, 42, 44, 46, 48, 49, 51, 53, 55, 58, 60, 62], "ari": [3, 6, 7, 9, 13, 14, 19, 24, 25], "ari_scor": [3, 6, 9], "arnaud": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "arrai": [2, 3, 9, 13, 14, 15, 16, 27, 29, 30, 31, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "art": 64, "articl": 32, "arxiv": 64, "ask": [13, 14, 15, 16], "assign": [0, 3, 6, 9, 16, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "associ": [3, 6, 9, 24], "assumpt": 64, "attribut": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "author": 61, "auto_exampl": [12, 17, 20, 22, 23, 26], "auto_examples_jupyt": 18, "auto_examples_python": 18, "avail": [2, 27, 43, 47, 50, 54, 57, 62], "available_gemini": [27, 43, 47, 50, 54, 57, 62], "avoid": [34, 35, 36, 37, 38, 39, 40], "awar": 64, "ax0": [5, 10, 15], "ax1": [5, 10, 15], "ax2": [5, 10, 15], "axi": [1, 2, 6, 8, 13, 14, 15, 16], "azur": 61, "b1_": [46, 47, 48, 55, 56], "b2_": [46, 47, 48, 55, 56], "b_": [41, 42, 43, 44, 45, 52, 53, 54], "b_k": 64, "ba": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "backpropag": 2, "base": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 27, 29, 30, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64], "base_kernel": [7, 41], "base_kernel_param": 41, "base_model": 19, "baseestim": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "basegemini": 27, "basic": 0, "batch": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "batch_siz": [2, 4, 15, 16, 27, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57], "bay": [21, 64], "becaus": [1, 3, 8, 52, 53, 54, 55, 56, 62, 64], "becom": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "been": 61, "befor": [52, 53, 54, 55, 56], "behav": 6, "being": 28, "belgrav": 61, "believ": 64, "best": [13, 14, 15, 19, 52, 53, 54, 55, 56, 58], "best_weight": [13, 14, 15, 16, 52, 53, 54, 55, 56], "better": 60, "between": [12, 18, 27, 28, 34, 35, 36, 37, 38, 39, 40, 47, 48, 55, 56, 63, 64], "beyond": [52, 53, 54, 55, 56], "bia": [2, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "bias": [41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56], "bin": [24, 57], "binari": [2, 59], "binaryregress": 2, "binomi": [3, 16], "bit": 62, "blue": [4, 11, 16], "booktitl": 61, "bool": [27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "boolean": 57, "both": [21, 60, 64], "bound": 57, "boundari": [0, 10, 11, 12, 18, 27, 32, 43, 44, 47, 48, 63, 64], "bouveyron": [32, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 64], "brain": [14, 52, 64], "breast": 21, "bridg": 61, "bridl": 64, "bring": [52, 54, 55, 56], "build": [12, 18, 26, 27, 31, 57, 58, 59, 63], "c": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 29, 30, 32, 61, 64], "c_": [1, 4, 8, 10, 11], "calcul": [57, 64], "call": [3, 6, 9, 13, 14, 15, 16, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64], "callabl": [38, 40, 41], "can": [0, 1, 2, 6, 7, 9, 11, 14, 19, 21, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64], "canada": 61, "cancer": 21, "cane": 64, "cannot": [0, 1, 9, 28, 60, 62], "cannot_link": [19, 28], "cart": 60, "case": [7, 38, 40, 64], "categor": [16, 49, 50, 51], "categorical___": 28, "categoricalmmd": [6, 9, 50, 51], "categoricalmodel": [49, 51, 60], "categoricalwasserstein": [3, 19, 49, 50], "cd": 61, "celeux": [14, 29, 30, 64], "celeux_on": [13, 14, 19, 64], "celeux_two": 64, "cell": [5, 10], "center": [5, 10, 11, 15], "centr": [1, 7], "certain": [52, 53, 54, 55, 56], "challeng": [1, 7, 19, 64], "chang": [12, 18, 27, 46, 47, 52, 53, 54, 55, 56, 63], "charl": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "check": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61], "chi": [34, 60], "chi2": [38, 41, 42, 46, 49, 53, 55, 58], "chisquaregemini": [11, 60, 64], "cho": 61, "choic": [2, 58, 64], "choos": 58, "chosen": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "circl": [6, 12, 18, 27, 41, 43, 46, 47, 63], "circleci": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "cite": 61, "cityblock": [40, 44, 48, 51], "class": [0, 2, 19, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64], "class_indic": 14, "classic": [36, 37, 41, 45], "classif": 64, "classifi": 64, "clf": [4, 5, 10, 13, 14, 15, 16, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55], "clf1": 21, "clf1_score": 21, "clf2": 21, "clf2_score": 21, "clip": [34, 35, 36, 37, 38, 39, 40], "clone": 61, "close": [1, 13, 14, 15, 19, 29, 32], "closer": 57, "closest": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "cluster": [12, 16, 20, 21, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63], "cluster_std": [5, 10, 15], "cm": [1, 8, 25], "cmap": [1, 4, 8, 11, 19], "code": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 21, 24, 25, 61, 62], "coeffici": [55, 56], "column": 2, "com": 61, "combin": [3, 11, 19, 38, 40, 41, 42, 44, 46, 48, 49, 51, 53, 55, 58, 60], "combinations_with_replac": 19, "come": [62, 64], "common": 2, "commun": 61, "compar": [12, 18, 27, 29, 30, 34, 35, 36, 38, 39, 40, 46, 47, 63, 64], "comparison": 64, "compat": [60, 61, 64], "complet": [37, 61], "complex": 64, "compon": [27, 29, 30, 31, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64], "comput": [1, 2, 11, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64], "compute_affin": [21, 34, 35, 36, 37, 38, 39, 40], "concaten": [2, 15, 16, 29], "condit": [0, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 54], "confer": [34, 64], "confid": 19, "connect": [55, 56, 64], "consensu": [20, 27, 28, 29, 42, 43, 50, 51, 63], "consensus_matrix": 19, "consensus_model": 19, "consensus_ord": 19, "consequ": [0, 4, 9, 49, 50, 51], "consid": [11, 16, 27, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58], "consider": 64, "consist": [1, 7, 10, 13, 14, 15, 16, 19, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "constant": 58, "constrain": [16, 19, 60], "constraint": [18, 20, 27, 28, 29, 42, 43, 50, 51, 52, 54, 55, 56, 58, 60, 63, 64], "construct": [0, 24, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "constructor": [62, 64], "contain": [0, 27, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "context": [34, 35, 36, 37, 38, 39, 40, 64], "contourf": [1, 4, 8, 10, 11], "contract": 61, "contraint": 28, "contrari": [2, 14], "contrarili": [49, 50, 51], "contribut": 57, "control": [27, 29, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "convent": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "converg": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "correct": [2, 13, 14, 15, 16], "correspond": [1, 38, 40, 41, 42, 44, 46, 48, 49, 51, 53, 55, 58], "cosin": [19, 38, 40, 41, 42, 44, 46, 48, 49, 51, 53, 55, 58], "cost": 11, "could": 61, "coupl": [27, 61], "covari": [1, 3, 9, 31], "covariance_typ": 1, "creat": [0, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 27, 62], "creation": [29, 30, 31, 32, 33], "crimson": [5, 10, 15], "csgraph": [3, 8], "culotta": 64, "current": [38, 40, 41, 42, 44, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58], "custom": [3, 27, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60, 62, 64], "custom_model": 2, "cut": 57, "c\u00f4te": 61, "d": [31, 33, 57, 61, 64], "d_": [34, 64], "dai": [52, 64], "daniel": 61, "darkgreen": [5, 10, 15], "data": [0, 1, 2, 3, 6, 9, 10, 11, 13, 14, 16, 19, 21, 24, 25, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 64], "dataset": [5, 8, 11, 12, 18, 27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 60, 61, 63], "ddof": [1, 6], "de": [29, 30, 64], "decis": [0, 9, 10, 11, 12, 18, 25, 27, 32, 43, 44, 47, 48, 61, 63, 64], "decomposit": 14, "decor": [0, 19, 28], "decoupl": 64, "decreas": [13, 15], "dedic": [60, 61], "deem": [52, 53, 54, 55, 56], "deep": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "deepskyblu": [5, 10, 15], "def": [2, 16], "default": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64], "defin": [2, 8, 38, 40, 62], "definit": [33, 60, 62], "degre": [12, 18, 27, 32, 33, 43, 44, 63], "delta": [40, 57], "deng": [52, 64], "depend": [0, 3, 9, 13, 15, 16, 27, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 64], "deprec": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "depth": [25, 58], "deriv": [7, 25, 27, 34, 35, 36, 37, 38, 39, 40, 54, 61, 64], "descent": [6, 13, 14, 15, 16, 27, 28, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "describ": [19, 28, 41, 45, 52, 53, 54, 55, 56, 59], "design": [27, 64], "desir": [0, 8, 62], "determin": [3, 27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "develop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 61], "df": [4, 32, 33], "dict": [27, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "dictionari": [41, 42, 44, 46, 48, 49, 51, 53], "diederik": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "differ": [18, 21, 24, 25, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64], "differenti": [18, 26, 27, 57, 60, 63, 64], "dimens": 29, "dirac": [57, 58], "direct": [3, 8], "directli": [6, 49, 50, 51, 60, 62, 64], "discard": [13, 14, 15, 16], "discrep": 38, "discrimin": [12, 14, 18, 27, 28, 31, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63], "discriminativemodel": [2, 62, 64], "distanc": [3, 8, 21, 34, 35, 36, 37, 38, 39, 40, 44, 48, 51, 60, 62, 64], "distinguish": [14, 62], "distribut": [0, 1, 2, 5, 6, 7, 12, 13, 14, 15, 16, 18, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61, 63], "diverg": [11, 34, 35, 36, 37, 39, 60, 64], "divis": 60, "dndt": 57, "do": [0, 3, 8, 10, 19, 21, 49, 50, 51, 61, 62, 64], "document": 60, "doe": [49, 50, 51], "done": [4, 6, 60], "dougla": [18, 26, 27, 60, 63], "download": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 21, 24, 25, 61], "draw": [4, 12, 18, 27, 29, 30, 31, 32, 33, 47, 48, 63], "draw_gmm": [2, 3, 9, 60], "drawn": [29, 30, 31, 32, 33, 64], "droit": [32, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 64], "dummi": 3, "duplic": 2, "dure": [13, 14, 15, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "dynam": [52, 53, 54, 55, 56, 60], "e": [19, 29, 30, 34, 35, 36, 37, 38, 39, 40, 61, 62, 64], "each": [2, 3, 6, 27, 29, 30, 31, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "earli": [52, 53, 54, 55, 56], "early_stopping_factor": [52, 53, 54, 55, 56], "eas": 1, "easili": [62, 64], "ed": 64, "edg": 8, "edge_prob": 3, "editor": 61, "either": [34, 35, 36, 37, 38, 39, 40, 52, 53, 54, 55, 56, 58], "element": 31, "elimin": [13, 14, 15, 16, 55, 56], "ell_2": [10, 28, 41, 45, 64], "emphas": 19, "encapsul": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "encod": [16, 52, 53, 54, 55, 56], "encount": [13, 14, 15], "end": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 60, 62, 64], "enforc": 19, "enhanc": 0, "ensembl": 19, "ensur": [2, 19, 28, 52, 53, 54, 55, 56], "enter": [52, 53, 54, 55, 56], "environ": [5, 10], "epoch": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "epsilon": [34, 35, 36, 37, 38, 39, 40], "equival": [5, 6, 19, 25, 38], "especi": 61, "essenti": 64, "estim": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "et": [10, 14, 29, 30, 41, 45, 55, 56, 64], "etc": 60, "eu": 61, "euclidean": [3, 8, 21, 27, 40, 43, 44, 47, 48, 50, 51, 54, 57, 64], "euclidean_gemini": 1, "evalu": [0, 13, 14, 21, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "even": 61, "exampl": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 60, 61, 62, 63], "excess": 29, "execut": [12, 17, 20, 22, 23, 26, 63], "exist": 58, "exp": [2, 3], "expect": [2, 4, 13, 14], "experi": [4, 8], "experiment": 60, "expert": 19, "explicit": [52, 53, 54, 55, 56], "explor": [57, 58], "extend": [12, 18, 27, 31, 63], "extens": [2, 61, 64], "extern": 60, "extra": 15, "extrapol": 19, "ey": [2, 3, 9, 21], "f": [3, 6, 7, 9, 13, 14, 15, 16, 21, 32, 34, 35, 36, 37, 39, 55, 56, 61, 64], "face": 8, "factor": [1, 6, 7, 11, 28, 52, 53, 54, 55, 56, 58], "fall": 57, "fals": [2, 3, 8, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "fancybox": [5, 10, 15], "far": 4, "featur": [0, 4, 5, 10, 17, 24, 27, 29, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64], "feature_mask": 57, "feature_nam": [25, 59], "feature_select": [17, 63], "few": [24, 52, 53, 54, 55, 56], "ffcr": 61, "field": [19, 61], "figsiz": 15, "figur": 15, "file": [12, 17, 20, 22, 23, 26, 63], "final": [16, 19], "find": [4, 8, 13, 14, 15, 16, 19, 57, 61], "find_active_point": 57, "finish": [2, 64], "first": [2, 13, 14, 21, 46, 47, 48, 55, 56, 64], "fit": [1, 3, 6, 7, 8, 9, 10, 11, 19, 21, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62], "fit_predict": [2, 3, 4, 6, 7, 8, 9, 24, 25, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "fit_transform": [14, 21], "fix": 60, "flag": 2, "float": [27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "floyd_warshal": [3, 8], "follow": [0, 2, 3, 41, 45, 61], "form": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64], "forum": 61, "found": [14, 58, 61], "framework": [2, 41, 45, 62], "franc": 61, "francais": [29, 30, 64], "fran\u00e7a": 64, "freder": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "freedom": [4, 32, 33], "french": 61, "from": [1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64], "full": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 60], "fulli": 28, "function": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 27, 28, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62], "fund": 61, "further": [0, 62], "fuse": 60, "futur": 61, "futurewarn": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "g": [29, 30, 62, 64], "gain": [25, 58], "galleri": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 63, 64], "gamma": 62, "gap": 61, "gaussian": [1, 2, 3, 5, 10, 12, 13, 14, 15, 18, 21, 27, 29, 30, 31, 32, 43, 44, 60, 63], "gaussianmixtur": 1, "gaussiannb": 21, "gemclu": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 24, 25, 60, 63, 64], "gemini": [1, 2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 16, 22, 24, 25, 27, 28, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63], "gemini_model": 28, "gemini_scor": [3, 6, 9], "gener": [1, 2, 3, 6, 7, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62], "generalis": [11, 32, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64], "geometr": [52, 53, 54, 55, 56, 64], "geometri": 64, "get": [13, 14, 15, 16, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64], "get_fram": [5, 10, 15], "get_gemini": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "get_metadata_rout": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "get_param": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "get_select": [15, 16, 52, 53, 54, 55, 56, 60], "git": 61, "github": [5, 10, 61], "give": [0, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "given": [3, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 64], "gm": 1, "gmm": [29, 30, 31, 32], "go": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 61], "goal": 2, "gome": [41, 45, 64], "good": [52, 53, 54, 55, 56], "govern": 61, "grad": 10, "gradient": [2, 6, 13, 14, 15, 16, 27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "grai": 3, "graph": [8, 9, 12, 18, 27, 31, 50, 51, 60, 63], "greater": [52, 53, 54, 55, 56], "grid": [1, 4], "grid_input": [1, 4, 8, 10, 11], "grid_pr": 10, "group": [15, 17, 18, 27, 43, 52, 53, 54, 55, 56, 60, 63, 64], "group_penalti": [52, 53, 54, 55, 56], "groups_": [52, 53, 54, 55, 56], "grow": 64, "gstm": [4, 60, 64], "guid": [8, 14, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61], "guidanc": [0, 19], "h": [11, 34, 35, 61, 64], "h_": [46, 47, 48, 55, 56], "ha": [2, 57, 61, 64], "hachiya": [11, 34, 64], "harchaoui": [32, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 64], "hartigan": 64, "have": [0, 1, 2, 6, 19, 21, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62], "head": 64, "helling": [35, 64], "hellingergemini": [60, 64], "help": [0, 4, 58, 61, 64], "henc": [58, 64], "here": [1, 2, 3, 4, 5, 7, 18, 19, 21, 25, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64], "hi": 61, "hidden": [0, 46, 47, 48, 55, 56, 64], "hierarchi": [55, 56], "high": 57, "highlight": [13, 15], "histori": [52, 53, 54, 55, 56], "home": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "hope": 64, "horizon": 61, "hot": [16, 52, 53, 54, 55, 56], "how": [5, 9, 10, 11, 13, 15, 16, 18, 19, 21, 24, 25, 27, 29, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64], "howev": [0, 6], "html": [5, 10], "http": 61, "hyper": 0, "hyperparamet": [28, 41, 45, 57], "hypothes": [21, 61, 64], "hypothesi": 64, "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62], "i1": 28, "iN": 28, "icml": [11, 34, 64], "id": 61, "idea": 19, "ideal": 58, "ident": 3, "identifi": 64, "ieee": 64, "ignor": [38, 40, 52, 53, 54, 55, 56], "illustr": 9, "implement": [0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 58, 60, 61], "import": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 62], "improv": [19, 52, 53, 54, 55, 56], "imshow": 19, "in_threshold": 2, "incap": 1, "includ": [61, 64], "incompar": [52, 53, 54, 55, 56], "incompat": [52, 53, 54, 55, 56], "incorpor": [4, 27, 43, 47, 50, 54, 57, 62, 64], "increas": [13, 14, 15, 16, 52, 53, 54, 55, 56, 58], "ind": [52, 53, 54, 55, 56], "independ": [13, 14, 29, 64], "index": 3, "indic": [0, 3, 28, 52, 53, 54, 55, 56, 57], "individu": 64, "inf": [3, 8], "inform": [2, 10, 12, 16, 18, 21, 27, 30, 32, 34, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64], "inherit": 62, "initi": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64], "initialis": [1, 2, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "inner": 0, "inproceed": 61, "input": [4, 9, 10, 19, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64], "insid": [2, 62], "insight": 61, "inspir": [55, 56, 64], "instabl": [34, 35, 36, 37, 38, 39, 40], "instanc": [27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "instanci": 62, "instead": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 53, 54, 55, 56, 60], "instruct": 61, "int": [19, 27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "integ": 57, "integr": 64, "intellig": 64, "intend": [0, 61], "interest": [61, 64], "interlac": [12, 18, 27, 47, 48, 63], "intermedi": 2, "intern": [34, 64], "interpret": [0, 64], "introduc": [12, 18, 27, 46, 47, 60, 63], "introduct": 60, "invest": 61, "involv": [27, 28, 43, 47, 50, 54, 57, 64], "io": 61, "ipynb": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25], "iri": [24, 25], "isinf": [3, 8], "isol": [10, 60], "isotrop": [2, 13, 14, 15, 29], "iter": [13, 14, 15, 16, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "itertool": [3, 19], "its": [6, 19, 57, 60, 64], "j": [3, 19, 64], "j1": 28, "jhonatan": 61, "jimmi": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "jn": 28, "job": 1, "joint": [52, 53, 54, 55, 56, 64], "journal": [29, 30, 64], "jupyt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 21, 24, 25], "just": [10, 13, 14, 15, 16], "k": [14, 31, 49, 50, 51, 64], "kappa": 38, "kauri": [18, 26, 59, 60, 63, 64], "kauri_tre": 59, "keep": [13, 14, 15, 64], "keep_threshold": [14, 16, 52, 53, 54, 55, 56], "kei": 19, "kept": [52, 53, 54, 55, 56], "kernel": [5, 11, 12, 14, 18, 19, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 49, 50, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64], "kernel_param": [38, 41, 42, 46, 49, 53, 55, 58, 62], "kernelis": [41, 60], "kernelised_grid_input": 11, "kernelrim": [7, 60, 64], "keyword": [38, 40, 41, 42, 44, 46, 48, 49, 51, 53], "ki": [49, 50, 51], "kimura": [11, 34, 64], "kingma": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "kl": [11, 36, 37, 64], "klgemini": [37, 60], "kmean": [5, 12, 18, 26, 27, 38, 49, 50, 58, 59, 63, 64], "knowledg": 19, "kong": [14, 52, 64], "kraus": [10, 41, 45, 64], "kullback": 64, "kyunghyun": 61, "l": [29, 30, 32, 55, 56, 61, 64], "l1": [40, 44, 48, 51], "l2": [21, 40, 44, 48, 51], "la": [29, 30, 64], "label": [7, 14, 21, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "labels_": [1, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "lack": 61, "lafferti": 64, "lambda": 19, "langl": 64, "laplacian": [38, 41, 42, 46, 49, 53, 55, 58], "lasso": [14, 15, 52, 53, 54, 55, 56, 64], "lassonet": [55, 56, 64], "latent": 3, "latter": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "layer": [0, 1, 5, 46, 47, 48, 54, 55, 56, 62, 64], "leaf": [57, 58], "learn": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 27, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64], "learnabl": 57, "learning_r": [2, 3, 8, 9, 15, 16, 19, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "learnt": [0, 24], "least": 58, "leav": 58, "leclercq": [32, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 64], "led": 61, "left": [5, 10, 15, 64], "leg": [5, 10, 15], "legend": [5, 7, 10, 15], "leibler": 64, "lemhadri": [55, 56, 64], "len": [16, 19], "length": [25, 52, 53, 54, 55, 56], "less": [2, 8], "let": [10, 14, 21, 62], "letter": 64, "level": [10, 19], "leverag": 57, "lib": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "librari": [18, 61], "life": 19, "lighten": 1, "like": [0, 4, 14, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62], "likelihood": 64, "limit": [25, 58], "linalg": [13, 14], "line": 19, "linear": [1, 4, 7, 8, 10, 11, 17, 18, 19, 21, 27, 29, 38, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64], "linear___": 28, "linear_model": [21, 25], "linearli": [30, 64], "linearmmd": [19, 41, 43, 44, 45, 62], "linearmodel": [11, 41, 42, 44, 45, 60, 62], "linearwasserstein": [4, 41, 42, 43, 45], "linewidth": 3, "link": [18, 20, 27, 28, 29, 42, 43, 50, 51, 60, 63], "linspac": [1, 4, 8, 10, 11], "list": [2, 28, 31, 52, 53, 54, 55, 56, 57, 62], "load": 5, "load_breast_canc": 21, "load_iri": [24, 25, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55], "loc": [2, 5, 10, 15, 31, 33], "local": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "locat": [0, 32, 64], "logic": 58, "logist": [0, 2, 7, 11, 12, 15, 16, 17, 18, 21, 27, 29, 41, 42, 43, 44, 45, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64], "logisticregress": 21, "logit": [49, 50, 51, 57], "logits_": [49, 50, 51], "longer": 60, "look": [1, 6, 10, 13, 15, 16], "loos": 19, "loss": [12, 18, 27, 34, 43, 63, 64], "loui": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "low": [12, 18, 19, 27, 32, 43, 44, 57, 63], "lower": [14, 16], "m": [11, 29, 30, 32, 34, 55, 56, 61, 64], "machin": [34, 64], "mackai": 64, "made": [52, 53, 54, 55, 56], "magniett": [29, 30, 64], "mai": [0, 4, 19, 58, 61], "main": 61, "maintain": [13, 14, 15], "make": [3, 14], "make_blob": [5, 10, 15], "make_circl": [1, 6, 7, 11], "make_moon": 8, "manag": 61, "manhattan": [40, 44, 48, 51, 62], "mani": [3, 61], "manner": 64, "map": [12, 18, 27, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63], "marker": [7, 14], "martin": [29, 30, 64], "match": [2, 3, 21, 57], "mathbb": [34, 35, 36, 37, 38, 39, 40, 64], "mathcal": [34, 35, 36, 37, 38, 39, 40, 64], "matmul": [2, 21], "matplotlib": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19], "matrix": [3, 7, 8, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "mattei": [32, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 64], "maugi": [29, 30, 64], "max": [1, 8, 10, 13, 15, 16, 19], "max_clust": [25, 58], "max_depth": [25, 58], "max_featur": 58, "max_it": [1, 2, 15, 16, 24, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "max_leav": 58, "max_pati": [52, 53, 54, 55, 56], "maxim": [11, 34, 41, 45, 52, 53, 54, 55, 56, 58, 64], "maximis": [2, 10, 24, 28, 41, 42, 44, 45, 46, 48, 49, 50, 51, 57, 64], "maximum": [3, 13, 14, 15, 27, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58], "mb": [12, 17, 20, 22, 23, 26, 63], "mean": [1, 2, 3, 4, 6, 7, 9, 11, 19, 29, 31, 32, 38, 64], "means_init": 1, "mechan": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "mem": [12, 17, 20, 22, 23, 26, 63], "membership": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "meshgrid": [1, 4, 8, 10, 11], "messag": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "metadata": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "metadatarequest": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "method": [0, 3, 6, 9, 13, 14, 15, 16, 19, 25, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64], "metric": [1, 6, 7, 9, 11, 13, 14, 19, 21, 24, 25, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64], "metric_param": [40, 44, 48, 51], "mi": [2, 17, 18, 27, 29, 43, 47, 50, 52, 54, 57, 60, 63, 64], "micka": 61, "micka\u00ebl": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "microsoft": [61, 64], "mid": 64, "min": [1, 8, 10], "min_featur": [52, 53, 54, 55, 56], "min_samples_leaf": 58, "min_samples_split": 58, "minim": [52, 53, 54, 55, 56], "minimis": [2, 28], "minimum": [13, 14, 15, 52, 53, 54, 55, 56, 58], "minka": [61, 64], "minor": 60, "minut": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25], "miss": 61, "mistak": 60, "mixtur": [1, 3, 5, 10, 12, 18, 27, 29, 30, 31, 32, 43, 44, 60, 63], "mlcl": [20, 63], "mlcl_consensus_model": 19, "mlp": [1, 4, 8, 12, 17, 18, 27, 55, 56, 60, 62, 63, 64], "mlp___": 28, "mlpmmd": [1, 5, 47, 48], "mlpmmdifittedmlpmmd": 5, "mlpmodel": [46, 48, 60, 62], "mlpwasserstein": [8, 46, 47, 62], "mmd": [1, 6, 12, 14, 17, 18, 25, 27, 29, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64], "mmd_ova": [24, 27, 43, 47, 50, 54, 56, 57], "mmd_ovo": [27, 43, 47, 50, 54, 57], "mmdgemini": [60, 62, 64], "mmdova": 60, "mmdovo": 60, "mode": [6, 52, 53, 54, 55, 56, 60, 62, 64], "model": [11, 12, 17, 18, 22, 24, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63], "model_kernel": 7, "modul": 64, "moon": [12, 18, 27, 47, 48, 63], "more": [19, 62, 64], "moreov": 16, "most": [19, 64], "mri": [14, 52, 64], "msr": [61, 64], "mu": [13, 14, 19, 29], "multi": [1, 62, 64], "multinomi": 16, "multipl": [27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61], "multivari": [33, 60], "multivariate_student_t": 60, "must": [0, 2, 28, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 60, 62, 64], "must_link": [19, 28], "mutual": [10, 12, 18, 27, 32, 34, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 63, 64], "n": [2, 3, 4, 9, 13, 14, 16, 19, 23, 29, 30, 31, 32, 33], "n_cluster": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 19, 24, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "n_compon": [1, 14], "n_constraint": 28, "n_cut": [24, 57], "n_featur": [13, 14, 15, 16, 27, 29, 30, 32, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "n_features_in": [44, 45], "n_hidden_dim": [46, 47, 48, 55, 56], "n_iter_": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "n_sampl": [1, 2, 5, 6, 7, 8, 10, 11, 15, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "nabla_": [34, 35, 36, 37, 38, 39, 40], "naiv": 21, "naive_bay": 21, "name": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64], "nation": 61, "natur": [52, 53, 54, 55, 56, 61], "nbviewer": [5, 10], "ndarrai": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "need": [2, 21, 38, 40, 60], "neg": 2, "nest": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "net": 61, "network": [0, 5, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 64], "neural": [0, 5, 27, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 64], "neurip": 61, "neuron": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "new": [58, 60], "new_i": 7, "new_pr": 7, "new_x": 7, "next": 19, "node": [6, 9, 12, 18, 25, 27, 31, 50, 51, 58, 60, 63], "node_i": 3, "node_j": 3, "nois": [1, 6, 7, 8, 11], "noisi": [13, 14, 15, 16, 29, 30], "non": [3, 6, 12, 18, 27, 30, 31, 49, 50, 63], "none": [2, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "nonparametr": [6, 9, 12, 18, 19, 27, 31, 60, 63, 64], "norm": [13, 14, 28], "normal": [15, 16], "normalis": [1, 6], "note": [3, 8, 58, 64], "notebook": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 21, 24, 25], "notic": [19, 25], "novel": [7, 61], "now": [4, 10, 13, 14, 15, 21, 60], "np": [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21], "num": [1, 4, 8, 10, 11], "number": [1, 3, 9, 13, 14, 15, 19, 27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61], "numer": [34, 35, 36, 37, 38, 39, 40], "numpi": [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 60, 61], "o": [7, 14], "object": [2, 5, 6, 18, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63], "obtain": [21, 25], "octob": [32, 61], "off": [1, 6, 8, 14], "offer": [52, 53, 54, 55, 56, 61], "oh": 61, "ohl": [32, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 64], "ohl2022generalis": 61, "onc": 58, "one": [0, 14, 16, 21, 34, 35, 36, 38, 39, 40, 41, 42, 44, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 62, 64], "ones": [2, 3, 9, 38, 40, 41, 42, 44, 46, 48, 49, 51, 53, 55, 58], "onli": [3, 4, 9, 13, 14, 15, 16, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64], "open": 61, "openreview": 61, "opposit": 2, "optim": [1, 8, 13, 14, 15, 16], "optimis": [2, 3, 6, 9, 25, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64], "optimiser_": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "optimum": [13, 15, 16], "option": [8, 16, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "ord": [13, 14], "order": [2, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "org": [5, 10], "origin": [4, 8, 31, 61], "other": [14, 27, 29, 43, 47, 49, 50, 51, 54, 57, 61, 64], "otherwis": [2, 21, 27, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62], "our": [2, 3, 8, 15, 16, 19, 61, 64], "out": [16, 61], "outcom": 16, "outlier": 4, "output": [2, 27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64], "ova": [17, 18, 21, 27, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 62, 63, 64], "over": [19, 29], "overal": [0, 6], "overrid": 27, "ovo": [3, 5, 6, 9, 17, 18, 19, 27, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 48, 49, 51, 53, 54, 55, 62, 63, 64], "ow": 64, "own": [12, 18, 27, 31, 63, 64], "p": [3, 13, 14, 19, 27, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64], "p3ia": 61, "p_": [2, 51, 64], "p_y_given_x": 62, "p_y_given_x_1": 21, "p_y_given_x_2": 21, "packag": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 60], "page": [5, 10], "pair": [3, 8, 18, 20, 27, 28, 29, 42, 43, 50, 51, 62, 63], "paired_dist": [40, 44, 48, 51], "pairwis": 11, "pairwise_dist": [3, 8, 64], "pairwise_kernel": [11, 64], "paper": [4, 8, 41, 45, 64], "param": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "paramet": [0, 1, 2, 3, 9, 11, 16, 19, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64], "parametr": [3, 6, 12, 18, 27, 31, 49, 50, 63, 64], "parametris": 60, "parent": 2, "part": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 49, 50, 51], "partit": [16, 52, 53, 54, 55, 56, 60], "partli": 61, "pass": [3, 8, 27, 29, 30, 31, 32, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64], "path": [3, 8, 14, 52, 53, 54, 55, 56, 60], "pattern": 64, "pca": 14, "pearson": 11, "penalti": [10, 13, 14, 15, 16, 21, 41, 45, 52, 53, 54, 55, 56, 64], "per": [24, 34, 35, 36, 37, 38, 39, 40, 57, 60], "percentag": [52, 53, 54, 55, 56], "perceptron": [1, 62, 64], "perform": [3, 13, 14, 15, 16, 19, 21, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64], "perona": [41, 45, 64], "petal": 25, "phantom": 64, "pick": 62, "pierr": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "pietro": [41, 45], "pip": 61, "pipelin": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "pleas": [5, 10, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61], "pleasur": 61, "plot": [1, 3, 4, 11, 13, 15], "plot_circl": [1, 12, 63], "plot_custom_model": [2, 12, 63], "plot_douglas_exampl": [24, 26, 63], "plot_feature_selection_linear": [13, 17, 63], "plot_feature_selection_logreg_mi": [14, 17, 63], "plot_feature_selection_mlp": [15, 17, 63], "plot_gemini_scor": [21, 22, 63], "plot_graph_node_clust": [3, 12, 63], "plot_grouped_select": [16, 17, 63], "plot_gstm": [4, 12, 63], "plot_intro_mlp_mmd": [5, 12, 63], "plot_kauri_exampl": [25, 26, 63], "plot_kernel_kmean": [6, 12, 63], "plot_kernel_rim": [7, 12, 63], "plot_moon_clust": [8, 12, 63], "plot_nonparametric_clust": [9, 12, 63], "plot_rim": [10, 12, 63], "plot_semi_supervised_consensu": [19, 20, 63], "plot_squared_loss_mi": [11, 12, 63], "plt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19], "point": 57, "poli": [38, 41, 42, 46, 49, 53, 55, 58], "polynomi": [38, 41, 42, 46, 49, 53, 55, 58], "posit": [3, 9, 33], "possibl": [2, 27, 28, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64], "pot": 61, "pp": [34, 64], "pre": 62, "precioso": [32, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 64], "precis": [34, 35, 36, 37, 38, 39, 40], "precomput": [3, 8, 19, 21, 27, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64], "precomputed_dist": 21, "precomputed_kernel": 62, "predict": [0, 2, 4, 5, 8, 9, 10, 11, 13, 14, 15, 19, 21, 27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "predict_proba": [10, 19, 21, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62], "preprint": 64, "preprocess": 21, "present": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64], "prevent": 64, "print": [0, 3, 6, 7, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "print_kauri_tre": 25, "probabl": [2, 3, 10, 27, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64], "problem": 60, "procedur": 3, "proceed": [34, 64], "process": [32, 61, 64], "produc": [16, 57], "progress": [0, 13, 14, 15, 16, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "project": 61, "proport": 31, "propos": [0, 1, 10, 11, 14, 19, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 64], "propto": 64, "provid": [0, 18, 19, 61, 64], "proxim": [52, 54, 55, 56, 60], "public": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "purpos": [14, 64], "put": 58, "pval": [2, 16, 31], "py": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 63], "pyplot": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19], "python": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 21, 24, 25, 60, 61], "python3": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "q": 64, "qionghai": 52, "quantil": 8, "r": [19, 34, 35, 36, 37, 38, 39, 40, 55, 56, 64], "rabusseau": [29, 30, 64], "rafteri": [29, 30, 64], "rand_jitt": 16, "randn": 16, "random": [2, 3, 15, 16, 19, 27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "random_st": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "randomli": 58, "randomst": [27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "rang": [3, 14, 16, 19], "rangl": 64, "rate": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "rather": [19, 21], "ratio": 19, "ravel": [1, 4, 8, 10, 11], "rbf": [1, 6, 7, 11, 19, 38, 41, 42, 46, 49, 53, 55, 58, 62], "rbf_gemini": 1, "reach": 58, "readili": 64, "real": 19, "realis": 61, "realli": 61, "recombin": 57, "red": 16, "reds_r": [4, 11], "reduct": [52, 53, 54, 55, 56], "refer": [27, 29, 30, 32, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "refurbish": 58, "reg": [7, 10, 41, 45], "regard": 60, "regress": [0, 2, 7, 11, 12, 15, 16, 17, 18, 21, 27, 29, 41, 42, 43, 44, 45, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64], "regular": [29, 30, 41, 45, 64], "regularis": [10, 13, 14, 15, 16, 41, 42, 43, 44, 45], "rel": [55, 56, 57], "relev": [13, 14, 15, 16, 61, 64], "relu": 64, "remain": [19, 52, 53, 54, 55, 56, 60], "remov": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "render": [5, 10], "repeat": 16, "repeatedli": 58, "replac": [3, 8, 11, 21, 62, 64], "repo": 61, "report": [61, 64], "repres": [52, 53, 54, 55, 56], "represent": [5, 10, 46, 47, 48, 55, 56], "reproduc": [27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "requir": [19, 60, 61, 62, 64], "rerun": [5, 10], "research": [61, 64], "reshap": [1, 2, 4, 8, 10, 11], "resp": 62, "respect": [28, 29, 54, 60], "restor": [52, 53, 54, 55, 56], "restore_best_weight": [52, 53, 54, 55, 56], "result": [11, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "retain": 2, "retak": [4, 8], "retrain": [52, 53, 54, 55, 56], "retriev": [52, 53, 54, 55, 56], "retrocompat": 60, "return": [2, 9, 16, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64], "return_grad": [34, 35, 36, 37, 38, 39, 40], "return_x_i": [21, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55], "revers": 19, "reward": 58, "rewrit": 64, "right": 64, "rim": [12, 18, 27, 41, 42, 43, 44, 60, 63, 64], "rimifittedrim": 10, "rizzo": 64, "robustscal": 21, "rout": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "row": 2, "ruan": [55, 56, 64], "rule": [0, 57], "run": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 27, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "ryan": [41, 45], "same": [2, 9, 19, 21, 28, 61, 64], "sampl": [0, 4, 10, 13, 14, 15, 18, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64], "satisfi": [19, 28, 58], "sc": 1, "scale": [2, 15, 29, 31, 33, 61, 62], "scatter": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16], "scatterpoint": [5, 10, 15], "scheme": [52, 53, 54, 55, 56], "scientif": 61, "scikit": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 60, 61, 62], "scipi": [3, 8, 61], "score": [3, 6, 9, 10, 13, 14, 15, 16, 22, 24, 25, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63], "script": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25], "search": [13, 14, 15, 16], "second": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 64], "section": [29, 30], "seed": [3, 15, 16, 19], "seek": [19, 21, 64], "seem": 4, "seen": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "segment": [14, 52, 64], "seismic": 19, "select": [0, 11, 17, 27, 29, 30, 34, 43, 47, 52, 53, 54, 55, 56, 58, 60, 62, 63, 64], "self": [2, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "semi": 33, "sens": [61, 64], "separ": [3, 9, 10, 13, 14, 15, 60, 64], "sequenti": [52, 53, 54, 55, 56], "set": [1, 7, 27, 28, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64], "set_alpha": [5, 10, 15], "set_param": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "settl": [13, 15, 16], "sever": [19, 64], "sgd": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "sgdoptim": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "shape": [2, 3, 8, 16, 19, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "share": [21, 61], "shaw": 64, "shortcut": 37, "shortest": [3, 8], "should": [13, 14, 15, 16, 19, 34, 35, 36, 37, 38, 39, 40, 54, 57, 64], "show": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25], "sigmoid": [2, 19, 38, 41, 42, 46, 49, 53, 55, 58], "signal": 64, "sim": [34, 35, 36, 37, 38, 39, 40, 64], "similar": [1, 14], "simpl": [0, 1, 2, 3, 5, 7, 9, 12, 18, 19, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64], "simplex": 64, "simpli": 60, "simplic": 25, "simplifi": [3, 37, 62], "simul": 19, "simultan": [0, 52, 53, 54, 55, 56, 61], "sinc": 6, "singl": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60], "site": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "situat": 19, "size": [2, 3, 8, 15, 16, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "skeleton": 0, "skip": [55, 56, 64], "sklearn": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 58, 64], "small": [14, 19, 52, 53, 54, 55, 56, 61], "smi": 11, "smoothen": 57, "so": [4, 8, 13, 14, 15, 21, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62], "societ": [29, 30, 64], "soft": 57, "softmax": 64, "solut": [8, 11, 13, 14, 15, 16, 19, 34, 52, 53, 54, 55, 56, 64], "solv": 7, "solver": [2, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "some": [1, 7, 16, 19, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64], "sort": 19, "sorted_confidence_sampl": 19, "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 21, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64], "space": [14, 38, 40, 64], "spar": 60, "spars": [3, 8, 16, 17, 18, 27, 29, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 58, 60, 63, 64], "sparselinearmi": [14, 53, 60, 64], "sparselinearmmd": [13, 16, 52, 55], "sparselinearmodel": [52, 53, 60, 64], "sparsemlpmmd": [15, 54, 56], "sparsemlpmodel": [54, 55, 60, 64], "sparsiti": [55, 56, 64], "special": [58, 61, 62, 64], "specif": [9, 14, 27, 61, 62, 64], "specifi": [3, 21, 52, 53, 54, 55, 56, 60], "spectral": [1, 8], "spectralclust": 1, "spectrum": 61, "spheric": 1, "sphinx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 21, 24, 25], "spirit": 61, "split": [57, 58, 64], "spread": 33, "sqrt": 2, "squar": [12, 18, 25, 27, 34, 35, 43, 60, 63, 64], "stai": 64, "standard": 0, "start": [1, 2, 6, 7, 19, 21, 52, 53, 54, 55, 56, 61], "state": 2, "statist": 64, "statistiqu": [29, 30, 64], "std": [1, 6, 7, 11], "stdout": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "step": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "still": 2, "stochast": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "stop": [52, 53, 54, 55, 56], "store": 2, "str": [27, 43, 47, 50, 54, 57], "strength": [55, 56], "string": 60, "structur": [0, 58, 59], "student": [12, 18, 27, 32, 33, 43, 44, 60, 63], "sub": 19, "subobject": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "subplot": [1, 15], "subset": [0, 53, 54, 55, 56], "suffici": [13, 14, 15, 16], "suggest": 61, "sugiyama": [11, 34, 64], "super": 2, "superflu": 19, "supervis": 19, "support": [49, 50, 51, 60, 61], "symmetr": [3, 34, 35, 36, 37, 38, 39, 40], "symmetri": 1, "synthet": [0, 61], "system": [32, 61, 64], "t": [2, 3, 4, 21, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 64], "tailor": [49, 50, 51], "take": [1, 4, 10, 13, 15, 16, 19, 64], "taken": [29, 30, 64], "target": [24, 25, 64], "taylor": 64, "technic": [61, 64], "tell": 2, "temperatur": 57, "test": [7, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "text": [2, 35, 36, 37, 38, 39, 64], "than": [8, 52, 53, 54, 55, 56], "thank": 61, "thei": [0, 19, 21, 62, 64], "them": [7, 58], "theorem": 64, "theori": 61, "theta": [2, 64], "theta_": [2, 49, 50, 51], "theta_grad": 2, "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 27, 29, 30, 32, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64], "those": [57, 58, 62], "threshold": [8, 14, 16, 24], "through": [13, 14, 15, 16, 55, 56, 58, 60, 61], "thu": [0, 6, 13, 14, 15, 16, 28], "tibshirani": [55, 56, 64], "tight_layout": [1, 15], "time": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25], "titl": [1, 2, 13, 14, 15, 61], "togeth": [19, 28], "too": [52, 53, 54, 55, 56], "took": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "tool": 61, "top": [2, 4, 11, 13, 15, 16, 52, 54, 55, 56], "torr": 61, "total": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 39, 62, 63, 64], "tr": [61, 64], "tractabl": 64, "train": [0, 2, 5, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64], "transact": 64, "tree": [26, 27, 60, 61, 63, 64], "tree_": 58, "tri": 61, "trick": 8, "true": [2, 3, 4, 5, 8, 9, 10, 13, 14, 15, 16, 19, 21, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64], "trust": [5, 10], "try": [5, 10, 19, 61], "tune": [11, 34, 64], "tupl": [29, 30, 31], "tv": 39, "tv_ovo": 62, "tvgemini": [60, 62, 64], "two": [1, 2, 5, 6, 7, 12, 18, 25, 27, 34, 35, 36, 38, 39, 40, 46, 47, 48, 54, 55, 58, 63, 64], "type": [1, 60, 64], "typic": [52, 53, 54, 55, 56], "u": [10, 61, 62, 64], "unabl": [5, 10], "under": [10, 52, 53, 54, 55, 56, 61], "underli": [0, 58], "understand": 0, "unfold": [52, 53, 54, 55, 56], "uniform": 2, "unimpl": 61, "unless": 1, "unlik": 4, "unnecessari": 3, "unseen": [0, 9], "unsupervis": [2, 18, 19, 26, 27, 57, 58, 59, 60, 62, 63, 64], "unsure_sample_pair": 19, "until": [13, 14, 15, 16, 52, 53, 54, 55, 56, 58], "unus": [34, 35, 36, 37, 39], "unweight": [3, 8], "up": [2, 58], "updat": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61], "upgrad": [52, 53, 54, 55, 56], "upon": 58, "upper": [5, 10, 15], "url": 61, "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 21, 24, 35, 36, 38, 39, 62, 63, 64], "usag": 60, "user": [27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61], "util": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "v": [21, 34, 35, 36, 38, 39, 40, 62, 64], "valid": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25, 60], "validate_data": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "valu": [1, 3, 13, 14, 15, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62], "valuat": 64, "vanilla": [52, 54, 55, 56], "variabl": [3, 13, 14, 15, 16, 18, 29, 30, 52, 53, 54, 55, 56, 60, 64], "variant": 11, "variat": [39, 52, 54, 55, 56, 58, 62, 64], "variou": [19, 52, 53, 54, 55, 56], "vector": [2, 27, 28, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64], "verbos": [2, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "veri": 14, "version": [3, 34, 35, 36, 38, 39, 40, 41, 52, 55, 60, 64], "via": [52, 54, 64], "visualis": [11, 14, 16], "vogelstein": 64, "vol": 64, "w": [32, 34, 35, 36, 37, 38, 39, 40, 61, 64], "w1_": [46, 47, 48, 55, 56], "w2_": [46, 47, 48, 55, 56], "w_": [41, 42, 43, 44, 45, 52, 53, 54], "w_k": 64, "w_skip_": [55, 56], "wa": [13, 15, 16, 27, 29, 30, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61], "wait": [52, 53, 54, 55, 56], "want": [4, 8, 64], "warith": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61], "warn": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 24, 25], "wasserstein": [21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 60, 62, 64], "wasserstein_ova": [27, 43, 47, 50, 54, 57], "wasserstein_ovo": [2, 27, 43, 47, 50, 54, 57], "wasserstein_scor": 21, "wassersteingemini": [21, 60, 62, 64], "wassersteinova": 60, "wassersteinovo": 60, "we": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 21, 25, 61, 62, 64], "weight": [13, 14, 15, 27, 28, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "well": [1, 4, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64], "were": [19, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "what": 19, "when": [27, 52, 53, 54, 55, 56, 62], "where": [4, 8, 13, 14, 15, 16, 19, 21, 27, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64], "wherea": 57, "whether": [19, 27, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "which": [0, 2, 3, 8, 10, 13, 15, 16, 25, 28, 29, 30, 31, 32, 38, 40, 52, 53, 54, 55, 56, 57, 58, 61], "while": 19, "whole": [27, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56], "why": 14, "width": 25, "william": 64, "wise": 57, "wish": 2, "within": 57, "without": [52, 53, 54, 55, 56, 61, 64], "word": [62, 64], "work": [2, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64], "would": [6, 8, 19, 61, 62], "write": 16, "written": [2, 61], "x": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64], "x1_class_1": 16, "x1_class_2": 16, "x2_class_1": 16, "x2_class_2": 16, "x_0": [5, 10, 15], "x_1": [5, 10, 15], "x_2": [5, 10, 15], "x_class_1": 16, "x_class_2": 16, "x_i": [49, 50, 51], "x_inform": 16, "x_nois": 16, "x_pca": 14, "x_val": [1, 4, 8, 10, 11], "xlabel": [4, 5, 10, 13, 15], "xlim": 4, "xx": [1, 4, 8, 10, 11], "y": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 21, 24, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64], "y_1": 64, "y_2": 64, "y_a": [34, 35, 36, 38, 39, 40], "y_b": [34, 35, 36, 38, 39, 40], "y_one_hot": 21, "y_pred": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 19, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "y_pred_additive_chi2": 25, "y_pred_consensu": 19, "y_pred_linear": [24, 25], "y_pred_logit": 2, "y_pred_mlcl_consensu": 19, "y_val": [1, 4, 8, 10, 11], "yamada": [11, 34, 64], "year": 61, "ylabel": [4, 5, 10, 13, 15], "ylim": [1, 4, 6, 13, 15], "you": [2, 61, 64], "your": [12, 18, 27, 31, 63, 64], "youyong": 52, "yue": 52, "yy": [1, 4, 8, 10, 11], "zemel": 64, "zero": [1, 19, 60], "zip": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 21, 24, 25], "zz": [4, 8, 10, 11]}, "titles": ["GemClus API", "Comparative clustering of circles dataset with kernel change", "Extending GemClus to build your own discriminative clustering model", "Graph node clustering with a nonparametric model", "Example of decision boundary map for a mixture of Gaussian and low-degree Student distributions", "An introducing example to clustering with an MLP and the MMD GEMINI", "Kernel KMeans clustering with GEMINI", "Clustering circles with kernel RIM", "Drawing a decision boundary between two interlacing moons", "Non parametric clustering", "Simple logistic regression with RIM", "Clustering with the squared-loss mutual information", "Computation times", "Feature selection using the Sparse MMD OvO (Logistic regression)", "Feature selection using the Sparse Linear MI (Logistic regression)", "Feature selection using the Sparse MMD OvA (MLP)", "Grouped Feature selection with a linear model", "Computation times", "Example gallery", "Consensus clustering with linking constraints on sample pairs", "Computation times", "Scoring any model with GEMINI", "Computation times", "Computation times", "Building a differentiable unsupervised tree: DOUGLAS", "Building an unsupervised tree with kernel-kmeans objective: KAURI", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.DiscriminativeModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus</span></code>.add_mlcl_constraint", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_one", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.celeux_two", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.draw_gmm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.gstm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.data</span></code>.multivariate_student_t", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.ChiSquareGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.HellingerGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.KLGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.MMDGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.TVGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.gemini</span></code>.WassersteinGEMINI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.KernelRIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.LinearWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.linear</span></code>.RIM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.mlp</span></code>.MLPWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.nonparametric</span></code>.CategoricalWasserstein", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseLinearModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPMMD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.sparse</span></code>.SparseMLPModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Douglas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.Kauri", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gemclus.tree</span></code>.print_kauri_tree", "RELEASES", "Welcome to GemClus documentation!", "Quick start on GemClus", "Computation times", "User guide : contents"], "titleterms": {"0": 60, "1": 60, "2": 60, "A": [61, 64], "The": 64, "about": 61, "acknowledg": 61, "add": 19, "add_mlcl_constraint": 28, "addit": 25, "an": [5, 25], "ani": 21, "api": 0, "approach": 64, "ar": 64, "avail": 64, "basic": 64, "between": [3, 8], "boundari": [1, 4, 8], "build": [2, 19, 24, 25], "cannot": 19, "categoricalmmd": 49, "categoricalmodel": 50, "categoricalwasserstein": 51, "celeux_on": 29, "celeux_two": 30, "chang": [1, 60], "chi2": 25, "chisquaregemini": 34, "choos": 64, "circl": [1, 7], "circular": 6, "cluster": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 18, 19, 61, 64], "compar": 1, "comput": [3, 8, 12, 17, 20, 22, 23, 26, 63], "consensu": [18, 19], "constraint": [0, 19], "content": [61, 64], "contribut": 61, "creat": [2, 3, 5, 19, 24, 25], "custom": 2, "data": [4, 5, 29, 30, 31, 32, 33], "dataset": [0, 1, 6, 7, 10, 13, 14, 15, 16, 19, 21, 24, 25, 64], "decis": [1, 4, 8], "definit": 64, "degre": 4, "dens": 0, "differenti": 24, "discrimin": [2, 61, 64], "discriminativemodel": 27, "displai": 1, "distribut": [4, 64], "document": 61, "dougla": [24, 57], "draw": [1, 3, 6, 7, 8, 9], "draw_gmm": 31, "edg": 3, "evalu": 25, "exampl": [4, 5, 18, 27, 28, 29, 31, 32, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64], "extend": [2, 64], "featur": [13, 14, 15, 16, 18], "final": [3, 4, 5, 6, 8, 9, 10, 13, 14, 15], "first": 25, "fit": [2, 5, 24], "from": [3, 6, 9], "function": 64, "galleri": 18, "gaussian": 4, "gemclu": [0, 2, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62], "gemini": [0, 5, 6, 18, 21, 34, 35, 36, 37, 38, 39, 40, 61, 64], "gener": [0, 4, 5, 8, 18], "gmm": [3, 9], "graph": 3, "group": 16, "gstm": 32, "guid": 64, "hellingergemini": 35, "histori": 60, "i": [61, 64], "implement": 64, "inform": 11, "instal": 61, "interlac": 8, "introduc": 5, "kauri": [25, 58], "kernel": [1, 6, 7, 25], "kernelrim": 41, "klgemini": 36, "kmean": [6, 25], "latest": [60, 61], "linear": [14, 16, 25, 41, 42, 43, 44, 45], "linearmmd": 42, "linearmodel": 43, "linearwasserstein": 44, "link": 19, "load": [10, 13, 14, 15, 16, 19, 21, 24, 25], "logist": [10, 13, 14], "loss": 11, "low": 4, "map": 4, "matrix": 19, "metric": [3, 8], "mi": [14, 37], "mixtur": 4, "mlp": [5, 15, 46, 47, 48], "mlpmmd": 46, "mlpmodel": 47, "mlpwasserstein": 48, "mmd": [5, 13, 15], "mmdgemini": 38, "model": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 21, 25, 64], "moon": 8, "multipl": 19, "multivariate_student_t": 33, "must": 19, "mutual": 11, "node": 3, "non": 9, "nonparametr": [0, 3, 49, 50, 51], "object": [25, 64], "offici": 61, "optimis": 19, "ova": 15, "ovo": 13, "own": 2, "packag": [61, 64], "pair": 19, "paper": 61, "parametr": 9, "path": [13, 15, 16], "perform": 25, "plot": [2, 5, 19], "pre": [3, 8], "predict": [1, 7], "print_kauri_tre": 59, "procedur": 2, "quick": 62, "real": 21, "refer": [61, 64], "regress": [10, 13, 14], "regularis": 64, "relat": 61, "releas": 60, "result": [2, 13, 15, 16, 19], "rim": [7, 10, 45], "sampl": [1, 3, 6, 7, 8, 9, 19], "scope": 61, "score": [0, 18, 21], "second": 25, "select": [13, 14, 15, 16, 18], "show": 7, "similar": 7, "simpl": [10, 13, 14, 15, 16, 21], "spars": [0, 13, 14, 15, 52, 53, 54, 55, 56], "sparselinearmi": 52, "sparselinearmmd": 53, "sparselinearmodel": 54, "sparsemlpmmd": 55, "sparsemlpmodel": 56, "specif": [3, 8], "squar": 11, "start": 62, "structur": 25, "student": 4, "summari": 64, "supervis": 21, "synthet": [10, 13, 14, 15, 16], "test": 2, "time": [12, 17, 20, 22, 23, 26, 63], "train": [1, 3, 4, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21], "tree": [0, 18, 24, 25, 57, 58, 59], "tvgemini": 39, "two": [8, 21], "unsupervis": [24, 25], "us": [13, 14, 15, 25, 27, 28, 29, 31, 32, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61], "user": 64, "version": 61, "visualis": 25, "wassersteingemini": 40, "welcom": 61, "what": [61, 64], "which": 64, "why": 61, "your": 2}})